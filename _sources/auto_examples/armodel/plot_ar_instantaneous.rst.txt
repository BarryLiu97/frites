.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.2594028 ,  0.14624918, -0.38731959, ...,  0.0969943 ,
              1.07542181,  0.49721034],
            [ 0.25954813,  0.05022404, -0.1021693 , ...,  0.46139527,
              0.1034709 , -0.10786623],
            [-0.35999324, -0.07454116,  0.26023682, ...,  0.41006391,
              0.04809403, -0.27277169]],

           [[-0.20234544,  0.17111263,  0.10411789, ...,  1.12535374,
             -0.1500937 , -1.10820354],
            [-0.10963163,  0.00383668,  0.05087473, ..., -0.37848775,
              0.16532598,  0.66657159],
            [ 0.49464506, -0.18846949,  0.09592671, ..., -0.29610547,
             -0.2435045 , -0.0957974 ]],

           [[-0.27948112,  0.09597226,  0.31546722, ...,  0.16410129,
             -0.1306431 ,  0.1459265 ],
            [-0.00860322,  0.17224949, -0.12573482, ..., -0.11280833,
              0.17268691,  0.23713935],
            [ 0.02503017,  0.30869087, -0.34318791, ...,  0.26643053,
              0.09885161, -0.053018  ]],
    ...
           [[-0.31338184, -0.25208395,  0.18814786, ...,  0.50464143,
              0.61512485, -0.31464396],
            [ 0.21148702,  0.31439066, -0.20702262, ...,  0.1648214 ,
              0.01618664,  0.21168171],
            [ 0.02162881, -0.48453067,  0.01030028, ...,  0.02594227,
             -0.0675098 , -0.26499708]],

           [[-0.07007889,  0.25161762,  0.11709879, ..., -0.15778223,
              0.28820645,  0.58985821],
            [-0.17339219,  0.11041015, -0.18644342, ...,  0.25400976,
              0.67981702,  0.01859872],
            [ 0.14621313, -0.0138819 ,  0.26433997, ...,  0.14261174,
              0.09379769,  0.14690329]],

           [[-0.12066272, -0.04347578,  0.31171247, ...,  0.17022926,
              0.57417333,  0.04099665],
            [ 0.39348311,  0.17890304, -0.30164012, ...,  0.21523566,
              0.33094409, -0.00633844],
            [-0.17404099,  0.09034441,  0.01540798, ...,  0.42427521,
             -0.21957822, -0.32853775]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 4719.77it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.398 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
