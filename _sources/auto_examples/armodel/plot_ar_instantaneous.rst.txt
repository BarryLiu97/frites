.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.05295525,  0.52910778,  0.23588253, ...,  0.19858286,
              0.77622271, -0.02446203],
            [ 0.07097413, -0.03096788,  0.21883064, ...,  0.10618859,
             -0.18811238, -0.33778213],
            [-0.13716359, -0.0673741 , -0.02682442, ..., -0.2164189 ,
              0.0553241 , -0.04244121]],

           [[-0.12098669, -0.10623224,  0.04186624, ...,  0.01615454,
              0.39960037,  0.51535002],
            [ 0.25610092, -0.03683056,  0.04504461, ...,  0.2368693 ,
             -0.02851496, -0.20628469],
            [ 0.02290527, -0.22288718, -0.09045951, ...,  0.08479106,
              0.05995876, -0.0178961 ]],

           [[-0.16210767, -0.23671459,  0.02190165, ..., -0.00112264,
             -0.60460314, -0.47449742],
            [-0.09398458, -0.14097582,  0.2236201 , ...,  0.248314  ,
             -0.06143535, -0.00107711],
            [-0.06725674, -0.02981258,  0.28765763, ...,  0.19685441,
              0.16105468, -0.17994419]],
    ...
           [[-0.06034458, -0.44275207, -0.03986805, ..., -0.15298479,
              0.05241294,  0.00351671],
            [ 0.161726  , -0.13781348, -0.11347439, ..., -0.17508939,
             -0.34630682, -0.1889621 ],
            [ 0.09843353,  0.10792659,  0.11379918, ...,  0.11968893,
              0.01154944, -0.04762112]],

           [[ 0.29914546,  0.23707537, -0.51140752, ..., -0.24679869,
              0.49269815,  0.82559474],
            [-0.09099994, -0.36375886, -0.29567157, ...,  0.34394866,
             -0.38867102, -0.3082547 ],
            [ 0.09931734,  0.00139062, -0.33443236, ...,  0.30919984,
              0.36825197, -0.14661883]],

           [[ 0.19557783,  0.48753273,  0.0556543 , ..., -0.76132391,
              0.20741199,  0.85857613],
            [ 0.00262533,  0.23227981,  0.0321081 , ...,  0.16202888,
              0.02297321, -0.02787502],
            [-0.02359712,  0.20840912, -0.03428113, ...,  0.35952594,
              0.52673429, -0.08874936]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/miniconda3/envs/testenv/lib/python3.6/site-packages/networkx/drawing/layout.py:950: FutureWarning: arrays to stack must be passed as a "sequence" type such as list or tuple. Support for non-sequence iterables such as generators is deprecated as of NumPy 1.16 and will raise an error in the future.
      pos = np.row_stack((pos[x] for x in node_list))



plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.599 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
