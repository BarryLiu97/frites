.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.23096373, -0.1868055 , -0.09001496, ...,  0.41787891,
              0.15966516,  0.00215904],
            [-0.15855514, -0.29861452, -0.3446579 , ..., -0.17742313,
              0.24481604,  0.25409637],
            [ 0.14734209, -0.03662651,  0.1546398 , ..., -0.07927997,
              0.30788072, -0.01139745]],

           [[-0.12067124,  0.04060831,  0.14904572, ..., -0.31998696,
             -0.22576517,  0.03924836],
            [ 0.09378949, -0.18197565,  0.03523101, ...,  0.12937296,
              0.29155003,  0.27195437],
            [-0.042446  ,  0.02531047,  0.07225316, ...,  0.25205451,
              0.22415202, -0.09908276]],

           [[-0.22384242,  0.26463913,  0.56948906, ...,  0.23351548,
             -0.03507512,  0.24239889],
            [ 0.18874067, -0.1854757 , -0.159923  , ...,  0.16746145,
              0.24154564,  0.30455993],
            [ 0.19479728, -0.11576563, -0.1215841 , ...,  0.38153952,
             -0.12677392,  0.11490672]],
    ...
           [[-0.03027262, -0.03281237, -0.1248854 , ...,  0.0883979 ,
              0.25100614, -0.06936205],
            [-0.06501034, -0.05128764,  0.01453708, ...,  0.43980641,
             -0.1394781 , -0.20270118],
            [ 0.71658811, -0.07270337, -0.03709173, ...,  0.19245686,
              0.08791765, -0.21074222]],

           [[ 0.27098422, -0.15161841, -0.61527751, ...,  0.47969787,
              0.05476227, -0.75944524],
            [ 0.27967117,  0.08172304, -0.09615378, ...,  0.0646861 ,
              0.12962502,  0.09524062],
            [-0.42740491,  0.3193533 ,  0.3259994 , ...,  0.11032049,
             -0.08089684, -0.0241899 ]],

           [[-0.07106257, -0.26501262, -0.13403777, ...,  0.1690643 ,
              0.3915038 ,  0.08683659],
            [ 0.12112311, -0.10707812,  0.01304187, ...,  0.47660651,
              0.07062363, -0.10848924],
            [ 0.48887197, -0.00548685, -0.33372776, ..., -0.11356732,
             -0.14669304,  0.05172532]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 5910.25it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  11.773 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
