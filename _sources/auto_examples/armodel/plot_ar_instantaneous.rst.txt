.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.24816309,  0.06862666,  0.47407244, ...,  0.351705  ,
             -0.24959367, -0.4399023 ],
            [ 0.23442501,  0.22275893,  0.08566778, ...,  0.0909832 ,
             -0.15478057, -0.15370453],
            [-0.2566829 ,  0.29519985,  0.00825464, ..., -0.19272231,
             -0.08151136,  0.32283399]],

           [[-0.35119872,  0.12442695,  0.76613735, ...,  0.14797422,
              0.13435162, -0.23859473],
            [ 0.46906528,  0.0498157 , -0.20141605, ...,  0.15230715,
             -0.13212527, -0.31778036],
            [ 0.04448114,  0.15410228,  0.33974507, ...,  0.37364199,
              0.1603615 , -0.28051596]],

           [[-0.0175041 , -0.28175237, -0.01281843, ...,  0.04572893,
              0.38989891,  0.37973371],
            [-0.23373787, -0.09862259,  0.22954092, ...,  0.24494147,
              0.01529727, -0.28364817],
            [-0.08338866, -0.20848711, -0.22015207, ...,  0.33702153,
              0.04546024, -0.29339215]],
    ...
           [[-0.09658836,  0.56902136,  0.09224475, ..., -0.4880789 ,
             -0.32272081, -0.03861918],
            [ 0.01475384,  0.0188851 ,  0.02145612, ...,  0.14192857,
              0.01133605,  0.15978751],
            [ 0.0140952 , -0.2410939 ,  0.13275229, ..., -0.35128986,
              0.31579719,  0.1212778 ]],

           [[-0.43033056, -0.0280704 ,  0.14807869, ...,  0.47288032,
              0.09367501, -0.18506622],
            [ 0.09106807,  0.43582044, -0.54778414, ..., -0.04829526,
              0.54440769,  0.04548322],
            [ 0.24562081, -0.25011576, -0.07267132, ...,  0.17115218,
             -0.24271292, -0.004665  ]],

           [[-0.04323941,  0.23810265,  0.08153776, ...,  0.78190654,
              0.74503781, -0.49965949],
            [-0.01182933,  0.12153867,  0.45493205, ...,  0.30756699,
              0.03173719,  0.0090367 ],
            [-0.16953464, -0.21400865,  0.05159975, ..., -0.08046666,
              0.49212899,  0.55272313]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 4605.75it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.291 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
