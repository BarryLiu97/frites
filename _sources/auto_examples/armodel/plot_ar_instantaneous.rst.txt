.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.2392106 ,  0.06926265,  0.41811209, ..., -0.5344601 ,
             -0.26171948,  0.09074122],
            [ 0.20838668, -0.08469948, -0.34447558, ...,  0.01096332,
             -0.21477553,  0.05599321],
            [-0.0829116 ,  0.03231267,  0.09740042, ..., -0.31725265,
             -0.37382282,  0.15400578]],

           [[-0.37366603, -0.13479463,  0.18618491, ..., -0.39669673,
              0.10436166,  0.38911102],
            [-0.4227768 , -0.14250308, -0.11462042, ...,  0.1057098 ,
             -0.1307102 , -0.48364405],
            [ 0.07394727, -0.09015011, -0.19475637, ..., -0.05712309,
             -0.35473816,  0.2893135 ]],

           [[ 0.00395572,  0.10334006, -0.11554664, ..., -0.56438601,
              0.64693951,  0.72921229],
            [-0.1892626 ,  0.21076361,  0.17067167, ...,  0.1931407 ,
             -0.3291497 , -0.67323235],
            [-0.19087545, -0.10379389,  0.25544757, ..., -0.16320714,
             -0.24129739, -0.52711944]],
    ...
           [[-0.33696396, -0.25616666,  0.21582396, ...,  0.22556104,
              0.07072725, -0.31891512],
            [ 0.4691864 ,  0.42992952, -0.4110483 , ...,  0.42535347,
              0.10028347, -0.052375  ],
            [-0.11739633, -0.38695044,  0.14076081, ..., -0.54288769,
             -0.16870542,  0.34217039]],

           [[-0.14045944,  0.23738121,  0.31807313, ...,  0.39867972,
             -0.32024225, -0.45786606],
            [-0.26312064,  0.26646121, -0.05975029, ...,  0.15823637,
              0.06954481,  0.06552663],
            [ 0.39975483,  0.51984562,  0.00488544, ...,  0.29098093,
              0.11834395, -0.07471698]],

           [[ 0.14191604,  0.15826952,  0.05712236, ...,  0.27359392,
              0.17056306, -0.34405805],
            [ 0.11579038,  0.07633739,  0.00620727, ...,  0.30736109,
              0.44397031, -0.04952442],
            [ 0.18583369, -0.08614398, -0.16615571, ...,  0.20928567,
             -0.29068328, -0.51462809]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 5904.70it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.717 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
