.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.21432451,  0.59597881,  0.52246003, ...,  0.06087578,
              0.26650084,  0.15813507],
            [ 0.10551292, -0.29652436, -0.70853192, ...,  0.43447291,
             -0.55554944, -0.4397263 ],
            [-0.04394321,  0.09064417,  0.13274786, ..., -0.16495049,
             -0.58176226,  0.07908375]],

           [[-0.12244288,  0.22949011,  0.48298243, ...,  0.17927108,
              0.23225584,  0.23744992],
            [ 0.08278961,  0.0862737 , -0.19598106, ...,  0.30549208,
              0.04702928,  0.029531  ],
            [ 0.10997809, -0.19979714,  0.16491743, ..., -0.16846952,
             -0.21555362,  0.21514141]],

           [[-0.09028997,  0.46810821,  0.25646693, ...,  0.30323797,
             -0.08895139, -0.45292287],
            [-0.09326487, -0.26748208, -0.19927189, ...,  0.05306511,
              0.11819113, -0.01904218],
            [-0.15385129,  0.45809596, -0.11628075, ..., -0.28920304,
              0.03548142,  0.10941802]],
    ...
           [[ 0.21305038, -0.17517845, -0.20916402, ...,  0.10735979,
              0.11960936,  0.04404173],
            [-0.06147815,  0.37924889,  0.01076729, ..., -0.18500584,
             -0.56033324,  0.23698753],
            [-0.24326246,  0.26454063,  0.0561789 , ...,  0.16844302,
              0.06365148,  0.15239917]],

           [[ 0.23347365,  0.1541392 , -0.00855265, ..., -0.05860752,
              0.19001199,  0.56704509],
            [-0.11437499, -0.03612033, -0.10430357, ..., -0.18382376,
             -0.1483255 ,  0.06531152],
            [ 0.23066193, -0.13072336, -0.52959026, ...,  0.21428244,
              0.36107113, -0.10046168]],

           [[ 0.12388184,  0.12765937, -0.38687866, ..., -0.20905222,
             -0.03053736,  0.08666982],
            [-0.04749863, -0.42231544,  0.14049365, ..., -0.38895363,
             -0.10796348,  0.50537994],
            [ 0.04526502, -0.37566283, -0.2172242 , ..., -0.28749647,
             -0.00621784,  0.12389351]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.714 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
