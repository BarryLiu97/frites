.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.14646168,  0.2745947 , -0.04932366, ..., -0.75336686,
             -0.92345928,  0.29092491],
            [ 0.10597682, -0.01453233, -0.18543497, ..., -0.09351926,
             -0.55327797,  0.0353255 ],
            [ 0.11424377,  0.04635767, -0.01932522, ..., -0.11137897,
             -0.31053266, -0.1815395 ]],

           [[ 0.24275672,  0.01618254, -0.02399954, ...,  0.53815492,
              0.77639638,  0.04820505],
            [ 0.06755351, -0.20872785, -0.20247076, ...,  0.00455082,
             -0.3342723 , -0.24925741],
            [-0.13354781, -0.29937459, -0.06495693, ..., -0.12726358,
             -0.03536965,  0.12410032]],

           [[ 0.61700745,  0.03142025, -0.20779012, ..., -0.27215413,
             -0.25794733,  0.04886649],
            [ 0.10188247, -0.38458261, -0.24973285, ...,  0.22846455,
              0.19463773, -0.08505262],
            [-0.49808699,  0.12282854,  0.31693335, ...,  0.00809013,
              0.10766102,  0.15290539]],
    ...
           [[ 0.029826  , -0.19546364, -0.65075525, ..., -0.48560279,
             -0.58531164, -0.29247983],
            [-0.06152591,  0.10140695, -0.04326386, ...,  0.27582736,
             -0.33313493, -0.37933203],
            [-0.0940033 , -0.20445108, -0.11403456, ...,  0.12145722,
              0.00274634,  0.03216826]],

           [[-0.48076544, -0.37399403,  0.5914448 , ...,  0.47621356,
              0.42627502, -0.93773394],
            [ 0.02511832, -0.24256341, -0.00386811, ...,  0.28750561,
              0.04628285, -0.26569159],
            [-0.08555539,  0.02347268,  0.12450883, ...,  0.03280182,
             -0.23857845,  0.08237401]],

           [[-0.43611369, -0.14297532,  0.55604612, ..., -0.00170012,
             -0.56982962, -0.41537174],
            [-0.36479813,  0.4954943 ,  0.1942808 , ...,  0.01549873,
              0.14722017, -0.1285442 ],
            [ 0.03693166,  0.24610364, -0.11024803, ..., -0.13520059,
             -0.12365433,  0.03627495]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 4689.87it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.448 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
