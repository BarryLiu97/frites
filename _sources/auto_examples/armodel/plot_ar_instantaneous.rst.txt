.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.15735838, -0.2245127 , -0.09440986, ..., -0.60332265,
              0.41531356,  0.77834722],
            [ 0.28041544, -0.00629353,  0.12330444, ..., -0.27090284,
              0.05197704,  0.11752233],
            [ 0.06665528,  0.34499139,  0.00636058, ..., -0.27653407,
             -0.17990484,  0.32349966]],

           [[-0.33013938, -0.13143474,  0.38169665, ...,  0.38138867,
              0.43097854, -0.02421558],
            [-0.38350885,  0.23433676,  0.00286813, ..., -0.10481427,
              0.16864297,  0.66267967],
            [ 0.22337014, -0.10102876,  0.17747672, ...,  0.23610645,
             -0.17066164,  0.00754125]],

           [[-0.19531029, -0.21445329, -0.0408487 , ..., -0.06768292,
              1.0646796 ,  0.84195261],
            [-0.19594055, -0.07684846, -0.17330756, ...,  0.29555808,
             -0.08533085, -0.10430082],
            [-0.25838488, -0.18024231, -0.09163838, ..., -0.5881947 ,
             -0.3486095 , -0.09422424]],
    ...
           [[ 0.27400458, -0.05264138, -0.11325036, ...,  0.00609581,
              0.69994808,  0.13534007],
            [-0.37457257, -0.14495764,  0.22229492, ..., -0.17037365,
             -0.07062013, -0.09909672],
            [ 0.01035676,  0.02103805, -0.58875557, ...,  0.426176  ,
             -0.64320598, -0.46266341]],

           [[ 0.08923736,  0.14406166, -0.08171666, ...,  0.11146441,
              0.02870197, -0.05924812],
            [-0.18558161, -0.01477987,  0.09622718, ...,  0.01861127,
             -0.45338838,  0.05820703],
            [ 0.04452162, -0.30847352, -0.10611991, ...,  0.36573857,
              0.25070847, -0.29120516]],

           [[-0.10444494, -0.18959029,  0.04093319, ...,  0.2945216 ,
              0.20338126, -0.52198632],
            [ 0.22343384, -0.0787974 , -0.36160792, ..., -0.21478014,
              0.128115  ,  0.092053  ],
            [ 0.0369142 ,  0.07542147, -0.42509172, ..., -0.21283967,
             -0.07889915,  0.00150434]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  8.479 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
