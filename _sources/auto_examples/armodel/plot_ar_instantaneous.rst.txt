.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.00827668, -0.21169769, -0.37401431, ..., -0.14101452,
              0.40265815,  0.3758144 ],
            [ 0.09272253, -0.33273056, -0.21534446, ..., -0.10610388,
             -0.08572514,  0.08254375],
            [ 0.24320644,  0.05929329, -0.09824658, ...,  0.50503983,
             -0.32267561, -0.5768399 ]],

           [[ 0.11137909, -0.24068281,  0.09256985, ...,  0.95425931,
              0.11955572, -0.54142769],
            [ 0.28036734,  0.2737058 , -0.36542103, ...,  0.28119652,
              0.31651559, -0.23869099],
            [-0.10461161, -0.41948092,  0.08612697, ..., -0.61892169,
             -0.32535143,  0.2697398 ]],

           [[-0.29743767, -0.26950943,  0.02290857, ...,  0.53871353,
             -0.16535762, -0.38013123],
            [-0.15913053, -0.46500466, -0.22466661, ...,  0.07374792,
             -0.33345194, -0.42297894],
            [-0.09630132,  0.11749118, -0.02624508, ..., -0.4083711 ,
              0.52936266,  0.59329352]],
    ...
           [[-0.18987523,  0.21800727,  0.04591385, ..., -0.71309058,
             -0.05561732,  0.603318  ],
            [-0.2470347 ,  0.07096776,  0.13887815, ..., -0.32757854,
             -0.46921643, -0.08684857],
            [-0.10744804,  0.39720203,  0.18411527, ...,  0.23064211,
             -0.26618689, -0.1450537 ]],

           [[ 0.03237605, -0.13019379, -0.00484778, ...,  0.0839152 ,
              0.0023926 ,  0.21135433],
            [-0.14701479, -0.20613466,  0.34227881, ..., -0.19835001,
             -0.34165957,  0.1328977 ],
            [-0.00292292,  0.14317961,  0.21389057, ...,  0.4315331 ,
              0.29509667,  0.33749866]],

           [[ 0.17153371,  0.01672341, -0.3096288 , ..., -0.4301408 ,
              0.14699349,  0.72489471],
            [-0.25090355,  0.12932641, -0.01598693, ...,  0.34311456,
              0.10704894, -0.27810191],
            [-0.18883492,  0.31489968,  0.09333841, ..., -0.0999517 ,
              0.09181308,  0.36108379]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 3068.25it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.791 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
