.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.00248098, -0.09951459, -0.22249627, ...,  0.20074787,
              0.25508331, -0.26715514],
            [ 0.05593805,  0.02566294, -0.27801532, ..., -0.38212321,
             -0.02704972,  0.52648014],
            [-0.03200086, -0.06505781,  0.22597806, ..., -0.04351348,
              0.02914819, -0.26409658]],

           [[-0.06219983,  0.23619402,  0.18353179, ..., -0.92999013,
             -0.28693011,  0.293727  ],
            [ 0.12755172,  0.23368016,  0.07949062, ...,  0.03151062,
              0.06334865,  0.51421722],
            [ 0.16956809, -0.04467509,  0.10492871, ..., -0.0323153 ,
              0.74471916,  0.40013533]],

           [[ 0.14371534,  0.34927191,  0.09515682, ..., -0.56265736,
             -0.597534  ,  0.16574902],
            [ 0.09227978, -0.07698194, -0.15841237, ..., -0.19463669,
             -0.12396242, -0.23692319],
            [ 0.00958425,  0.31276865, -0.27017235, ...,  0.1331322 ,
             -0.11091632,  0.09039202]],
    ...
           [[-0.18330191,  0.14639095,  0.14268886, ...,  0.16355675,
             -0.08284932,  0.10162197],
            [-0.05438729, -0.54147741, -0.03090558, ...,  0.31439691,
             -0.00390481, -0.05389996],
            [-0.12113345,  0.16755417,  0.06853772, ..., -0.2188824 ,
              0.12308319, -0.02961358]],

           [[ 0.03007373,  0.42259451,  0.24752746, ...,  0.37747383,
              0.45253994, -0.14203271],
            [ 0.32118867,  0.44432024, -0.05247174, ..., -0.03662061,
             -0.53357472, -0.18374663],
            [-0.17821279,  0.21171999,  0.230503  , ..., -0.17169996,
             -0.67414263, -0.32895574]],

           [[ 0.04730231, -0.4961871 , -0.53966475, ...,  0.02905477,
              0.14175047,  0.45310246],
            [-0.25497938, -0.01952581,  0.24670495, ...,  0.05225036,
              0.28230046, -0.15846489],
            [-0.32438922, -0.01551   ,  0.12533136, ...,  0.20119348,
              0.20943253,  0.04704322]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.958 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
