.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.19975629,  0.13446192,  0.06562367, ..., -0.3390865 ,
             -0.6798787 , -0.11315801],
            [ 0.16745065,  0.23958234,  0.10509728, ...,  0.47062183,
             -0.3434093 , -0.43038145],
            [ 0.10527183,  0.18541752, -0.08991033, ...,  0.02220785,
              0.13015074, -0.35627659]],

           [[-0.19276234,  0.27062047,  0.05167539, ...,  0.88962723,
              0.49268546, -0.37616646],
            [ 0.18615252, -0.31369707, -0.33990031, ..., -0.24409598,
             -0.01575106,  0.37907608],
            [-0.08533527,  0.28560875,  0.51697285, ...,  0.3607883 ,
              0.28400966, -0.14989002]],

           [[-0.41398592, -0.14110894,  0.30586144, ...,  0.11376914,
             -0.12658957,  0.02052563],
            [ 0.05738271,  0.1492501 , -0.38364547, ..., -0.10253758,
              0.09810572,  0.11078817],
            [ 0.06473572,  0.01758931, -0.01769746, ...,  0.25829712,
             -0.20079216, -0.08915889]],
    ...
           [[-0.28405887, -0.44348004, -0.47508406, ..., -0.5736487 ,
              0.09756938,  0.50829752],
            [ 0.05039606, -0.42526737, -0.45841002, ..., -0.04208286,
             -0.26056234, -0.11798254],
            [-0.21894372, -0.24135765,  0.00157746, ..., -0.52102691,
              0.03269006,  0.39881956]],

           [[ 0.50672545,  0.20458062, -0.33995261, ...,  0.29197311,
              0.16851381, -0.22032107],
            [ 0.03230407,  0.23890474,  0.26964787, ..., -0.29026958,
              0.00708198,  0.23534287],
            [-0.24303514,  0.52886474,  0.55095982, ..., -0.15117893,
              0.33601816,  0.44179607]],

           [[ 0.08846281, -0.49399785,  0.01088775, ...,  0.00495294,
             -0.23994697, -0.25382428],
            [-0.20378824, -0.21214844,  0.51738478, ...,  0.20042755,
             -0.16578629,  0.22486634],
            [ 0.1458993 ,  0.36184038,  0.4627813 , ...,  0.27999281,
             -0.26194734, -0.20880568]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 4294.51it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.851 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
