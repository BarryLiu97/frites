.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.16599215, -0.31009334, -0.07059826, ...,  1.12748597,
              0.70799008, -0.58119308],
            [ 0.00699429, -0.03288141,  0.22829863, ..., -0.20521595,
             -0.01050587,  0.204212  ],
            [-0.10774168, -0.29431145, -0.18859056, ...,  0.28879138,
              0.43023327, -0.12697084]],

           [[ 0.35983853, -0.30949324, -0.29031795, ...,  0.12336371,
              0.22197046, -0.13727633],
            [ 0.09128348, -0.16120215, -0.03714243, ..., -0.14325522,
             -0.36968821, -0.28105826],
            [-0.10810871, -0.14180813,  0.15736576, ..., -0.03749312,
              0.27110342,  0.16119651]],

           [[-0.17789376, -0.04178124,  0.17772587, ..., -0.58076551,
             -0.71853684,  0.12308789],
            [ 0.05679114,  0.22852173, -0.13129531, ..., -0.20793702,
              0.01758546,  0.39988901],
            [-0.1523036 , -0.01363003,  0.14126374, ...,  0.33585103,
             -0.27652491, -0.2482406 ]],
    ...
           [[ 0.16646976, -0.0210268 ,  0.00507162, ..., -0.12091873,
             -0.43921521, -0.22136879],
            [ 0.08298805,  0.11458264, -0.35030735, ..., -0.21392749,
              0.01414651,  0.13261221],
            [ 0.0875783 , -0.00975255, -0.05972614, ...,  0.15339619,
              0.17582347,  0.27740256]],

           [[-0.17978493,  0.40152791,  0.01886627, ..., -0.25069794,
             -0.14367398,  0.36071308],
            [-0.01085851,  0.50450852,  0.11967695, ..., -0.01855513,
             -0.17617728, -0.39847161],
            [-0.10092238, -0.36022796, -0.19426904, ..., -0.41054954,
             -0.03608266, -0.10787812]],

           [[-0.2489971 , -0.45175424, -0.03051953, ..., -0.53050694,
             -0.52040734, -0.24541907],
            [ 0.02583947,  0.22015557, -0.07459933, ..., -0.1692982 ,
             -0.23257426,  0.17329268],
            [ 0.10778211, -0.26372573, -0.34921812, ...,  0.19757221,
             -0.06945621, -0.03682534]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  8.958 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
