.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.11635788,  0.30624935,  0.41437228, ...,  0.27585024,
              0.71686962,  0.37746096],
            [ 0.21110996,  0.12304327,  0.23077138, ...,  0.51570498,
              0.38058286, -0.40604136],
            [ 0.03637146, -0.26748906,  0.08614352, ...,  0.25752654,
             -0.62189115, -0.30851873]],

           [[-0.13438381, -0.07199186, -0.5043963 , ...,  0.10797288,
             -0.07164877,  0.0791632 ],
            [ 0.11728326,  0.16497398,  0.01659797, ..., -0.14242677,
              0.08301418,  0.08847479],
            [-0.22603927, -0.07921992, -0.17271021, ...,  0.26961742,
             -0.1421982 ,  0.05214893]],

           [[-0.04020049, -0.33742534, -0.47930104, ...,  0.69654842,
              0.18072747, -0.62708303],
            [ 0.16929691, -0.17011168, -0.11795571, ..., -0.47487839,
             -0.34917169,  0.22515558],
            [ 0.14442139,  0.28294975, -0.00333831, ..., -0.37790419,
             -0.66754311, -0.02425094]],
    ...
           [[ 0.27952506,  0.03895449,  0.02378628, ..., -0.1944455 ,
             -0.12587818, -0.48972433],
            [ 0.22596679,  0.20542184,  0.41255492, ..., -0.14220669,
             -0.16657977, -0.00327645],
            [-0.13985651,  0.06250043, -0.04962045, ...,  0.00955019,
             -0.10627992, -0.01965206]],

           [[ 0.12128152,  0.41184348,  0.51821133, ..., -0.0734687 ,
             -0.17473166,  0.23720157],
            [-0.19193221,  0.10321786,  0.3448793 , ...,  0.07888287,
              0.36869679,  0.19963709],
            [ 0.1482259 , -0.49163887, -0.08564637, ...,  0.15743798,
             -0.01003329, -0.01750802]],

           [[ 0.23291036, -0.11994834, -0.30092816, ..., -0.13373011,
             -0.31411561, -0.20533818],
            [ 0.04144461, -0.0202695 ,  0.05986891, ...,  0.36603093,
              0.39696264,  0.19770476],
            [-0.19075017, -0.05124915,  0.20166128, ...,  0.28633644,
              0.23454532, -0.03213736]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 5678.21it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  11.217 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
