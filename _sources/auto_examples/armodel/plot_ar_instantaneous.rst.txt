.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-4.64575574e-01, -2.38215058e-01,  2.31012611e-01, ...,
              1.29845554e-01, -3.68711516e-04, -1.95404681e-01],
            [ 6.57236517e-02, -3.89827661e-01, -1.16507645e-01, ...,
             -2.26850010e-01, -1.30025938e-01,  1.05823612e-01],
            [ 1.96858454e-01, -2.56743245e-01, -2.50235812e-01, ...,
             -4.66397603e-02,  5.02888005e-01,  3.67790050e-01]],

           [[-8.25014761e-02, -3.54284676e-01,  3.69871555e-01, ...,
              8.75216336e-02, -1.95998934e-02, -3.92214696e-02],
            [-1.01012222e-01,  2.15036531e-01,  1.68134892e-01, ...,
              9.32764917e-02,  3.40045920e-02, -1.71302872e-02],
            [-3.50814172e-01,  6.93778314e-02, -9.08152088e-02, ...,
             -1.24216180e-01, -2.46802250e-01, -1.09932646e-01]],

           [[-4.14228483e-02, -6.61953419e-02,  2.41342824e-01, ...,
              2.22624465e-01,  6.66130988e-02, -2.29096594e-01],
            [-4.94558607e-02,  2.27728698e-01,  8.55526087e-02, ...,
             -6.10845224e-02,  1.96462215e-01,  2.59955360e-01],
            [ 3.51115272e-01, -3.20053404e-02, -4.31998365e-01, ...,
              2.03057406e-01,  2.77084711e-01,  3.05940425e-01]],
    ...
           [[ 9.32189100e-02, -1.25471509e-01, -9.43730149e-02, ...,
             -2.46946963e-01, -5.88640667e-02,  1.99066261e-01],
            [ 2.63078880e-01, -1.56074306e-01,  8.91549294e-02, ...,
             -1.28173881e-02, -3.37161822e-01, -2.55966884e-01],
            [ 9.88507755e-02,  1.70430793e-01,  9.88862963e-02, ...,
              7.59754382e-02, -4.86942032e-02, -3.47231037e-01]],

           [[ 4.24524449e-03,  3.19696919e-02, -1.06072011e-01, ...,
             -7.07442324e-02, -6.44943358e-01, -4.19554865e-01],
            [ 3.74942325e-01,  1.42796982e-01, -8.62327891e-02, ...,
             -1.75950365e-01,  2.69092114e-01,  1.89481378e-01],
            [ 1.71862357e-01,  2.90426979e-01, -5.79326307e-01, ...,
              9.48480219e-02, -4.24703769e-01, -5.23445198e-02]],

           [[-2.41102522e-01, -5.71348250e-02,  1.87495826e-02, ...,
             -1.18003295e-01, -3.01439065e-01, -1.11402837e-01],
            [-2.11290733e-01,  1.73734990e-01, -5.00243196e-02, ...,
              2.39426942e-02,  8.70448169e-02,  4.20298014e-02],
            [ 1.47381187e-02, -5.29108274e-01, -5.15828890e-01, ...,
             -2.04143206e-02,  1.18271861e-01,  2.15482397e-01]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 4888.47it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.827 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
