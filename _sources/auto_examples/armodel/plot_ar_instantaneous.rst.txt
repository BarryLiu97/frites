.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.3695666 , -0.11534963, -0.54056423, ...,  0.71459818,
              0.07406717, -0.50944093],
            [ 0.18044661, -0.4302313 , -0.13610614, ...,  0.34945798,
              0.4243203 , -0.10096993],
            [ 0.07713494, -0.20376387, -0.11080905, ...,  0.24929281,
              0.59898956,  0.36028715]],

           [[-0.46172596,  0.80063041,  0.90126912, ...,  0.29623483,
              0.29002127,  0.18166998],
            [-0.08780472, -0.01672953,  0.10123418, ...,  0.25336281,
              0.05791249, -0.27576387],
            [ 0.03623703, -0.11855881, -0.1571536 , ...,  0.15328635,
              0.320443  ,  0.6785217 ]],

           [[-0.05680329, -0.34494234, -0.24548898, ..., -0.27349002,
             -0.18735349,  0.10292256],
            [-0.05208202, -0.15546974, -0.05051196, ...,  0.38846286,
              0.37972508, -0.40576075],
            [ 0.26767371, -0.27252191, -0.89103961, ..., -0.0613707 ,
              0.21340958,  0.13221304]],
    ...
           [[-0.02035925, -0.3339979 , -0.2503303 , ..., -0.62856908,
             -0.01899481,  0.89196019],
            [ 0.11288905,  0.35166153, -0.0914432 , ..., -0.29943618,
              0.31495082,  0.17027481],
            [-0.05409274,  0.06137337, -0.19625707, ..., -0.61967282,
             -0.32384307,  0.48670177]],

           [[-0.05834573,  0.01434551,  0.52226302, ..., -0.35914344,
             -0.30187876,  0.48823315],
            [-0.01209722, -0.13575076,  0.25327358, ...,  0.01605903,
              0.11130012,  0.11609448],
            [ 0.2599713 ,  0.28435861,  0.13120259, ..., -0.16973293,
             -0.2556486 ,  0.0493229 ]],

           [[ 0.09687816, -0.30998894, -0.47805563, ...,  0.01064368,
             -0.05326445, -0.12335266],
            [ 0.14485541,  0.02148876, -0.32457973, ...,  0.32674057,
             -0.0079901 ,  0.11680011],
            [ 0.15328896, -0.06303036,  0.09691749, ...,  0.35380309,
             -0.13884425, -0.33341295]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 4854.52it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.901 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
