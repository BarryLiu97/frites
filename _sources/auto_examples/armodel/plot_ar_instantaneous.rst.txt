.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.25644839, -0.0875875 , -0.0704523 , ...,  0.18563002,
              0.12020622, -0.07747846],
            [-0.28379578, -0.01981209,  0.1009365 , ...,  0.07913643,
             -0.28273147, -0.3423567 ],
            [ 0.23428974,  0.20418787,  0.27558551, ..., -0.41505273,
              0.1131603 ,  0.44398309]],

           [[ 0.01058087, -0.02840042,  0.02226707, ...,  0.50210204,
              0.18548242, -0.31749435],
            [-0.49664272, -0.3766253 ,  0.10334311, ..., -0.10482174,
              0.24348576,  0.31135464],
            [-0.24218425,  0.18278994,  0.00131867, ...,  0.30230945,
              0.19522567, -0.32233976]],

           [[-0.01569191, -0.10283496,  0.14046286, ..., -0.1124007 ,
              0.59492788,  0.42107131],
            [-0.26291131, -0.02519077,  0.4096468 , ..., -0.36628266,
             -0.20116167,  0.07085941],
            [ 0.36142518,  0.39353414, -0.20394211, ..., -0.75047662,
              0.18789702,  0.65322592]],
    ...
           [[-0.17427504,  0.22764018,  0.09038333, ...,  0.19619813,
             -0.50470359, -0.26386768],
            [-0.28690518,  0.06849455,  0.1843145 , ...,  0.33108024,
              0.23932363,  0.10795132],
            [-0.16100521,  0.10423817,  0.51109125, ..., -0.04984532,
             -0.37248863, -0.1463227 ]],

           [[-0.5352751 ,  0.0813709 ,  0.40390236, ...,  0.01738646,
             -0.06223635, -0.13740684],
            [ 0.2775909 , -0.11782867, -0.19182618, ..., -0.07736882,
              0.29889405, -0.08859803],
            [ 0.06385875, -0.04245675,  0.0329859 , ..., -0.16407941,
             -0.38059858, -0.2395627 ]],

           [[-0.09876014,  0.08333147,  0.17476836, ..., -0.57117778,
             -0.30329284,  0.40986727],
            [ 0.14848423,  0.44564262, -0.16343072, ..., -0.1490996 ,
              0.09008439, -0.04121645],
            [ 0.15759194, -0.17309685, -0.12750407, ...,  0.0155485 ,
              0.19334934,  0.76629021]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 4526.23it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.798 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
