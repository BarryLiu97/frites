.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.12160579,  0.30813647,  0.4360015 , ...,  0.34930639,
              0.19098526, -0.06708848],
            [ 0.2512552 ,  0.22345084,  0.49732925, ...,  0.49075263,
              0.39798925, -0.01577271],
            [ 0.12789888, -0.16650478, -0.31136172, ...,  0.3711661 ,
             -0.16224747, -0.32710158]],

           [[-0.11101185, -0.41652462, -0.20534283, ..., -0.04581618,
             -0.1976668 , -0.08769367],
            [-0.03503983,  0.00469184,  0.46661125, ...,  0.1134864 ,
              0.06646446,  0.25385853],
            [-0.30238686,  0.12676352,  0.15513256, ..., -0.05555216,
              0.01559806, -0.37695597]],

           [[-0.07157983, -0.16479643,  0.24324095, ...,  0.36211353,
              0.05584434,  0.20822905],
            [-0.391052  , -0.0862143 ,  0.36968334, ...,  0.22108461,
              0.19984273,  0.07340281],
            [-0.04753714, -0.05106139, -0.30978238, ..., -0.39312098,
             -0.25988781,  0.24196226]],
    ...
           [[ 0.28897064,  0.09675071, -0.38393897, ..., -0.3524128 ,
             -0.20341436,  0.00267075],
            [ 0.26245296, -0.23470658, -0.29001966, ...,  0.02336979,
              0.06532374, -0.16605869],
            [-0.00667984, -0.21246889,  0.18067858, ...,  0.10504193,
              0.3888085 ,  0.12989985]],

           [[-0.02289346, -0.30913943,  0.2077765 , ...,  0.04965831,
              0.06296688, -0.04646287],
            [-0.05551602, -0.29834138,  0.10703675, ...,  0.15990149,
              0.18993248,  0.25699065],
            [-0.08094347,  0.04497114, -0.02605789, ..., -0.08189566,
             -0.48237962, -0.14775647]],

           [[-0.17628158,  0.07364122,  0.42103093, ...,  0.32009507,
             -0.14818365, -0.37817999],
            [-0.28413836,  0.10955428,  0.31824032, ..., -0.0252764 ,
             -0.17671801, -0.28914814],
            [-0.24230227, -0.13272402, -0.02178986, ...,  0.20889064,
             -0.16834404, -0.15258112]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 4479.50it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  11.689 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
