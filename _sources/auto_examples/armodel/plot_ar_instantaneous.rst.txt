.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.33663084, -0.01865982, -0.06184409, ...,  0.43304515,
             -0.09209741, -0.19977291],
            [ 0.00091376, -0.22205956, -0.29423424, ...,  0.10502306,
              0.16627121, -0.18469038],
            [ 0.01974519,  0.34059848,  0.02713745, ...,  0.20447402,
              0.07180635, -0.12638935]],

           [[ 0.36154503, -0.1159351 , -0.38968851, ...,  0.22441409,
              0.18650795, -0.00508405],
            [ 0.2957115 , -0.00860187, -0.28429709, ...,  0.22291056,
              0.16539516,  0.06055369],
            [ 0.22875551, -0.30143176, -0.03198243, ..., -0.17922403,
             -0.43844949, -0.27376835]],

           [[ 0.01491474, -0.16251622,  0.01255961, ...,  0.42855723,
             -0.33030407, -0.46672498],
            [-0.26888257,  0.14247592,  0.0650711 , ...,  0.52259107,
             -0.48908761, -0.09849287],
            [-0.18545812,  0.1923179 ,  0.09217729, ..., -0.06009125,
             -0.27950523,  0.07721947]],
    ...
           [[-0.07875089, -0.18153167, -0.0994491 , ...,  0.66100506,
              0.52959386, -0.41132098],
            [ 0.18082996, -0.22368944, -0.35787006, ..., -0.18547907,
             -0.01444118, -0.01367497],
            [ 0.22111114,  0.46010588,  0.09723792, ...,  0.17189256,
             -0.20308951, -0.41775819]],

           [[ 0.00899548, -0.06958925, -0.46228082, ...,  0.04822812,
             -0.10246749,  0.29320445],
            [ 0.05177723,  0.43591406,  0.42730984, ..., -0.27883077,
              0.31279043,  0.19890729],
            [ 0.18867197,  0.0382029 , -0.03339713, ..., -0.31765221,
              0.03458742,  0.23752471]],

           [[-0.16445503,  0.12020425,  0.49417454, ..., -0.12843751,
             -0.38973627, -0.06641876],
            [ 0.09827272,  0.06572369,  0.13454829, ..., -0.07290735,
              0.13706889, -0.03882722],
            [ 0.31722958, -0.20525713, -0.63736586, ..., -0.18196468,
              0.01869693,  0.34103482]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.240 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
