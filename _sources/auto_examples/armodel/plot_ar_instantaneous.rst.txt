.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.08788424,  0.058412  ,  0.10730926, ..., -0.58568955,
              0.20715395,  0.50269281],
            [ 0.05578947, -0.04992116, -0.14302634, ..., -0.06093284,
              0.22191511,  0.07592189],
            [-0.01114405, -0.11589039, -0.20246157, ..., -0.41943043,
             -0.48170825, -0.25492338]],

           [[ 0.22604869, -0.00225319, -0.35789138, ...,  0.34326838,
             -0.29711748, -0.60633844],
            [-0.13215231, -0.28676899, -0.14494229, ...,  0.38244904,
              0.654075  ,  0.07017145],
            [ 0.28659361, -0.06594108, -0.27293095, ..., -0.34604058,
             -0.13832948,  0.13527268]],

           [[-0.07227606,  0.24554246,  0.05036118, ...,  0.28576586,
              0.66147215,  0.00333342],
            [-0.0390382 , -0.17730108,  0.24735817, ..., -0.03363211,
             -0.10730133,  0.29183003],
            [ 0.38728138, -0.06272012, -0.14445196, ..., -0.3839017 ,
             -0.17125346, -0.29969414]],
    ...
           [[ 0.06166821,  0.22903391,  0.01599766, ...,  0.015733  ,
             -0.07155116,  0.03328595],
            [ 0.31089029, -0.19850423,  0.10182179, ..., -0.13607301,
             -0.13088699, -0.00251788],
            [-0.44138089, -0.0453636 , -0.15063478, ...,  0.33188593,
              0.28279259,  0.06750447]],

           [[ 0.03954471,  0.42872111,  0.1662327 , ..., -0.15196541,
             -0.24662271, -0.28636463],
            [ 0.35728274,  0.25902668, -0.06111785, ..., -0.41783555,
              0.0327395 ,  0.46253346],
            [-0.40887458,  0.10591272,  0.29973885, ...,  0.34282446,
              0.13946624, -0.13982753]],

           [[-0.05100589,  0.24215966,  0.32171455, ..., -0.60315914,
             -0.00560871,  0.62322109],
            [ 0.14754176,  0.21863825, -0.1678787 , ...,  0.08696923,
              0.11490657,  0.2268002 ],
            [-0.07984415, -0.22112474,  0.02167023, ...,  0.25373429,
              0.16063973, -0.19885487]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 4882.78it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.292 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
