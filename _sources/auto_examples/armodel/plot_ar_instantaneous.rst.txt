.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.04982957,  0.36145759,  0.51715361, ...,  0.21548738,
              0.20842369,  0.04719014],
            [ 0.08274144, -0.05347275, -0.04816701, ...,  0.08849664,
              0.04636568,  0.20334948],
            [-0.073781  ,  0.25866431,  0.34882184, ..., -0.01610738,
             -0.7096198 , -0.47097185]],

           [[ 0.73221636,  0.15718751, -0.4217933 , ..., -0.07203889,
              0.60613123,  0.58779746],
            [ 0.09364699,  0.16477178,  0.18160644, ..., -0.4498407 ,
             -0.01158248,  0.51049824],
            [-0.10248124, -0.04010857,  0.3660265 , ...,  0.40099269,
              0.15935424, -0.07142167]],

           [[-0.17198342,  0.18531585, -0.31975713, ...,  0.36037729,
              0.56120115,  0.32802731],
            [-0.11663152, -0.42355906,  0.02953368, ..., -0.34732451,
              0.49620024,  0.33310881],
            [ 0.08307377,  0.12266452,  0.01444748, ...,  0.17837247,
              0.30981669,  0.20099388]],
    ...
           [[-0.06381584,  0.20964879,  0.3449327 , ...,  0.46266529,
              0.8613825 , -0.15061593],
            [-0.13275375, -0.11217423, -0.04072686, ..., -0.03927759,
             -0.12285207,  0.03843349],
            [-0.04547064,  0.20687951, -0.06513146, ..., -0.53624626,
             -0.14949905,  0.2162931 ]],

           [[ 0.11167507, -0.29434404, -0.0642554 , ..., -0.383174  ,
             -0.37197004,  0.44450769],
            [ 0.22944267, -0.09974548, -0.36806329, ..., -0.14293996,
             -0.08702123,  0.25849696],
            [ 0.23581794,  0.02613652, -0.27643561, ...,  0.12557394,
              0.33443749,  0.14710221]],

           [[ 0.04454188,  0.01341733,  0.28238577, ...,  0.40344741,
              0.57919205,  0.15434095],
            [-0.28131677, -0.10693538, -0.08575663, ...,  0.08212315,
              0.0634713 , -0.35793191],
            [ 0.04461717,  0.42907709, -0.12658944, ...,  0.17724419,
             -0.07612507, -0.2547186 ]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.149 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
