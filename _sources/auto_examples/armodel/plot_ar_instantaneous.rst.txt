.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.14424294, -0.02861257,  0.15072075, ...,  0.03772401,
             -0.48675102, -0.14512418],
            [ 0.0393048 , -0.2491718 ,  0.02870412, ...,  0.01963976,
             -0.03654455, -0.73445384],
            [-0.09954234,  0.02301529, -0.07044272, ..., -0.01067842,
              0.06077013, -0.44368534]],

           [[ 0.09505783,  0.48625458,  0.35137367, ...,  0.26682043,
              0.28155773, -0.05716724],
            [ 0.4184443 , -0.03328676, -0.32713752, ..., -0.10056458,
              0.03552957,  0.50822288],
            [-0.34360514,  0.43249411,  0.1163554 , ..., -0.37672526,
              0.08440244,  0.16043615]],

           [[-0.07965701, -0.41056425, -0.26215233, ..., -0.08024495,
              0.87479195,  0.64507273],
            [-0.04851562, -0.13728218, -0.34200366, ...,  0.42774799,
              0.48065106,  0.14065942],
            [ 0.41505403, -0.17914782, -0.19575176, ..., -0.35066403,
             -0.22348552,  0.35015757]],
    ...
           [[ 0.04739039,  0.24276996,  0.11981065, ...,  0.25632687,
             -0.65053563, -0.63688724],
            [-0.18391257, -0.17499173, -0.45048234, ...,  0.01970114,
             -0.48983959, -0.07448821],
            [ 0.17310814,  0.18836144,  0.31928835, ...,  0.38908504,
              0.16799066, -0.13916398]],

           [[-0.00179081,  0.02120667, -0.66315169, ..., -0.48879945,
              0.38253277,  0.89539422],
            [ 0.01219745, -0.03065449,  0.37442934, ...,  0.00200067,
             -0.29827825, -0.15017757],
            [ 0.30523313,  0.24203657, -0.39238306, ...,  0.18249463,
              0.7102662 ,  0.05765484]],

           [[ 0.06133554,  0.3269063 , -0.04013652, ..., -0.48879622,
             -0.36995359,  0.34022081],
            [-0.08743192, -0.14197219, -0.03722998, ...,  0.11314037,
             -0.08114656,  0.15156234],
            [ 0.10209481, -0.52536101, -0.33174619, ...,  0.10196707,
              0.05904169,  0.07163093]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  11.187 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
