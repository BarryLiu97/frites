.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.19892383, -0.140491  , -0.27115591, ...,  0.20518429,
             -0.02096698,  0.07850653],
            [-0.13908383,  0.05885699,  0.03405476, ...,  0.23346769,
              0.3390003 , -0.0392585 ],
            [ 0.22699191, -0.12980888, -0.04897084, ..., -0.31648467,
              0.0617193 ,  0.34840215]],

           [[-0.28424377,  0.11687171,  0.06202619, ..., -0.76386824,
             -0.25585929,  0.74170048],
            [-0.1294612 , -0.08602987, -0.05004351, ..., -0.03556801,
              0.0905535 ,  0.32015722],
            [ 0.08686538,  0.08878618, -0.02313184, ...,  0.04906454,
              0.29875492,  0.04991953]],

           [[ 0.10661006,  0.02234406, -0.12189793, ...,  0.36690899,
             -0.24375192, -0.42355855],
            [-0.1227346 , -0.31171359, -0.12251617, ..., -0.11694207,
             -0.14934347, -0.29802219],
            [ 0.49953522,  0.04058694,  0.46777931, ..., -0.32317514,
             -0.30031447,  0.03429385]],
    ...
           [[ 0.13098055,  0.05338858, -0.05269218, ...,  0.23111614,
              0.34863257, -0.26577641],
            [ 0.06885602, -0.0501607 , -0.17211651, ..., -0.1412205 ,
             -0.00358129, -0.18802646],
            [-0.26154751,  0.14894002,  0.49172341, ..., -0.14151962,
             -0.04604829,  0.08874726]],

           [[-0.09749583,  0.16380094,  0.22860329, ...,  0.17520317,
              0.02879172, -0.25014063],
            [-0.17399295,  0.45160895,  0.21714884, ...,  0.27071012,
             -0.02151044, -0.28527546],
            [-0.1747903 , -0.12496721,  0.15754403, ..., -0.02101716,
              0.19419847,  0.05258023]],

           [[-0.27822171,  0.04106435,  0.06211519, ..., -0.23164326,
              0.60909423,  0.70520678],
            [ 0.09612601, -0.1527693 , -0.06531275, ...,  0.06840474,
              0.13715081,  0.26378128],
            [ 0.03601556,  0.04544498,  0.52364303, ..., -0.22033671,
             -0.20742072,  0.2110451 ]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/miniconda3/envs/testenv/lib/python3.6/site-packages/networkx/drawing/layout.py:950: FutureWarning: arrays to stack must be passed as a "sequence" type such as list or tuple. Support for non-sequence iterables such as generators is deprecated as of NumPy 1.16 and will raise an error in the future.
      pos = np.row_stack((pos[x] for x in node_list))



plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.558 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
