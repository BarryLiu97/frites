.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.3870325 , -0.17548877, -0.31111746, ..., -0.07876777,
             -0.13809352,  0.31873724],
            [-0.369188  ,  0.06680233,  0.39493273, ...,  1.09124922,
             -0.32565446, -0.44178396],
            [ 0.447945  ,  0.29222289,  0.00276824, ...,  0.20588866,
             -0.21610666,  0.1022408 ]],

           [[ 0.19132064,  0.09009737, -0.13455479, ...,  0.28497177,
              0.16956999,  0.0841438 ],
            [ 0.14593554,  0.01979172,  0.20547461, ...,  0.07499814,
              0.37104946, -0.07889262],
            [ 0.07784413,  0.20520769,  0.08341981, ..., -0.22619688,
             -0.03675046, -0.34530948]],

           [[ 0.00525856,  0.05773147,  0.04875686, ...,  0.524143  ,
              0.72730528, -0.11202337],
            [ 0.11552843,  0.00327205,  0.32030203, ...,  0.09270393,
             -0.02896797, -0.12101817],
            [ 0.23657441, -0.06882508,  0.04311971, ..., -0.5051087 ,
             -0.02402917,  0.25068692]],
    ...
           [[ 0.07076353,  0.02165173,  0.00984246, ..., -0.11279553,
             -0.52969841, -0.41360288],
            [ 0.40302308,  0.15001544, -0.13489984, ...,  0.25943979,
              0.10806777, -0.15333209],
            [ 0.18456612, -0.25776777,  0.00267474, ..., -0.06072669,
              0.02920004, -0.07851265]],

           [[ 0.11076614,  0.43918451, -0.18335425, ...,  0.4973511 ,
              0.3143826 , -0.43491029],
            [-0.15121545, -0.18962751,  0.19552654, ...,  0.05521797,
              0.14015729, -0.39959674],
            [-0.3251855 , -0.20778247, -0.36129629, ..., -0.12825599,
             -0.20601012, -0.01121741]],

           [[-0.12699719,  0.36265599,  0.11766537, ..., -0.17462227,
             -0.864764  , -0.45396573],
            [ 0.17190753,  0.15103767,  0.31188522, ..., -0.1111507 ,
             -0.17157092,  0.02929968],
            [ 0.18190137,  0.27779699,  0.11902707, ..., -0.05681531,
             -0.07107083, -0.14590894]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 4163.77it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.840 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
