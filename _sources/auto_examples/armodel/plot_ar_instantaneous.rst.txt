.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.19554742,  0.12190164,  0.01617487, ...,  0.0322277 ,
              0.0212886 , -0.07214236],
            [-0.40840078, -0.15256013,  0.23311132, ...,  0.34355917,
              0.17025357,  0.0956305 ],
            [-0.0342594 , -0.01072561, -0.01232724, ...,  0.17876173,
             -0.10811387, -0.20703824]],

           [[ 0.06367059,  0.25293   , -0.02495321, ..., -0.11932051,
             -0.36629971, -0.27670696],
            [ 0.10891416,  0.07837184,  0.3605947 , ..., -0.29417636,
             -0.35174978, -0.02425618],
            [ 0.54546626,  0.17091892,  0.06094223, ..., -0.13627817,
              0.04137154,  0.33997109]],

           [[-0.14123031, -0.02466827,  0.52377885, ..., -1.09702155,
             -0.28449839,  0.54407517],
            [-0.04877841, -0.0172811 , -0.07229355, ...,  0.19175101,
              0.31533586, -0.14492711],
            [-0.11696808, -0.3328499 ,  0.10261994, ..., -0.38645662,
              0.09045694,  0.01612461]],
    ...
           [[-0.3306183 , -0.04109602, -0.08090348, ...,  0.65801158,
              0.19467908, -0.29378892],
            [-0.54227828,  0.41059147,  0.09926545, ...,  0.21745693,
             -0.12519774,  0.00338938],
            [-0.06235259, -0.00723256,  0.12141386, ...,  0.07952792,
              0.11299096,  0.4527835 ]],

           [[ 0.12023047, -0.24474054, -0.33387198, ..., -0.11981982,
              0.46172432,  0.52083026],
            [ 0.02121677,  0.563837  ,  0.18917077, ..., -0.41254018,
             -0.18159654,  0.24645826],
            [ 0.26841243, -0.01466699,  0.11531523, ...,  0.2763004 ,
              0.1987476 ,  0.2019603 ]],

           [[-0.11697423,  0.17664372,  0.29966315, ...,  0.0377125 ,
              0.25442805,  0.13091066],
            [ 0.39378711, -0.21378986, -0.34582666, ...,  0.02947413,
             -0.31588346, -0.17410018],
            [-0.14673166,  0.08341224, -0.2978819 , ..., -0.42046343,
              0.23208975,  0.32916634]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  14.289 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
