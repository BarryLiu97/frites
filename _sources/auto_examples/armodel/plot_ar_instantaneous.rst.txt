.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.06091317, -0.13775328, -0.34694402, ..., -0.09923289,
              0.39741835,  0.27490748],
            [ 0.02385267, -0.05481142,  0.05001926, ..., -0.13807879,
              0.00354145,  0.2544562 ],
            [ 0.31225261,  0.1843148 ,  0.17126162, ...,  0.05591645,
             -0.54078451, -0.3180834 ]],

           [[ 0.21168076, -0.01266023,  0.07302113, ...,  0.18104664,
             -0.24303277, -0.06240573],
            [-0.03201953,  0.11179656, -0.45126103, ..., -0.79916256,
             -0.00637711,  0.46578078],
            [-0.05188149, -0.32120261, -0.35914649, ..., -0.23090977,
              0.51303847,  0.3029684 ]],

           [[ 0.13420357,  0.05066089, -0.29343027, ...,  0.01136564,
             -0.18743817, -0.16289464],
            [ 0.14535532,  0.05734417,  0.04603431, ..., -0.38980462,
             -0.04472818,  0.15912264],
            [ 0.02949578,  0.10189249,  0.35262853, ..., -0.45502775,
             -0.33631597, -0.20374016]],
    ...
           [[-0.37573584,  0.06241385,  0.31247618, ...,  0.57097   ,
              0.00465808, -0.72915159],
            [-0.43281114,  0.33839072,  0.33375261, ...,  0.13433   ,
              0.05643177,  0.32109103],
            [-0.52578538,  0.44380047,  0.4363296 , ..., -0.18794827,
              0.13596516,  0.07331479]],

           [[-0.11901975, -0.24317448, -0.02034595, ..., -0.66429258,
             -0.88539662,  0.46155034],
            [-0.081415  ,  0.45861531,  0.47751889, ..., -0.21273789,
              0.07500445,  0.28821988],
            [-0.25788312,  0.30459422,  0.19562062, ..., -0.0397803 ,
              0.23828713,  0.21596884]],

           [[ 0.22434298,  0.04548437, -0.4708358 , ..., -0.3394763 ,
              0.12027337,  0.33724033],
            [-0.3355899 , -0.23820939,  0.13844888, ..., -0.38693492,
              0.25077699,  0.27996299],
            [ 0.39483352, -0.30642235, -0.79748995, ...,  0.39874543,
             -0.14705572, -0.25616319]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  8.816 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
