.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.01271852, -0.32538085, -0.12015094, ..., -0.21565683,
              0.38515908,  0.29523292],
            [ 0.23814264,  0.47602311,  0.21201298, ...,  0.13214908,
              0.287594  ,  0.01729999],
            [-0.12445394, -0.16684127,  0.08520932, ...,  0.22660794,
             -0.319841  , -0.22641698]],

           [[-0.03507856, -0.03672533,  0.4218805 , ..., -0.87091982,
              0.0555741 ,  0.46671931],
            [-0.07290866, -0.1793592 , -0.2976924 , ...,  0.15583653,
              0.16750665, -0.01035071],
            [ 0.19878984, -0.39230909, -0.23075946, ...,  0.36090945,
              0.10232204, -0.08002387]],

           [[ 0.19727476,  0.06847862,  0.03986648, ..., -0.48575064,
              0.02430663,  0.23570331],
            [-0.32659852,  0.01401797, -0.00714822, ..., -0.50395599,
              0.12738312, -0.14505477],
            [ 0.1916009 ,  0.33237806,  0.19074569, ..., -0.13011841,
             -0.06205774, -0.11037572]],
    ...
           [[ 0.374547  ,  0.08573717, -0.10815152, ..., -0.14510183,
             -0.16384494,  0.03062068],
            [ 0.06130471, -0.52251096,  0.0299619 , ..., -0.11686389,
             -0.24999931, -0.10238233],
            [ 0.17040296, -0.23539994, -0.06455301, ..., -0.45993953,
              0.31150943,  0.41289657]],

           [[-0.25553789, -0.19791092,  0.2243767 , ...,  0.56005631,
              0.40084638, -0.437057  ],
            [ 0.197647  , -0.04645444, -0.33564595, ..., -0.02552557,
              0.00533202,  0.27307443],
            [-0.21190247, -0.23055189,  0.19010354, ..., -0.34799689,
             -0.25022572, -0.0611037 ]],

           [[ 0.27913111, -0.23902776, -0.56191279, ...,  0.19260338,
              0.76046134,  0.11150632],
            [ 0.13498836, -0.28630811, -0.15818704, ...,  0.31927315,
             -0.18975474,  0.00442153],
            [-0.12355334, -0.07686371, -0.10953728, ...,  0.06447031,
              0.15385761,  0.10994328]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 5771.98it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.880 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
