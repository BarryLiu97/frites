.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.04890318, -0.33670617,  0.48531402, ...,  0.12424671,
             -0.69196601, -0.59624369],
            [ 0.24807601,  0.13253512,  0.10623671, ..., -0.20204109,
             -0.56322769,  0.13289836],
            [-0.06140236,  0.05370514,  0.15873437, ...,  0.29947833,
              0.35027117, -0.19952334]],

           [[-0.15280664,  0.14542887,  0.11599402, ..., -0.6457142 ,
              0.15909709,  0.81171105],
            [-0.22809686,  0.23137121, -0.01425755, ..., -0.1868287 ,
             -0.05904947,  0.35120745],
            [-0.04728615, -0.26405858,  0.05375473, ...,  0.22898858,
              0.31302714, -0.17894952]],

           [[-0.2879552 , -0.12752638, -0.19781021, ..., -0.44484863,
              0.60158363,  0.34504742],
            [-0.26835677,  0.06156072,  0.47567726, ...,  0.33033634,
             -0.24628018,  0.26174564],
            [ 0.04144808, -0.35320099, -0.3865214 , ..., -0.49932145,
             -0.12527697,  0.28564596]],
    ...
           [[ 0.25433501, -0.01315821, -0.45415087, ..., -0.15295026,
             -0.52697046, -0.56229699],
            [-0.04665979,  0.11844933,  0.1475523 , ..., -0.19573506,
              0.16660902,  0.50965779],
            [ 0.43020929, -0.0677545 , -0.526476  , ..., -0.08814418,
              0.20082006, -0.17559277]],

           [[ 0.40261705,  0.01260474, -0.28626374, ...,  0.21282983,
             -0.19650229, -0.32104047],
            [-0.2246503 ,  0.10838744,  0.34317631, ...,  0.15835895,
             -0.25619885,  0.30210136],
            [ 0.32264915, -0.39293263, -0.3620591 , ..., -0.14139982,
             -0.37549422,  0.28196294]],

           [[ 0.0142259 , -0.06658565, -0.17196788, ..., -0.09121764,
             -0.09032224,  0.23558445],
            [-0.15385209,  0.04102904,  0.18919849, ...,  0.28135067,
              0.47668092,  0.10345232],
            [-0.12067673, -0.17013611,  0.12279874, ...,  0.00824009,
              0.2237089 ,  0.20082675]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 3474.02it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  11.141 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
