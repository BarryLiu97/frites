.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.23217872,  0.03649542,  0.17326192, ..., -0.00940666,
              0.58779645,  0.59049779],
            [ 0.39425253, -0.24209591, -0.43989006, ...,  0.0278994 ,
             -0.03541935, -0.31577965],
            [ 0.05254943, -0.16146303, -0.39712316, ...,  0.05572995,
              0.28230415, -0.29319267]],

           [[-0.12754531,  0.00308027,  0.3774107 , ...,  0.72920997,
             -0.09794653, -0.33152563],
            [ 0.33714281,  0.251434  , -0.31484074, ...,  0.28741008,
             -0.06907903, -0.23337017],
            [-0.03017273, -0.45712405,  0.00082147, ..., -0.41049939,
             -0.38482697, -0.04515612]],

           [[ 0.18791091,  0.0650488 ,  0.09226797, ...,  0.17146611,
              0.33978647,  0.00364619],
            [-0.11309193,  0.51802255,  0.05530867, ...,  0.04337889,
             -0.29546229, -0.15566166],
            [-0.08050094, -0.04281934, -0.08270545, ..., -0.19276964,
              0.50163157,  0.06223388]],
    ...
           [[-0.23951951, -0.12241274, -0.0693909 , ..., -0.5042313 ,
              0.14384884,  0.46978685],
            [-0.38758238,  0.23056058,  0.49415749, ..., -0.20192512,
             -0.33618076, -0.12257816],
            [-0.13147933,  0.4462249 ,  0.23918385, ...,  0.05588527,
              0.14406393, -0.05071429]],

           [[ 0.04689962, -0.07148495, -0.23908095, ..., -0.03620071,
              0.70153383,  0.23741219],
            [-0.07589759,  0.04669133,  0.6429125 , ..., -0.27595636,
              0.4127815 ,  0.22876221],
            [-0.49749673,  0.30608107,  0.68730989, ...,  0.34248725,
              0.17981142, -0.19130671]],

           [[ 0.0244795 ,  0.13040076, -0.2362012 , ...,  0.17669816,
             -0.23287291,  0.31621101],
            [ 0.02084822,  0.28244496,  0.1309313 , ..., -0.60461665,
              0.27440628,  0.67676216],
            [-0.05177166, -0.18844817, -0.29547023, ..., -0.04309765,
             -0.35142202, -0.16433541]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 4361.49it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  11.473 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
