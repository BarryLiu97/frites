.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.18895402, -0.31987587, -0.48673051, ...,  0.47231191,
              0.09392038, -0.45855501],
            [ 0.32069022, -0.14902902, -0.23979932, ..., -0.00209181,
             -0.34190472,  0.21563502],
            [ 0.2201064 , -0.48529001, -0.11470749, ...,  0.35435914,
             -0.2131076 , -0.27385535]],

           [[-0.16350035, -0.30599706, -0.1890372 , ..., -0.58842987,
              0.12336117,  0.71655643],
            [-0.10202172, -0.07293323, -0.00571634, ..., -0.13141625,
              0.37054827,  0.0712685 ],
            [ 0.25624747,  0.1274227 , -0.10850826, ..., -0.18675759,
              0.27834425,  0.66493508]],

           [[ 0.01590856, -0.51737751, -0.06569642, ..., -0.03428316,
              0.63570385,  0.31053987],
            [ 0.11849012, -0.35378274, -0.21207504, ...,  0.27424796,
             -0.6069225 , -0.23842198],
            [ 0.17298771, -0.03132987, -0.44172176, ...,  0.09690827,
             -0.04695762,  0.01451389]],
    ...
           [[ 0.04830233, -0.0505743 , -0.08223261, ..., -0.3498306 ,
             -0.06684061,  0.31935131],
            [ 0.15545428, -0.12449928,  0.16085076, ..., -0.13000854,
             -0.15814991, -0.26065627],
            [-0.16854221, -0.15357019, -0.16271279, ..., -0.05040856,
              0.19049324,  0.44609852]],

           [[-0.2574188 , -0.06610303, -0.17779838, ..., -0.77566247,
             -0.70378585,  0.14640862],
            [ 0.51460165,  0.03631635,  0.04462415, ...,  0.12599537,
              0.20637475, -0.29999386],
            [ 0.00108446, -0.08497685, -0.03943125, ..., -0.08829021,
              0.06857084, -0.01512444]],

           [[-0.21445291,  0.49309361,  0.64331332, ..., -0.46819073,
              0.17386392,  0.70881605],
            [ 0.10853542, -0.0660683 , -0.27384446, ..., -0.22500917,
             -0.288694  ,  0.11712652],
            [ 0.15494401, -0.0806424 ,  0.06012671, ..., -0.29243139,
              0.11120605,  0.35454662]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  14.242 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
