.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.42945123,  0.0625216 , -0.48846054, ..., -0.39108534,
              0.01153199,  0.36702233],
            [ 0.2899436 , -0.23375739, -0.25031199, ..., -0.21871158,
             -0.2328842 , -0.25108935],
            [-0.42525385, -0.11107286,  0.44647532, ..., -0.28247759,
              0.10539865,  0.47856162]],

           [[-0.20513661,  0.04425543,  0.15135931, ...,  0.21201459,
              0.28702951,  0.12286045],
            [ 0.49425628,  0.10786753, -0.11975342, ...,  0.08030267,
             -0.1442271 ,  0.43436996],
            [ 0.06031158, -0.14274609, -0.31813693, ..., -0.30665086,
             -0.24708592,  0.1330523 ]],

           [[-0.08425067,  0.34821773,  0.32962049, ...,  0.38876217,
              0.10178411, -0.23185704],
            [-0.32532757,  0.11285316,  0.38286242, ..., -0.34922306,
              0.33019857, -0.09766333],
            [-0.22740087,  0.19763553, -0.07904091, ..., -0.30468835,
              0.04316846,  0.55781684]],
    ...
           [[ 0.14779066, -0.30449433, -0.49378934, ..., -0.07637035,
             -0.49551694, -0.11135441],
            [-0.22056108, -0.14758771, -0.14335761, ..., -0.05421428,
             -0.06936621,  0.22127912],
            [-0.26877447, -0.15307576,  0.16252839, ...,  0.68082002,
              0.23304679, -0.26757327]],

           [[-0.1115746 , -0.06753766,  0.26734697, ...,  0.22014043,
             -0.36008834, -0.93103063],
            [-0.15431657,  0.31584205, -0.18018838, ..., -0.18628808,
             -0.00524742,  0.24287207],
            [-0.17656604, -0.19589464,  0.1381141 , ..., -0.33923957,
             -0.20681055,  0.56754443]],

           [[ 0.0469813 , -0.25092503, -0.26082923, ...,  0.31349765,
              0.33120255, -0.26278316],
            [ 0.33476305, -0.53125634, -0.32552124, ...,  0.35497389,
              0.12542563, -0.32846875],
            [ 0.0079789 ,  0.27080244, -0.01778897, ..., -0.59572907,
             -0.06646559,  0.42566305]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 4549.14it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.065 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
