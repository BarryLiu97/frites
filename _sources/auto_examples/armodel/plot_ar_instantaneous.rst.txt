.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.09355724,  0.00594729,  0.01396018, ..., -0.10270784,
              0.04756341,  0.64644862],
            [ 0.02976988,  0.11082444,  0.3412196 , ...,  0.11244842,
             -0.27280084, -0.35729106],
            [ 0.00390709, -0.01720568, -0.27431864, ...,  0.45362749,
              0.27026006, -0.29533633]],

           [[ 0.14318756,  0.08381999,  0.07168406, ...,  0.26936811,
              0.49264123,  0.10094531],
            [ 0.01978918, -0.03089147, -0.20359181, ...,  0.04847394,
             -0.01074233, -0.12311615],
            [ 0.22140474, -0.05914336,  0.05166762, ...,  0.1390133 ,
             -0.29575772,  0.09569071]],

           [[-0.02471271,  0.01111986,  0.1933953 , ...,  0.12509983,
              0.33006672, -0.26988289],
            [-0.03574334, -0.2738859 , -0.36817612, ...,  0.13455537,
              0.35987126,  0.64924186],
            [-0.19980883, -0.32150203, -0.17301516, ...,  0.28840562,
              0.49695108,  0.60987851]],
    ...
           [[-0.17490968, -0.14924183,  0.27300083, ...,  0.17808588,
              0.53314843,  0.69254761],
            [-0.28525222,  0.06960091,  0.35832504, ..., -0.09920224,
              0.22780218,  0.14718764],
            [-0.0248552 ,  0.21747445,  0.18687135, ..., -0.00189771,
             -0.24242945, -0.16917384]],

           [[ 0.23341303,  0.25515389,  0.10605654, ...,  0.07488236,
             -0.20407325, -0.25419678],
            [ 0.23248263, -0.44352947,  0.04847257, ...,  0.28493819,
             -0.00608596, -0.24337968],
            [-0.23673601,  0.24937941,  0.40160524, ...,  0.11322384,
             -0.3555871 ,  0.25703219]],

           [[ 0.54765537,  0.05217423, -0.5915581 , ..., -0.09130969,
              0.05728802,  0.06030509],
            [ 0.05020379, -0.30859387, -0.65254203, ...,  0.27413467,
             -0.28509471, -0.12833067],
            [ 0.1824325 ,  0.0028968 ,  0.04502625, ..., -0.03238566,
              0.40822935,  0.17807592]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/miniconda3/envs/testenv/lib/python3.6/site-packages/networkx/drawing/layout.py:950: FutureWarning: arrays to stack must be passed as a "sequence" type such as list or tuple. Support for non-sequence iterables such as generators is deprecated as of NumPy 1.16 and will raise an error in the future.
      pos = np.row_stack((pos[x] for x in node_list))



plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  8.427 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
