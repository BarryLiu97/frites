.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.1759127 ,  0.00827598,  0.47495744, ..., -0.63348088,
             -0.18017953,  0.57746417],
            [-0.07989152,  0.09125272,  0.01083058, ..., -0.02081685,
              0.17710843, -0.08798002],
            [-0.1175449 , -0.02242478,  0.39510619, ..., -0.31925094,
              0.30439609,  0.56996546]],

           [[ 0.06513261,  0.12803849, -0.04838571, ...,  0.27847501,
             -0.37742287, -0.14778759],
            [ 0.00810907, -0.09825458,  0.002028  , ...,  0.39643057,
              0.24650043, -0.05098236],
            [-0.18645764, -0.04252324, -0.0178004 , ...,  0.12798195,
              0.15765634, -0.25230002]],

           [[ 0.23498065, -0.0391499 , -0.0797818 , ...,  0.29391456,
             -0.02015615, -0.17626791],
            [-0.01801212,  0.02392041, -0.20177359, ...,  0.37933662,
             -0.36261968, -0.38663382],
            [ 0.52286049,  0.17969462,  0.15613924, ..., -0.06635983,
              0.30564591,  0.25756825]],
    ...
           [[ 0.05726859, -0.20988407,  0.11674611, ...,  0.96306729,
              0.28550958, -0.75275407],
            [ 0.0284791 ,  0.317044  ,  0.19520201, ..., -0.3569327 ,
             -0.18845939, -0.00433758],
            [-0.07584548,  0.12041765,  0.5797823 , ...,  0.39283033,
             -0.17989328, -0.38638227]],

           [[ 0.01544125,  0.11002728,  0.48825492, ..., -0.35223935,
             -0.51743897,  0.15791434],
            [ 0.63452182, -0.13454723, -0.57155323, ...,  0.29221253,
             -0.23288609, -0.1819876 ],
            [-0.31815533,  0.59250677,  0.53589557, ..., -0.06888573,
             -0.00330189,  0.19538185]],

           [[ 0.0159309 , -0.03602637, -0.55557537, ...,  0.01149745,
              0.29380984,  0.35452204],
            [ 0.29268409,  0.24453285,  0.20877499, ...,  0.31416101,
             -0.4472073 , -0.78238052],
            [ 0.15341814,  0.32847485, -0.16668155, ..., -0.03063435,
              0.00253363,  0.22247039]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/miniconda3/envs/testenv/lib/python3.6/site-packages/networkx/drawing/layout.py:950: FutureWarning: arrays to stack must be passed as a "sequence" type such as list or tuple. Support for non-sequence iterables such as generators is deprecated as of NumPy 1.16 and will raise an error in the future.
      pos = np.row_stack((pos[x] for x in node_list))



plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  11.205 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
