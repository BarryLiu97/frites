.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 1.82044870e-03, -6.56524129e-02,  2.85884892e-02, ...,
             -3.00361748e-01,  3.31147823e-01,  4.83620966e-01],
            [ 3.42361457e-01, -5.05299385e-01, -4.84425477e-02, ...,
             -4.25014027e-02,  1.16069999e-01,  1.81775910e-01],
            [ 2.63457260e-01, -4.70082803e-02,  5.79547780e-02, ...,
              4.06332704e-01, -4.10206716e-01,  2.29578419e-02]],

           [[-2.00203146e-01,  8.80166732e-02,  3.86165111e-01, ...,
             -2.20334820e-01,  2.76642756e-01,  7.39350154e-01],
            [-5.15801424e-02,  8.83071334e-02, -1.14990700e-01, ...,
             -4.66017878e-01, -1.86727821e-01, -6.72488930e-03],
            [-2.16182443e-01, -3.17677781e-02, -2.24680700e-02, ...,
             -7.98012789e-02, -6.71037455e-01, -5.16156765e-01]],

           [[ 3.67435141e-02,  1.29672861e-01,  2.28135464e-01, ...,
              5.27411004e-01, -1.66187254e-01, -8.33738605e-01],
            [ 2.13610763e-02, -5.34625337e-01, -1.33423349e-01, ...,
             -3.67467730e-02,  1.56152288e-01,  1.80525791e-02],
            [-2.10317741e-02, -7.45871618e-02,  1.53772001e-01, ...,
             -2.53041092e-01, -4.89705900e-02,  4.16663664e-01]],
    ...
           [[-8.03837758e-03, -1.85602183e-01,  1.17693530e-02, ...,
             -1.20213245e-01, -2.67289512e-01, -4.23447661e-01],
            [-1.38390687e-01,  8.50780019e-02,  3.44219198e-01, ...,
             -6.80892271e-01, -1.80097116e-01,  2.90477611e-01],
            [ 1.71295948e-01, -2.36301396e-01,  2.17054368e-01, ...,
             -2.42335305e-01,  1.38501330e-01,  4.05601998e-01]],

           [[ 8.63362869e-02, -1.99527698e-01, -1.66145682e-02, ...,
              5.18589578e-01, -2.06382148e-01, -2.61117806e-01],
            [ 3.44581721e-01,  2.70766516e-01,  2.19916329e-02, ...,
             -1.01973460e-01,  1.66211897e-01, -1.63277938e-01],
            [ 2.68095285e-02, -2.68531025e-02, -2.92779005e-01, ...,
              7.77723288e-02, -2.01399517e-01, -5.51742265e-02]],

           [[ 3.13538881e-01,  3.00673548e-02, -2.38338490e-01, ...,
             -6.45716435e-01, -2.69381641e-01,  4.88366961e-01],
            [-1.85092753e-01, -1.44252839e-01,  3.51367630e-01, ...,
             -3.70948645e-04, -1.24832016e-01, -2.00727252e-01],
            [-4.46898350e-03, -4.79307059e-01, -2.94207441e-01, ...,
              1.08808551e-01,  3.10909189e-01,  1.08792808e-01]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 3778.65it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  12.507 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
