.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.55126803, -0.07107982,  0.66931964, ..., -0.55072408,
             -0.14359039,  0.2125966 ],
            [-0.30377097, -0.37713309,  0.37113428, ..., -0.3349939 ,
              0.11132948, -0.03657312],
            [ 0.05498965,  0.28259322, -0.08709639, ...,  0.09436601,
              0.01286144, -0.00094688]],

           [[ 0.19691261,  0.06008535,  0.18572625, ..., -0.29053461,
              0.3096558 ,  0.52827015],
            [ 0.54198154,  0.16035827, -0.47562927, ...,  0.26148351,
              0.41015096,  0.00484894],
            [ 0.18789277,  0.05009623, -0.25229085, ...,  0.38459944,
              0.20533611, -0.37841105]],

           [[-0.0792354 ,  0.04878259,  0.2591828 , ..., -0.37483882,
              0.06109225,  0.4538229 ],
            [ 0.07660551,  0.13537419,  0.16047153, ...,  0.11524732,
              0.09667719,  0.10037564],
            [ 0.21123681,  0.22444771, -0.23466684, ..., -0.09903722,
              0.03650396,  0.07948171]],
    ...
           [[-0.10239021,  0.39817804,  0.22747434, ..., -0.19010647,
              0.42883782,  0.51416624],
            [ 0.20941315, -0.04144864, -0.62974622, ..., -0.22325393,
              0.37883691,  0.13133372],
            [ 0.54256458, -0.19460368, -0.73835693, ..., -0.01496747,
              0.27141837,  0.43154872]],

           [[ 0.2047743 , -0.15895628, -0.0273686 , ...,  0.18575863,
              0.21442064, -0.01497804],
            [-0.05021011,  0.01023359, -0.20504423, ..., -0.55520837,
             -0.42418972,  0.08658883],
            [ 0.20137441, -0.13300883, -0.07479758, ..., -0.29725546,
             -0.05694756, -0.08920962]],

           [[ 0.16103799, -0.04466531,  0.03738273, ..., -0.5366408 ,
             -0.51390979, -0.21771229],
            [ 0.15176407,  0.16119172,  0.02718332, ...,  0.61987231,
             -0.17143288, -0.47376256],
            [ 0.03449834, -0.09184184,  0.26036203, ..., -0.02802222,
             -0.04215757, -0.23483285]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 4088.02it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  11.015 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
