.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.10640729, -0.06451445,  0.06020839, ...,  0.37077635,
             -0.19879805, -0.29298354],
            [ 0.15391655,  0.14978732,  0.21772855, ...,  0.18374113,
             -0.08047818,  0.00204768],
            [-0.00577357, -0.33352819, -0.23829727, ..., -0.08497057,
             -0.05561179, -0.07651565]],

           [[-0.3324086 ,  0.28130398,  0.28249855, ..., -0.43321057,
             -0.26910766,  0.3722632 ],
            [-0.05609644, -0.13752044,  0.54048138, ...,  0.37409927,
              0.49447209, -0.17979439],
            [ 0.05145396, -0.09546406, -0.68347149, ..., -0.6425534 ,
             -0.26036069,  0.39895296]],

           [[ 0.4304865 ,  0.27264719, -0.2727566 , ...,  0.2791357 ,
             -1.20024721, -1.32104844],
            [-0.20685469, -0.12243798, -0.08168721, ...,  0.10091045,
             -0.43690724, -0.38136492],
            [ 0.13182065, -0.16108294, -0.21710167, ..., -0.19735868,
              0.05489113, -0.04103314]],
    ...
           [[-0.27712463, -0.22664152,  0.38008106, ...,  0.25765005,
             -0.06844653, -0.02043214],
            [-0.12118612,  0.10940914,  0.17857857, ...,  0.43961101,
             -0.14980251, -0.08061214],
            [-0.42090642,  0.0393131 ,  0.08018297, ...,  0.09229017,
              0.06693767, -0.05017999]],

           [[ 0.11790736,  0.03080715, -0.23809874, ...,  0.0186646 ,
             -0.38728683, -0.22020024],
            [-0.08825364,  0.19682065, -0.19002093, ..., -0.11133634,
             -0.04459331, -0.15609808],
            [-0.0526546 ,  0.16400515,  0.08007365, ..., -0.13842987,
             -0.34120971,  0.13677337]],

           [[-0.24052403, -0.00816531,  0.5112197 , ...,  0.24060023,
              0.26430783, -0.27881683],
            [ 0.04341378,  0.27479411, -0.23460628, ..., -0.26117051,
             -0.0225154 ,  0.42421675],
            [-0.52547435, -0.54653361,  0.15407546, ..., -0.15082932,
              0.23176917,  0.01588286]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.700 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
