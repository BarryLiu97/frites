.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.02521588, -0.09447378, -0.08729216, ...,  0.0781889 ,
             -0.72582704, -0.04817446],
            [-0.07405713,  0.08480275, -0.09143885, ...,  0.34576755,
             -0.2314672 , -0.45678266],
            [-0.2675886 ,  0.14533895, -0.12257662, ...,  0.21198141,
              0.21874902, -0.06656753]],

           [[-0.08620704, -0.16450216,  0.19119196, ..., -0.3469401 ,
             -0.52416818, -0.16806803],
            [-0.04343327, -0.17555019, -0.28627919, ..., -0.04155058,
              0.05113057,  0.19863334],
            [-0.108053  , -0.09841547, -0.01987921, ...,  0.55471456,
             -0.15275418, -0.03049947]],

           [[ 0.60343997,  0.22539391, -0.39285659, ..., -0.38572621,
             -0.06484094,  0.31469892],
            [-0.14919747,  0.15171447,  0.57389857, ..., -0.15897698,
             -0.1214199 ,  0.09726417],
            [-0.03941112, -0.21414351, -0.06973938, ...,  0.04197839,
              0.00537497, -0.51809513]],
    ...
           [[-0.17121319, -0.52673369, -0.32607347, ...,  0.07250712,
             -0.53584895, -0.47674601],
            [-0.16420381,  0.2698484 ,  0.40847672, ..., -0.1629174 ,
             -0.22267042, -0.19005348],
            [ 0.00611972, -0.27949166, -0.19341746, ...,  0.22417529,
              0.18737434,  0.20273372]],

           [[ 0.08576011, -0.12898203, -0.0729149 , ..., -0.2162787 ,
             -0.19612968, -0.18082901],
            [ 0.19706399, -0.14201111, -0.35206863, ...,  0.12985988,
              0.08881925,  0.15776469],
            [ 0.08890458, -0.04564261, -0.09721645, ...,  0.10961678,
             -0.48365093,  0.15656233]],

           [[ 0.17763106,  0.11848618, -0.1812929 , ..., -1.00411773,
              0.42533792,  1.32124844],
            [-0.36617896, -0.11750233,  0.06900008, ..., -0.0925585 ,
              0.17151383,  0.03802247],
            [-0.05985127,  0.04884409,  0.6815026 , ...,  0.03043032,
             -0.20322337, -0.35762916]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 4555.72it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.158 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
