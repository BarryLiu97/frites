.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.09678629, -0.01015877,  0.14071898, ...,  0.51795599,
              0.32808725,  0.06089322],
            [ 0.36942069,  0.27765465, -0.0116411 , ..., -0.45879005,
             -0.09776879,  0.022492  ],
            [-0.32072133, -0.29201417,  0.24477639, ..., -0.0520649 ,
              0.24922406,  0.0264479 ]],

           [[-0.2300287 ,  0.20617784,  0.40914767, ..., -0.23422964,
             -0.02453824,  0.19486156],
            [-0.05884885, -0.30024065, -0.31733104, ...,  0.06722847,
             -0.32655547, -0.35374587],
            [ 0.25039866, -0.19791089, -0.24384061, ..., -0.00757574,
              0.02050575,  0.22546326]],

           [[ 0.37110644,  0.0931112 ,  0.17963838, ...,  0.09463725,
             -0.45781329, -0.09553937],
            [-0.11884372, -0.34800342,  0.13702225, ..., -0.20613916,
             -0.07505171, -0.20830331],
            [-0.25408552, -0.00654242,  0.31390644, ...,  0.0238688 ,
              0.10581367, -0.20599976]],
    ...
           [[ 0.11666622,  0.19898506, -0.00382062, ...,  0.30560143,
             -0.22563581,  0.05444608],
            [-0.15375733,  0.37604956,  0.17140331, ..., -0.29349632,
             -0.07096408,  0.31544931],
            [-0.13182847,  0.05694044,  0.31375718, ..., -0.2881165 ,
              0.25617702,  0.17156529]],

           [[ 0.16961837, -0.58446068, -0.12537676, ...,  0.35984471,
              0.20050939, -0.18800943],
            [ 0.18199514,  0.22046647, -0.03765084, ...,  0.18358801,
              0.03423005, -0.26192442],
            [ 0.35249778, -0.09836474, -0.07174041, ..., -0.42947253,
             -0.02546526,  0.66199594]],

           [[-0.18734809, -0.28967894, -0.27624067, ...,  0.06449976,
              0.26009119, -0.13562823],
            [ 0.18428768, -0.03778293, -0.51038204, ...,  0.06749095,
             -0.1035079 , -0.17770197],
            [ 0.56228682, -0.27549423, -0.51175632, ...,  0.20365773,
              0.02657434, -0.29054273]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 4617.58it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.655 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
