.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.15540798, -0.40068147,  0.11011079, ...,  0.16851313,
             -0.47407345, -0.38900072],
            [ 0.18078848, -0.0294201 , -0.03083647, ..., -0.4886797 ,
             -0.15952353,  0.15269265],
            [ 0.16695165, -0.38723123, -0.20047185, ..., -0.19114304,
             -0.46099805,  0.2762331 ]],

           [[-0.41485063, -0.11605705,  0.0627334 , ..., -0.21967313,
             -0.14488416,  0.03271157],
            [-0.38631962, -0.23206094,  0.49382126, ...,  0.18620661,
              0.15309957, -0.22331621],
            [ 0.36257566, -0.20107853, -0.09084336, ..., -0.02473557,
             -0.14947007, -0.08623525]],

           [[-0.02668616, -0.45104859, -0.02530888, ..., -0.00947378,
              0.10219467,  0.19190496],
            [-0.03622266, -0.32660816, -0.24691903, ..., -0.45707701,
             -0.41327924,  0.07405343],
            [ 0.93367818,  0.01403997, -0.36653716, ..., -0.02299989,
              0.20291636,  0.2316279 ]],
    ...
           [[-0.18589227,  0.05622364,  0.08323602, ...,  0.48263286,
              0.31630018, -0.53174997],
            [ 0.1072837 ,  0.21817962,  0.47355903, ..., -0.13701887,
             -0.33527222,  0.07733429],
            [-0.20349436, -0.00094776, -0.2343928 , ...,  0.24467519,
              0.06051388, -0.52480001]],

           [[ 0.00998839,  0.19158173,  0.11164748, ...,  0.15736529,
              0.40076877,  0.40872276],
            [-0.01902616,  0.32601294, -0.12660712, ...,  0.22334827,
              0.1537245 ,  0.07377683],
            [ 0.03372478,  0.13824087,  0.30004003, ..., -0.58560734,
             -0.11462959, -0.2105546 ]],

           [[-0.07769317,  0.14877724, -0.07940517, ..., -0.14328096,
             -0.00715162,  0.216168  ],
            [ 0.17755661,  0.55164434, -0.04795907, ..., -0.05090497,
             -0.27204988,  0.12920312],
            [-0.26672134, -0.11641347,  0.62363885, ..., -0.02938732,
              0.05829262,  0.17511888]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  8.744 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
