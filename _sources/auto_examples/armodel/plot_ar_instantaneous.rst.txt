.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.06691998,  0.03631285,  0.15495886, ...,  0.49699316,
             -0.36742344, -1.0772819 ],
            [-0.19760734, -0.29584977, -0.17732607, ..., -0.05366487,
              0.08291785,  0.03988695],
            [-0.25905845, -0.47854564, -0.25622299, ..., -0.11113816,
             -0.42198762, -0.24474231]],

           [[-0.07182521,  0.13135988, -0.11665831, ...,  0.12297559,
             -0.39613605, -0.13745319],
            [-0.22404032, -0.46292828, -0.15825984, ...,  0.0606381 ,
             -0.24501903, -0.07610416],
            [ 0.32945645,  0.13504511, -0.59004779, ...,  0.16944841,
             -0.06681406, -0.07916607]],

           [[ 0.12790945, -0.17425999,  0.13237421, ...,  0.11015586,
             -0.60966135, -0.60253709],
            [-0.04020833,  0.03768719, -0.02476818, ..., -0.27084744,
              0.09136843,  0.16019611],
            [-0.21274382, -0.25698627,  0.1599176 , ...,  0.41907656,
              0.31301075, -0.01370375]],
    ...
           [[-0.3508553 , -0.38720355,  0.00701367, ...,  0.55480048,
              0.1074673 ,  0.03973514],
            [-0.2434627 , -0.2185973 , -0.13133558, ...,  0.26891183,
              0.02118945, -0.23100632],
            [ 0.1652336 , -0.20751264, -0.07519928, ...,  0.08537831,
              0.06786856,  0.03112018]],

           [[-0.02902028, -0.05474245,  0.21685298, ..., -0.39313404,
             -0.55055416, -0.33109576],
            [-0.2116261 ,  0.25751107,  0.21463527, ..., -0.42317056,
             -0.19708621,  0.32498377],
            [-0.01274511,  0.00632538, -0.05007397, ..., -0.21321025,
             -0.31924143, -0.17094823]],

           [[ 0.34292591,  0.1737644 ,  0.05099724, ..., -0.80449038,
             -0.78279221,  0.52971505],
            [ 0.16059375,  0.2156931 , -0.03015506, ...,  0.09704659,
             -0.01816128, -0.36779135],
            [-0.08795032, -0.26599049,  0.18208861, ...,  0.14437034,
              0.20463004, -0.40853396]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/miniconda3/envs/testenv/lib/python3.6/site-packages/networkx/drawing/layout.py:950: FutureWarning: arrays to stack must be passed as a "sequence" type such as list or tuple. Support for non-sequence iterables such as generators is deprecated as of NumPy 1.16 and will raise an error in the future.
      pos = np.row_stack((pos[x] for x in node_list))



plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.382 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
