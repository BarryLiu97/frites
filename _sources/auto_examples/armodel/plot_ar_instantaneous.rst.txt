.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.00649271,  0.26985134,  0.61783445, ..., -0.35011509,
             -0.419318  , -0.23133537],
            [ 0.05972505,  0.02512977,  0.05522511, ..., -0.13329848,
             -0.30104496,  0.1292831 ],
            [ 0.03515823, -0.16239963, -0.17298152, ..., -0.10439981,
              0.27092788,  0.35618633]],

           [[ 0.04737929,  0.15445748, -0.30361696, ...,  0.02153235,
             -0.25239649, -0.41338015],
            [-0.18121594, -0.21803576, -0.02931319, ...,  0.17078922,
              0.03585322, -0.2879722 ],
            [-0.49346169, -0.08631891,  0.10923232, ..., -0.13037386,
              0.20065213,  0.00547577]],

           [[-0.00454852, -0.14521482, -0.0986739 , ..., -0.21871177,
             -0.65562885, -0.23041076],
            [-0.26554911, -0.10268788,  0.17917321, ..., -0.29109222,
              0.13485902,  0.56342371],
            [-0.25675039,  0.33504505,  0.23339512, ..., -0.35930936,
             -0.01409579, -0.0243266 ]],
    ...
           [[-0.15223422, -0.2339666 ,  0.20679621, ..., -0.4032341 ,
             -0.21578632,  0.04383567],
            [ 0.23914399,  0.56660062,  0.52383544, ...,  0.37333253,
              0.00439816, -0.07509507],
            [-0.04338251, -0.04559298,  0.10293949, ...,  0.07816158,
              0.08432542, -0.01779741]],

           [[ 0.02056451,  0.51809575,  0.4156785 , ..., -0.45516461,
              0.01618004,  0.06478172],
            [-0.21482748, -0.26963988,  0.54374684, ...,  0.03081348,
             -0.33009109, -0.18651714],
            [ 0.17235009, -0.04845712,  0.01889434, ...,  0.25549745,
             -0.13681983,  0.27586282]],

           [[ 0.17348599,  0.02001923,  0.07670406, ..., -0.37072935,
             -0.6726871 , -0.0171351 ],
            [ 0.21258986,  0.26703212, -0.06797752, ...,  0.083289  ,
              0.11093155, -0.38556215],
            [ 0.17684561, -0.0433694 , -0.22692277, ...,  0.04557064,
             -0.2194671 , -0.07030958]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.794 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
