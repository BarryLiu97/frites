.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.14741391, -0.17741804,  0.1432295 , ...,  0.02177817,
              0.30276773, -0.0518532 ],
            [ 0.11398488,  0.07488984,  0.31588481, ...,  0.2062405 ,
             -0.31591348, -0.02035361],
            [ 0.13160464, -0.23109703, -0.18485881, ..., -0.35696814,
              0.09406677,  0.50506818]],

           [[ 0.11210586, -0.22511289,  0.23456497, ..., -0.25089127,
             -0.51208476, -0.11545632],
            [-0.21254142,  0.02452624,  0.48300881, ..., -0.67845249,
             -0.18554001,  0.46905383],
            [-0.02470717,  0.14653666,  0.55254782, ...,  0.18088145,
             -0.51266614, -0.49348787]],

           [[-0.04038453, -0.40648319, -0.38296816, ...,  0.33970999,
             -0.28069525, -0.15768351],
            [-0.42146954,  0.10583297,  0.42231369, ...,  0.08492809,
             -0.09206702,  0.17491766],
            [ 0.18807194, -0.2725369 ,  0.03357747, ..., -0.26888384,
              0.16397934, -0.01857197]],
    ...
           [[-0.40471913,  0.31672674,  0.54706849, ...,  0.37204666,
              0.77500878,  0.24741015],
            [ 0.17058123,  0.23463972, -0.26926163, ..., -0.07229672,
              0.09642603,  0.04485652],
            [-0.38061609,  0.21880458,  0.40412862, ..., -0.31032473,
              0.06881625, -0.17246899]],

           [[ 0.20907427,  0.09799561, -0.12040428, ...,  0.2792271 ,
              0.11848446, -0.61297687],
            [-0.19237852, -0.27997811, -0.15455663, ..., -0.30102101,
             -0.3717707 ,  0.31711221],
            [-0.07367233,  0.12788249,  0.00135369, ...,  0.32006355,
             -0.1789171 ,  0.09367332]],

           [[ 0.02810837, -0.03456919,  0.00265298, ...,  0.53630902,
              0.11997627, -0.33775527],
            [-0.11988021,  0.00621951, -0.20351759, ...,  0.24279121,
              0.18643722,  0.15489531],
            [-0.0644219 , -0.09125582, -0.20320745, ...,  0.34666003,
              0.56490374,  0.26305587]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 4253.86it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.798 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
