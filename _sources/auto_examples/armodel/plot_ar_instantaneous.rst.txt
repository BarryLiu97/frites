.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.07588233, -0.05136617,  0.04587271, ...,  0.13745329,
             -0.62527425, -0.42132271],
            [ 0.17153337, -0.06880529, -0.12485534, ..., -0.09648574,
              0.43085035, -0.28146574],
            [-0.04126767, -0.04363537,  0.15787832, ..., -0.61156728,
              0.08288054,  0.3307958 ]],

           [[-0.15473315,  0.05779062,  0.1611154 , ..., -0.01483398,
              0.1318368 ,  0.14067743],
            [-0.46632615, -0.2130889 ,  0.3628457 , ...,  0.06988304,
              0.06800308,  0.24534542],
            [-0.14975191, -0.46155767, -0.26948487, ..., -0.02268467,
              0.24337101, -0.12812187]],

           [[ 0.35049961, -0.04651846, -0.25504863, ..., -0.57357041,
             -0.31393729,  0.23061042],
            [ 0.35352266,  0.06555322, -0.10798146, ...,  0.38281962,
              0.10225395, -0.27069904],
            [-0.05772089,  0.25565836,  0.10658696, ..., -0.3218425 ,
              0.17469674,  0.26830046]],
    ...
           [[ 0.2129188 , -0.26037347, -0.07548016, ..., -0.46815796,
             -0.84905629, -0.27413938],
            [ 0.4908231 , -0.16441357, -0.30296607, ...,  0.27147864,
              0.29167157,  0.10537045],
            [ 0.12214739,  0.06179559, -0.15120085, ...,  0.20476396,
             -0.09137206, -0.24493841]],

           [[ 0.02822637,  0.50230534,  0.16972892, ...,  0.02271346,
             -0.19600709, -0.27514978],
            [ 0.07758555,  0.29253098,  0.08217259, ...,  0.13466001,
             -0.05734761, -0.48369397],
            [ 0.09135248, -0.07622763, -0.29967671, ..., -0.30253574,
             -0.19573877,  0.301855  ]],

           [[ 0.01537716, -0.05390612,  0.25668592, ..., -0.0240641 ,
              0.09831613,  0.07115602],
            [-0.19616827,  0.38420711,  0.57449912, ..., -0.0071509 ,
              0.32714621,  0.35224117],
            [-0.1177139 ,  0.17710515, -0.0556254 , ...,  0.07665047,
              0.40073498,  0.19030096]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.302 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
