.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[-0.02196704,  0.00191909,  0.1693981 , ..., -0.19740758,
             -0.76416998, -0.45109728],
            [-0.06998553, -0.24850122, -0.10304174, ...,  0.03364343,
              0.02150223, -0.00363483],
            [-0.32714554, -0.04222078,  0.36786696, ..., -0.15826352,
              0.22959512,  0.03312475]],

           [[ 0.09540399,  0.24303753,  0.31556056, ..., -0.26871695,
             -0.47544641, -0.0646612 ],
            [-0.18197574, -0.41267837, -0.0196739 , ...,  0.26845776,
             -0.06576166, -0.08671745],
            [ 0.26712007, -0.16046408,  0.03008232, ...,  0.46096033,
             -0.12280375, -0.68876563]],

           [[ 0.28582897, -0.27247155, -0.07179386, ...,  0.1150061 ,
             -0.34841802, -0.18953253],
            [ 0.05328598,  0.09803318,  0.37676662, ...,  0.26978957,
             -0.19147485, -0.05706171],
            [-0.0806701 ,  0.03055778,  0.37172233, ...,  0.16492924,
              0.15501124,  0.24723465]],
    ...
           [[ 0.30345461, -0.19015351, -0.12335845, ...,  0.13285811,
              0.83100659,  0.19963397],
            [-0.25398678, -0.09388705,  0.05206749, ..., -0.06735917,
              0.26142483,  0.41091704],
            [ 0.32422845, -0.15455646, -0.05945993, ...,  0.36083774,
              0.0294783 , -0.27151944]],

           [[ 0.20045447,  0.12429924, -0.10955301, ...,  0.0888454 ,
              0.20617869,  0.20588304],
            [ 0.24945074,  0.3341859 ,  0.5118981 , ..., -0.0314476 ,
             -0.68096012, -0.33108094],
            [-0.43457521, -0.2050548 ,  0.02039123, ...,  0.1954575 ,
              0.20523964, -0.03342694]],

           [[-0.0996467 ,  0.45005309,  0.38307848, ...,  0.85841677,
              0.25247035, -0.69862612],
            [ 0.15501028,  0.06306927, -0.23208358, ..., -0.04079043,
              0.08391892,  0.20360225],
            [ 0.31428195,  0.08466514, -0.20064841, ..., -0.10376393,
              0.27013311,  0.39184542]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/circleci/miniconda3/envs/testenv/lib/python3.6/site-packages/networkx/drawing/layout.py:950: FutureWarning: arrays to stack must be passed as a "sequence" type such as list or tuple. Support for non-sequence iterables such as generators is deprecated as of NumPy 1.16 and will raise an error in the future.
      pos = np.row_stack((pos[x] for x in node_list))



plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.176 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
