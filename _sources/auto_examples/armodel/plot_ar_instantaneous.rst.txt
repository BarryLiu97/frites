.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.58594549, -0.23211792, -0.53498482, ..., -0.07378454,
              0.18056782,  0.0274219 ],
            [-0.01288143,  0.0619174 ,  0.09239529, ..., -0.03141809,
              0.3956037 ,  0.26576897],
            [ 0.14741391, -0.17741804,  0.22293728, ...,  0.08631162,
              0.11791462, -0.20283861]],

           [[ 0.03020301, -0.39750947, -0.14164241, ...,  0.22375095,
              0.44600711, -0.31240397],
            [-0.17245517,  0.2462144 ,  0.02615911, ...,  0.18563371,
             -0.09547971, -0.4975343 ],
            [ 0.11210586, -0.22511289,  0.3132193 , ..., -0.35640539,
             -0.5995009 , -0.06614534]],

           [[-0.01241512,  0.02237591, -0.07274616, ..., -0.27524854,
              0.15080783,  0.15311822],
            [ 0.06957079, -0.06490256, -0.30695364, ...,  0.22446046,
              0.45911438, -0.08596302],
            [-0.04038453, -0.40648319, -0.31378688, ...,  0.2503372 ,
             -0.06631075,  0.12008951]],
    ...
           [[-0.24181676,  0.23309578,  0.03546449, ..., -0.23328312,
             -0.48523173, -0.59099196],
            [ 0.02082247,  0.00155445, -0.12662422, ...,  0.36372077,
             -0.126184  , -0.11588462],
            [-0.40471913,  0.31672674,  0.3623074 , ...,  0.21116843,
              0.45508796,  0.17248921]],

           [[ 0.11995654, -0.31500839, -0.44719522, ..., -0.48213313,
             -0.21502418,  0.11028139],
            [ 0.16900672,  0.17093158, -0.00938891, ..., -0.10586102,
              0.03705581, -0.01214148],
            [ 0.20907427,  0.09799561, -0.07728112, ...,  0.03928213,
             -0.12338842, -0.51758866]],

           [[ 0.13756651, -0.06175717, -0.06304157, ..., -0.06404423,
             -0.13615506,  0.02371313],
            [-0.35940995,  0.18999839,  0.43934245, ...,  0.45040278,
             -0.2824208 , -0.3260049 ],
            [ 0.02810837, -0.03456919,  0.01799933, ...,  0.29422453,
              0.1368669 , -0.07390386]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 4619.28it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.241 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
