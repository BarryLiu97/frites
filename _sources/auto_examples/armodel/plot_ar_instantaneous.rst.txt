.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.05896729, -0.08408391,  0.07183945, ..., -0.16245521,
             -0.20230688,  0.10391299],
            [ 0.08208905,  0.05293605,  0.01801149, ..., -0.06731421,
             -0.07835328,  0.3378399 ],
            [ 0.03658115,  0.07481613, -0.14156981, ...,  0.37141006,
             -0.3071881 , -0.19772222]],

           [[-0.01383496,  0.0400864 ,  0.07191369, ...,  0.18118251,
              0.12677805, -0.15386353],
            [ 0.19722937,  0.18212567, -0.16691403, ...,  0.66441618,
              0.72051779, -0.01698826],
            [-0.36199434, -0.53103961,  0.11134012, ...,  0.073741  ,
              0.51763811,  0.49796955]],

           [[-0.23145145,  0.04715034,  0.4074577 , ..., -0.01469667,
              0.81605752,  0.59301564],
            [-0.33454134,  0.20143195,  0.10598225, ...,  0.09279013,
              0.27213755, -0.1217447 ],
            [-0.50546112,  0.12366567,  0.45770172, ...,  0.40906512,
             -0.18588898, -0.24064371]],
    ...
           [[ 0.27208002,  0.0814947 ,  0.03066832, ...,  0.04061677,
              0.37019768,  0.20648155],
            [-0.05182676,  0.13016903, -0.21358423, ...,  0.12995715,
             -0.08865453, -0.24972753],
            [-0.00160474,  0.1033582 ,  0.07940116, ...,  0.40522844,
              0.11326134, -0.23970954]],

           [[-0.10053584, -0.22336288, -0.24870277, ..., -0.38330541,
             -0.35570237,  0.4362064 ],
            [-0.17079757,  0.00994154, -0.20336277, ..., -0.18480802,
              0.04187405,  0.28139367],
            [ 0.12552608, -0.28491081, -0.0213598 , ...,  0.08676881,
              0.07584049,  0.02286489]],

           [[ 0.22095679,  0.20914509, -0.59935142, ...,  0.08290013,
              0.5807127 , -0.01096159],
            [-0.05988084,  0.17688348,  0.2817135 , ..., -0.46025434,
             -0.07739885,  0.12831713],
            [-0.09415439, -0.22274841, -0.38245365, ...,  0.24659336,
             -0.16183067, -0.37336442]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 3201.76it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.680 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
