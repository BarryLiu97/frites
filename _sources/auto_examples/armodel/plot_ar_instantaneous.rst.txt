.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.11354841, -0.04547902,  0.18196328, ...,  0.24936273,
             -0.14584894, -0.13052463],
            [ 0.04941766,  0.27952339,  0.37735171, ...,  0.26401938,
             -0.11064234,  0.03568473],
            [ 0.03682266, -0.23439879,  0.18335459, ..., -0.32048198,
             -0.07092979,  0.32482754]],

           [[-0.18506097, -0.13656134, -0.17438712, ...,  0.62222531,
              0.34393029, -0.23488994],
            [ 0.14645123,  0.24192021, -0.23002136, ..., -0.20093084,
             -0.41886834,  0.05001892],
            [ 0.04200262,  0.02585667, -0.05704734, ..., -0.28866824,
             -0.29589045, -0.15541214]],

           [[ 0.23929384,  0.21236979, -0.16426222, ...,  0.10865686,
              0.43007966,  0.32310519],
            [ 0.20393162,  0.3306483 , -0.19370983, ..., -0.26307645,
              0.1406602 ,  0.54515699],
            [ 0.35985347,  0.22930903, -0.2710964 , ...,  0.02797868,
             -0.17642283, -0.12981418]],
    ...
           [[ 0.12792282, -0.37764062, -0.24363555, ...,  0.52883694,
              0.30498755, -0.76112525],
            [-0.26270434,  0.34136153,  0.35966048, ...,  0.23377431,
              0.40931897, -0.02986879],
            [ 0.15259158, -0.23818862, -0.43568692, ..., -0.1477376 ,
             -0.01568386, -0.18459959]],

           [[ 0.25998653,  0.07487634, -0.73108781, ..., -0.04026178,
              0.49124482,  0.34577419],
            [-0.22194275, -0.32659857, -0.25091645, ...,  0.06850197,
             -0.08508415, -0.25921919],
            [-0.07438027, -0.11691908,  0.45074317, ...,  0.30859899,
             -0.03327458, -0.00604828]],

           [[ 0.11739521,  0.11182609, -0.0992745 , ..., -0.38294807,
             -1.00322493, -0.05000973],
            [ 0.28401382,  0.01217967, -0.62285943, ..., -0.34796549,
             -0.02868034,  0.35705222],
            [-0.48583545,  0.10369205,  0.27940174, ..., -0.05356713,
              0.30432547,  0.16079847]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)[0]

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 4624.37it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.418 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
