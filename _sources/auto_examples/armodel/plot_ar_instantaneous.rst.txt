.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_armodel_plot_ar_instantaneous.py:


AR : simulate common driving input
==================================

This example illustrates an autoregressive model that simulates a common
driving input (i.e X->Y and X->Z) and how it is measured using the covariance
based Granger Causality


.. code-block:: default

    import numpy as np

    from frites.simulations import StimSpecAR
    from frites.conn import conn_covgc

    import matplotlib.pyplot as plt








Simulate 3 nodes 40hz oscillations
----------------------------------

Here, we use the class :class:`frites.simulations.StimSpecAR` to simulate an
stimulus-specific autoregressive model made of three nodes (X, Y and Z). This
network simulates a transfer X->Y and X->Z. X is then called a common driving
input for Y and Z


.. code-block:: default



    ar_type = 'osc_40_3'  # 40hz oscillations
    n_stim = 3          # number of stimulus
    n_epochs = 50       # number of epochs per stimulus

    ss = StimSpecAR()
    ar = ss.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim)
    print(ar)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (trials: 150, roi: 3, times: 300)>
    array([[[ 0.07717577,  0.08605327,  0.22777541, ..., -0.47411278,
             -0.53517647, -0.16958912],
            [-0.06811644, -0.22596718, -0.17182744, ..., -0.03173899,
             -0.19251146,  0.5225459 ],
            [-0.35940258,  0.03686771,  0.28901539, ...,  0.40721644,
              0.0140676 , -0.37259028]],

           [[-0.18212348,  0.23788193,  0.29389498, ...,  0.24620144,
              0.00679311, -0.23844597],
            [ 0.06452372, -0.21362925,  0.0192078 , ...,  0.17523067,
             -0.07425662, -0.37982868],
            [-0.34153145, -0.20660721,  0.18443493, ..., -0.10263832,
             -0.53130341, -0.3231226 ]],

           [[ 0.25610761, -0.0379499 ,  0.32351092, ...,  0.48765781,
              0.85877602, -0.2141565 ],
            [-0.07557371, -0.13707297, -0.36197299, ..., -0.061835  ,
              0.01968002, -0.15154629],
            [ 0.0650527 , -0.46450641,  0.0271535 , ..., -0.06801728,
             -0.28803362, -0.19992971]],
    ...
           [[ 0.05862936,  0.25054296,  0.20203712, ...,  0.00310132,
             -0.01485967, -0.41910238],
            [-0.3935155 , -0.08467963,  0.11154206, ..., -0.03933305,
              0.33010033,  0.41476575],
            [ 0.05355474,  0.0076312 ,  0.22766977, ...,  0.19327608,
              0.50529981,  0.12749553]],

           [[ 0.07702277,  0.1859731 ,  0.23088632, ..., -0.07534133,
              0.24853925,  0.33246404],
            [ 0.39805952, -0.07430519, -0.31650388, ..., -0.15413111,
             -0.33675503,  0.04041719],
            [ 0.1426665 , -0.338434  , -0.1313778 , ..., -0.06189314,
             -0.09310933,  0.12377815]],

           [[-0.19353171, -0.23552028,  0.01980099, ..., -0.54679349,
             -0.46117707,  0.13950187],
            [ 0.04052222, -0.02283056, -0.48356524, ...,  0.19968303,
              0.19137198, -0.28469921],
            [-0.01570818,  0.15139442,  0.19940191, ..., -0.05233263,
              0.07725894,  0.59608302]]])
    Coordinates:
      * trials   (trials) int64 1 1 1 1 1 1 1 1 1 1 1 1 ... 3 3 3 3 3 3 3 3 3 3 3 3
      * roi      (roi) <U1 'x' 'y' 'z'
      * times    (times) float64 -0.5 -0.495 -0.49 -0.485 ... 0.98 0.985 0.99 0.995
    Attributes:
        n_stim:    3
        n_std:     3
        ar_type:   osc_40_3
        stimulus:  [1 2 3]



plot the network


.. code-block:: default


    plt.figure(figsize=(5, 4))
    ss.plot_model()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_001.png
    :class: sphx-glr-single-img




plot the data


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='bwr')
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_002.png
    :class: sphx-glr-single-img




plot the power spectrum density (PSD)


.. code-block:: default


    plt.figure(figsize=(7, 8))
    ss.plot(cmap='Reds', psd=True)
    plt.tight_layout()
    plt.show()





.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_003.png
    :class: sphx-glr-single-img




Compute the Granger-Causality
-----------------------------

We then compute and plot the Granger Causality. From the plot you can see
that there's indeed an information transfer from X->Y and X->Z and, in
addition, an instantaneous connectivity between Y.Z


.. code-block:: default


    dt = 50
    lag = 5
    step = 2
    t0 = np.arange(lag, ar.shape[-1] - dt, step)
    gc = conn_covgc(ar, roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                    n_jobs=-1)

    # sphinx_gallery_thumbnail_number = 4
    plt.figure(figsize=(12, 10))
    ss.plot_covgc(gc)
    plt.tight_layout()
    plt.show()



.. image:: /auto_examples/armodel/images/sphx_glr_plot_ar_instantaneous_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]    100%|##########|  : 3/3 [00:00<00:00, 4399.62it/s]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  11.397 seconds)


.. _sphx_glr_download_auto_examples_armodel_plot_ar_instantaneous.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_ar_instantaneous.py <plot_ar_instantaneous.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_ar_instantaneous.ipynb <plot_ar_instantaneous.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
