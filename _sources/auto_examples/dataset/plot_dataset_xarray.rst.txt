.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_dataset_plot_dataset_xarray.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_dataset_plot_dataset_xarray.py:


Define an electrophysiological dataset using Xarray
===================================================

This example illustrates how to define a dataset using Xarray. If you don't
know this library, we can simplify by saying that it provides containers that
accept arrays but you can also labelize your dimensions. Another way of seeing
it, pandas is mostly made for tables (i.e 2D arrays) while Xarray provide
almost the same functionalities but for multi-dimensional arrays.



.. code-block:: default

    import numpy as np
    import pandas as pd

    from xarray import DataArray
    from frites.dataset import DatasetEphy

    import matplotlib.pyplot as plt







Create artificial data
----------------------

We start by creating some random data for several subjects. To do that, each
subject is going have a 3 dimensional array of shape
(n_epochs, n_channels, n_times). Then, all of the arrays are grouped together
in a list of length (n_subjects,)


.. code-block:: default


    n_subjects = 5
    n_epochs = 10
    n_channels = 5
    n_times = 100
    sf = 512

    x, ch = [], []
    for k in range(n_subjects):
        # generate single subject data
        x_suj = np.random.rand(n_epochs, n_channels, n_times)
        # generate some random channel names
        ch_suj = np.array([f"ch_{r}" for r in range(n_channels)])
        # concatenate in a list
        x.append(x_suj)
        ch.append(ch_suj)
    # finally lets create a time vector
    times = np.arange(n_times) / sf
    epochs = np.arange(n_epochs)







Xarray conversion to DataArray
------------------------------

Here, we convert the NumPy arrays to xarray.DataArray


.. code-block:: default


    x_xr = []
    for k in range(n_subjects):
        # DataArray conversion
        arr_xr = DataArray(x[k], dims=('epochs', 'channels', 'times'),
                           coords=(epochs, ch[k], times))
        # finally, replace it in the original list
        x_xr.append(arr_xr)
    print(x_xr[0])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (epochs: 10, channels: 5, times: 100)>
    array([[[7.53737486e-01, 7.70177056e-01, 4.98917923e-02, ...,
             5.46494074e-01, 8.54490655e-01, 5.76303649e-01],
            [9.08437745e-01, 3.56748465e-01, 4.65122430e-01, ...,
             9.03647613e-01, 7.09269866e-01, 1.18177108e-01],
            [6.96753322e-01, 2.36806874e-01, 7.78089292e-01, ...,
             6.13459404e-01, 2.46843592e-02, 4.36274580e-01],
            [2.67296487e-01, 1.38145267e-01, 3.63131481e-01, ...,
             5.49692339e-01, 5.29603366e-01, 9.84983265e-01],
            [4.45588883e-01, 7.16655338e-01, 1.32668093e-01, ...,
             6.17210447e-01, 4.61930673e-01, 4.80770123e-01]],

           [[2.91419242e-02, 3.26480626e-01, 3.00472218e-01, ...,
             1.90059676e-01, 1.41332101e-01, 1.61357717e-03],
            [9.68647435e-01, 9.40379016e-02, 5.30806266e-01, ...,
             1.53462473e-02, 6.60544705e-01, 9.66697233e-01],
            [6.79518283e-02, 5.11077855e-01, 6.29283277e-01, ...,
             7.50680113e-02, 9.52653574e-01, 4.58116142e-01],
            [4.50527992e-01, 8.92222867e-01, 9.13351749e-01, ...,
             7.40334139e-01, 2.96758186e-01, 6.37637575e-01],
            [9.41026012e-02, 5.18395982e-01, 9.98488112e-01, ...,
    ...
             9.41616045e-01, 5.31935347e-01, 2.12366656e-01],
            [8.26064244e-01, 8.97279117e-01, 4.79931655e-01, ...,
             5.53811749e-01, 9.56847751e-01, 2.01047410e-01],
            [2.18725513e-01, 1.85333634e-01, 6.30227543e-01, ...,
             1.60750612e-01, 4.58213616e-01, 6.21264614e-01],
            [6.92453971e-01, 6.76710934e-01, 7.66492446e-01, ...,
             7.94449951e-03, 3.95957697e-01, 4.15596842e-01],
            [1.55621924e-02, 4.09252944e-01, 6.49473237e-01, ...,
             4.74197173e-01, 6.70815699e-01, 2.34294382e-01]],

           [[3.74486550e-01, 3.72783622e-01, 1.50744599e-02, ...,
             4.36143149e-01, 4.46731747e-01, 7.17493306e-01],
            [3.99023452e-01, 6.87214813e-01, 9.94384869e-01, ...,
             1.42589742e-01, 3.22968852e-01, 7.08330566e-01],
            [6.65725482e-01, 2.83703692e-02, 3.55437342e-01, ...,
             2.50224170e-01, 6.22146711e-01, 2.49172361e-01],
            [5.20756950e-01, 8.36449334e-01, 7.84574775e-01, ...,
             4.80036077e-01, 3.99623541e-02, 4.50717856e-01],
            [4.85478738e-01, 7.65552578e-01, 3.05302456e-01, ...,
             3.91360756e-01, 9.65040938e-01, 7.52978769e-01]]])
    Coordinates:
      * epochs    (epochs) int64 0 1 2 3 4 5 6 7 8 9
      * channels  (channels) <U4 'ch_0' 'ch_1' 'ch_2' 'ch_3' 'ch_4'
      * times     (times) float64 0.0 0.001953 0.003906 ... 0.1895 0.1914 0.1934



Build the dataset
-----------------

Finally, we pass the data to the :class:`frites.dataset.DatasetEphy` class
in order to create the dataset


.. code-block:: default


    # here, we specify to the DatasetEphy class that the roi dimension is actually
    # called 'channels' in the DataArray and the times dimension is called 'times'
    dt = DatasetEphy(x_xr, roi='channels', times='times')
    print(dt)

    print('Time vector : ', dt.times)
    print('ROI (first subject) : ', dt.roi[0])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    -------------------------------------------------------------------------------
    number of (subjects, roi, time points) : (5, 5, 100)
    minimum number of subject per roi: -inf
    modality : electrophysiological
    data grouped by : subject
    copnormed : False
    version : 0.3.6
    -------------------------------------------------------------------------------
    Time vector :  [0.         0.00195312 0.00390625 0.00585938 0.0078125  0.00976562
     0.01171875 0.01367188 0.015625   0.01757812 0.01953125 0.02148438
     0.0234375  0.02539062 0.02734375 0.02929688 0.03125    0.03320312
     0.03515625 0.03710938 0.0390625  0.04101562 0.04296875 0.04492188
     0.046875   0.04882812 0.05078125 0.05273438 0.0546875  0.05664062
     0.05859375 0.06054688 0.0625     0.06445312 0.06640625 0.06835938
     0.0703125  0.07226562 0.07421875 0.07617188 0.078125   0.08007812
     0.08203125 0.08398438 0.0859375  0.08789062 0.08984375 0.09179688
     0.09375    0.09570312 0.09765625 0.09960938 0.1015625  0.10351562
     0.10546875 0.10742188 0.109375   0.11132812 0.11328125 0.11523438
     0.1171875  0.11914062 0.12109375 0.12304688 0.125      0.12695312
     0.12890625 0.13085938 0.1328125  0.13476562 0.13671875 0.13867188
     0.140625   0.14257812 0.14453125 0.14648438 0.1484375  0.15039062
     0.15234375 0.15429688 0.15625    0.15820312 0.16015625 0.16210938
     0.1640625  0.16601562 0.16796875 0.16992188 0.171875   0.17382812
     0.17578125 0.17773438 0.1796875  0.18164062 0.18359375 0.18554688
     0.1875     0.18945312 0.19140625 0.19335938]
    ROI (first subject) :  ['ch_0' 'ch_1' 'ch_2' 'ch_3' 'ch_4']



MultiIndex support
------------------

DataArray also supports multi-indexing of a single dimension.


.. code-block:: default


    # create a continuous regressor (prediction error, delta P etc.)
    dp = np.random.uniform(-1, 1, (n_epochs,))
    # create a discret variable (e.g experimental conditions)
    cond = np.array([0] * 5 + [1] * 5)

    # now, create a multi-index using pandas
    midx = pd.MultiIndex.from_arrays((dp, cond), names=('dp', 'blocks'))

    # convert again the original arrays but this time, the epoch dimension is going
    # to be a multi-index
    x_xr = []
    for k in range(n_subjects):
        # DataArray conversion
        arr_xr = DataArray(x[k], dims=('epochs', 'channels', 'times'),
                           coords=(midx, ch[k], times))
        # finally, replace it in the original list
        x_xr.append(arr_xr)
    print(x_xr[0])

    # finally, when you create your dataset you can also specify the y and z inputs
    # by providing their names in the DataArray
    dt = DatasetEphy(x_xr, roi='channels', times='times', y='dp', z='blocks')
    print(dt)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (epochs: 10, channels: 5, times: 100)>
    array([[[7.53737486e-01, 7.70177056e-01, 4.98917923e-02, ...,
             5.46494074e-01, 8.54490655e-01, 5.76303649e-01],
            [9.08437745e-01, 3.56748465e-01, 4.65122430e-01, ...,
             9.03647613e-01, 7.09269866e-01, 1.18177108e-01],
            [6.96753322e-01, 2.36806874e-01, 7.78089292e-01, ...,
             6.13459404e-01, 2.46843592e-02, 4.36274580e-01],
            [2.67296487e-01, 1.38145267e-01, 3.63131481e-01, ...,
             5.49692339e-01, 5.29603366e-01, 9.84983265e-01],
            [4.45588883e-01, 7.16655338e-01, 1.32668093e-01, ...,
             6.17210447e-01, 4.61930673e-01, 4.80770123e-01]],

           [[2.91419242e-02, 3.26480626e-01, 3.00472218e-01, ...,
             1.90059676e-01, 1.41332101e-01, 1.61357717e-03],
            [9.68647435e-01, 9.40379016e-02, 5.30806266e-01, ...,
             1.53462473e-02, 6.60544705e-01, 9.66697233e-01],
            [6.79518283e-02, 5.11077855e-01, 6.29283277e-01, ...,
             7.50680113e-02, 9.52653574e-01, 4.58116142e-01],
            [4.50527992e-01, 8.92222867e-01, 9.13351749e-01, ...,
             7.40334139e-01, 2.96758186e-01, 6.37637575e-01],
            [9.41026012e-02, 5.18395982e-01, 9.98488112e-01, ...,
    ...
             9.41616045e-01, 5.31935347e-01, 2.12366656e-01],
            [8.26064244e-01, 8.97279117e-01, 4.79931655e-01, ...,
             5.53811749e-01, 9.56847751e-01, 2.01047410e-01],
            [2.18725513e-01, 1.85333634e-01, 6.30227543e-01, ...,
             1.60750612e-01, 4.58213616e-01, 6.21264614e-01],
            [6.92453971e-01, 6.76710934e-01, 7.66492446e-01, ...,
             7.94449951e-03, 3.95957697e-01, 4.15596842e-01],
            [1.55621924e-02, 4.09252944e-01, 6.49473237e-01, ...,
             4.74197173e-01, 6.70815699e-01, 2.34294382e-01]],

           [[3.74486550e-01, 3.72783622e-01, 1.50744599e-02, ...,
             4.36143149e-01, 4.46731747e-01, 7.17493306e-01],
            [3.99023452e-01, 6.87214813e-01, 9.94384869e-01, ...,
             1.42589742e-01, 3.22968852e-01, 7.08330566e-01],
            [6.65725482e-01, 2.83703692e-02, 3.55437342e-01, ...,
             2.50224170e-01, 6.22146711e-01, 2.49172361e-01],
            [5.20756950e-01, 8.36449334e-01, 7.84574775e-01, ...,
             4.80036077e-01, 3.99623541e-02, 4.50717856e-01],
            [4.85478738e-01, 7.65552578e-01, 3.05302456e-01, ...,
             3.91360756e-01, 9.65040938e-01, 7.52978769e-01]]])
    Coordinates:
      * epochs    (epochs) MultiIndex
      - dp        (epochs) float64 0.6547 0.7201 0.1138 ... 0.3411 -0.5145 0.9587
      - blocks    (epochs) int64 0 0 0 0 0 1 1 1 1 1
      * channels  (channels) <U4 'ch_0' 'ch_1' 'ch_2' 'ch_3' 'ch_4'
      * times     (times) float64 0.0 0.001953 0.003906 ... 0.1895 0.1914 0.1934
    -------------------------------------------------------------------------------
    number of (subjects, roi, time points) : (5, 5, 100)
    minimum number of subject per roi: -inf
    modality : electrophysiological
    data grouped by : subject
    copnormed : False
    version : 0.3.6
    -------------------------------------------------------------------------------




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.130 seconds)


.. _sphx_glr_download_auto_examples_dataset_plot_dataset_xarray.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_dataset_xarray.py <plot_dataset_xarray.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_dataset_xarray.ipynb <plot_dataset_xarray.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
