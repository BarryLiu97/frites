.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[0.68870487, 0.43707435, 0.36755809, 0.50727118, 0.0292266 ,
            0.67905164, 0.48663095],
           [0.85753957, 0.63841677, 0.24357458, 0.34617912, 0.86101365,
            0.68941253, 0.60598892],
           [0.37827732, 0.36852445, 0.20019737, 0.9665962 , 0.2636741 ,
            0.45022594, 0.20376474],
           [0.19826797, 0.5969943 , 0.36597172, 0.01718104, 0.55487168,
            0.42050768, 0.15337501],
           [0.99093736, 0.22356769, 0.81692353, 0.49330178, 0.37459861,
            0.25659303, 0.64849713],
           [0.89758047, 0.19860816, 0.25028758, 0.96226637, 0.47449972,
            0.98925936, 0.70795164],
           [0.63432439, 0.49048337, 0.77984965, 0.53496391, 0.50665788,
            0.32145263, 0.31468853],
           [0.5142843 , 0.79991564, 0.92080581, 0.98916089, 0.09348411,
            0.78802561, 0.80887699],
           [0.45972777, 0.24355641, 0.8589229 , 0.18104536, 0.0614147 ,
            0.97222479, 0.10327886],
           [0.89171444, 0.16206661, 0.34158211, 0.02273396, 0.25030982,
            0.03542481, 0.16990399],
    ...
           [0.89344203, 0.85915604, 0.70774354, 0.81911874, 0.66426156,
            0.00367853, 0.72097237],
           [0.58164453, 0.23202792, 0.88493615, 0.02224602, 0.29966931,
            0.94672964, 0.61512206],
           [0.04549405, 0.87860802, 0.22938789, 0.29633917, 0.99669785,
            0.98546752, 0.50641769],
           [0.25566966, 0.05994571, 0.36541737, 0.11491802, 0.99514207,
            0.94667144, 0.29704508],
           [0.16646708, 0.64891079, 0.22802238, 0.45723425, 0.90472192,
            0.70405226, 0.51223554],
           [0.76421262, 0.65101361, 0.07619882, 0.90937869, 0.02533366,
            0.54950399, 0.61516931],
           [0.74583331, 0.02938142, 0.36119878, 0.81564041, 0.15895305,
            0.36446645, 0.27039427],
           [0.02880894, 0.82923811, 0.87528846, 0.31638037, 0.10965317,
            0.17797082, 0.02769719],
           [0.71768753, 0.58396416, 0.75118554, 0.03727016, 0.4304065 ,
            0.83742252, 0.01547283],
           [0.76166355, 0.24137631, 0.2261241 , 0.98226728, 0.44763136,
            0.90734343, 0.25380539]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.6887 0.4371 0.3676 ... 0.4476 0.9073 0.2538
        second   (times, roi) float64 0.2045 0.9615 0.499 ... 0.5562 0.5997 0.9485
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.115 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
