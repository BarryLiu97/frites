.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[2.65873670e-01, 8.47659393e-01, 7.95707616e-01, 3.85175257e-01,
            6.14751459e-01, 1.06117345e-01, 6.17938764e-01],
           [8.41082640e-01, 9.11525947e-01, 2.63171849e-01, 5.14642431e-01,
            1.18248279e-01, 6.11536334e-01, 4.51499881e-01],
           [7.14160791e-01, 3.37804179e-01, 4.59019163e-01, 3.90020325e-02,
            5.34975845e-01, 1.24069149e-01, 6.92940470e-01],
           [5.72066191e-01, 8.04322287e-01, 3.36437984e-01, 1.56910376e-01,
            2.26748475e-02, 2.56565723e-01, 9.91042395e-01],
           [5.40250466e-01, 7.46009752e-01, 6.77294419e-01, 3.91342752e-01,
            1.46205703e-01, 8.02909591e-02, 6.88965543e-01],
           [9.59814604e-01, 7.38411262e-01, 3.87044455e-01, 9.16374515e-01,
            1.29398474e-01, 9.86650860e-01, 1.21954859e-01],
           [2.53244358e-01, 3.60482941e-01, 1.92483704e-01, 2.19891719e-01,
            6.45768703e-01, 2.59652797e-01, 3.30047648e-01],
           [1.26948457e-01, 4.20896460e-01, 1.45404433e-01, 3.04022533e-01,
            1.65631485e-01, 5.20459224e-02, 5.88066748e-01],
           [9.25723954e-01, 3.42074950e-03, 5.84219517e-01, 5.60885029e-01,
            2.01104487e-01, 9.04787795e-01, 2.54478430e-01],
           [1.53842791e-01, 5.53829265e-01, 6.35910294e-01, 9.74660817e-01,
            4.70729674e-01, 4.09698788e-01, 8.80031164e-01],
    ...
           [4.91954271e-01, 6.68089314e-01, 4.71765215e-01, 3.64819871e-01,
            8.33107012e-01, 3.23249603e-02, 9.33563372e-01],
           [2.12819066e-01, 4.27493557e-01, 3.36426657e-01, 6.25423936e-01,
            5.09367092e-01, 1.00111455e-01, 6.57340259e-01],
           [2.70381669e-01, 3.45794634e-01, 5.49206961e-01, 9.75384290e-01,
            3.59257351e-01, 9.78022130e-01, 2.82142118e-02],
           [9.30036290e-01, 7.17476686e-01, 8.24097170e-01, 2.09117395e-01,
            8.80082176e-01, 5.28874595e-01, 9.67340187e-01],
           [7.23405687e-01, 9.08449153e-01, 6.61873699e-01, 1.36741196e-01,
            2.37896644e-01, 4.70066125e-01, 8.71110211e-01],
           [8.87301686e-01, 4.54382483e-01, 6.82326190e-01, 9.91127433e-01,
            3.12199942e-01, 1.22200925e-01, 4.95235528e-01],
           [9.15487724e-01, 6.34929486e-01, 7.45911586e-01, 5.43398132e-01,
            9.88182141e-01, 1.28451176e-01, 5.69387094e-01],
           [3.12671505e-01, 3.65885916e-01, 1.63407875e-01, 3.78366384e-01,
            8.69720993e-03, 2.69515056e-02, 5.20761367e-01],
           [4.58030812e-02, 5.01225063e-01, 7.56302287e-01, 2.45342289e-01,
            3.81012795e-01, 9.73411100e-01, 2.80813398e-02],
           [2.50648319e-01, 2.87821225e-01, 9.45663646e-02, 9.86562621e-01,
            5.15384692e-01, 4.65884856e-01, 6.74577701e-01]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.2659 0.8477 0.7957 ... 0.5154 0.4659 0.6746
        second   (times, roi) float64 0.2312 0.2637 0.1887 ... 0.4443 0.1906 0.3795
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.149 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
