.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[0.84522523, 0.27401115, 0.95813006, 0.75544158, 0.05979   ,
            0.93405621, 0.86996063],
           [0.71470402, 0.30654423, 0.24175273, 0.0100232 , 0.65556924,
            0.15289652, 0.72136992],
           [0.73345276, 0.49738602, 0.89035591, 0.45760251, 0.29880508,
            0.07472752, 0.23072175],
           [0.26930979, 0.95008458, 0.66108661, 0.82291768, 0.19113979,
            0.53485363, 0.58223385],
           [0.38564396, 0.7101684 , 0.51811183, 0.81624775, 0.23695557,
            0.72995149, 0.31933076],
           [0.43450731, 0.07595726, 0.19317851, 0.82988856, 0.32045792,
            0.72614759, 0.11797133],
           [0.28729249, 0.34410517, 0.70109597, 0.78325232, 0.77752437,
            0.70965343, 0.05266376],
           [0.54364821, 0.42456398, 0.57468011, 0.84783692, 0.57866088,
            0.35835803, 0.62541447],
           [0.5442651 , 0.44167375, 0.98301157, 0.02615429, 0.53583877,
            0.18843444, 0.61291654],
           [0.15527483, 0.77096901, 0.27186098, 0.35821471, 0.85718637,
            0.80218344, 0.98131649],
           [0.04145575, 0.86679227, 0.71769368, 0.7623239 , 0.18603661,
            0.37419243, 0.80489214],
           [0.90884538, 0.91599971, 0.18005821, 0.27988497, 0.07750612,
            0.28987083, 0.42544379],
           [0.51392125, 0.46864413, 0.77362016, 0.66846654, 0.85460364,
            0.15912628, 0.84892915],
           [0.76816662, 0.41755842, 0.44159295, 0.79130194, 0.23141748,
            0.72244145, 0.20766957],
           [0.57183645, 0.65743993, 0.03599696, 0.75588107, 0.3926403 ,
            0.59980237, 0.30033507],
           [0.05868578, 0.24823557, 0.47248232, 0.82868573, 0.92996166,
            0.16562649, 0.38775753],
           [0.08552473, 0.55322285, 0.71356086, 0.59368092, 0.53494643,
            0.24598499, 0.10998573],
           [0.51801034, 0.3283309 , 0.53974357, 0.44451926, 0.76548297,
            0.47168428, 0.93363533],
           [0.25397595, 0.91767246, 0.330568  , 0.58280879, 0.170636  ,
            0.27696824, 0.0154621 ],
           [0.02853578, 0.78405824, 0.76927862, 0.38621826, 0.27147419,
            0.03057833, 0.77297609],
           [0.45529524, 0.46725589, 0.16658665, 0.01075899, 0.99925093,
            0.3561397 , 0.32329273],
           [0.25166767, 0.63088444, 0.21787674, 0.57951168, 0.27168242,
            0.28623963, 0.42137274],
           [0.37647126, 0.55572309, 0.04328657, 0.36992525, 0.13517098,
            0.10783009, 0.20269679],
           [0.185054  , 0.72001099, 0.46212293, 0.07615877, 0.79092167,
            0.72683386, 0.73556665],
           [0.74716288, 0.86020402, 0.93245548, 0.29956501, 0.8468018 ,
            0.11998669, 0.12616995],
           [0.83929082, 0.26835025, 0.91552735, 0.19311192, 0.82190078,
            0.78524548, 0.88540643],
           [0.37574498, 0.43470438, 0.63526699, 0.06932819, 0.54418694,
            0.59256437, 0.27911812],
           [0.01814104, 0.0668702 , 0.38663031, 0.96077415, 0.42331255,
            0.47904206, 0.87519574],
           [0.01524895, 0.00578741, 0.47779358, 0.26068369, 0.16365913,
            0.62449382, 0.02251776],
           [0.38099942, 0.09615024, 0.62003853, 0.76994826, 0.05602902,
            0.79944612, 0.25073518]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.8452 0.274 0.9581 ... 0.05603 0.7994 0.2507
        second   (times, roi) float64 0.9921 0.6725 0.7683 ... 0.2186 0.1246 0.5282
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.129 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
