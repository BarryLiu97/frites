.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[7.73346849e-01, 4.40888279e-02, 4.70192473e-02, 7.78792041e-01,
            5.35539389e-01, 4.54536087e-01, 1.87153697e-01],
           [8.71621764e-01, 8.82231033e-01, 1.43240812e-01, 3.76772559e-01,
            8.95562386e-01, 1.64041905e-01, 1.29118707e-01],
           [9.04214364e-01, 6.34989145e-01, 2.30847078e-01, 8.73655261e-01,
            5.74967772e-01, 1.62677776e-01, 3.40484507e-01],
           [7.35565166e-01, 7.62736150e-01, 4.31646540e-01, 9.98373958e-01,
            5.35382710e-01, 4.35259756e-05, 4.22747024e-01],
           [7.87007437e-02, 1.45269841e-02, 2.46054247e-01, 9.43707518e-02,
            5.68869703e-01, 4.28884965e-01, 3.36174260e-01],
           [4.16691241e-01, 1.35585597e-01, 9.09907027e-01, 5.28654418e-01,
            9.18005747e-01, 6.82623665e-01, 1.86586023e-01],
           [3.96816948e-01, 5.43847303e-02, 4.10432804e-01, 4.91397423e-01,
            5.76948296e-01, 2.71460990e-01, 8.34952642e-01],
           [3.64450351e-01, 2.10027218e-01, 1.68695130e-01, 2.85117650e-01,
            6.38480984e-02, 6.85000444e-01, 1.43812550e-01],
           [3.05374012e-01, 4.60672167e-01, 5.22052298e-01, 9.24592401e-01,
            7.92346562e-01, 8.26692350e-01, 1.13046575e-01],
           [6.11397931e-01, 6.37143751e-01, 8.46535727e-01, 5.00727684e-01,
            9.55399389e-01, 9.07289000e-01, 2.64899605e-01],
    ...
           [5.07820586e-01, 6.01772157e-02, 4.24264942e-01, 5.15571718e-02,
            2.43575086e-02, 3.68210480e-02, 9.77484788e-01],
           [4.90232976e-01, 2.91665404e-01, 7.71848515e-03, 2.03971201e-02,
            9.13305482e-01, 7.82797380e-01, 6.36390883e-01],
           [2.32382800e-01, 6.89076943e-01, 3.35667728e-01, 6.15187777e-01,
            5.56825079e-01, 2.51699030e-01, 2.54391577e-01],
           [4.92831524e-01, 1.99594907e-01, 4.49183810e-01, 1.93780587e-01,
            7.45123050e-02, 6.08436393e-01, 9.19755342e-01],
           [1.84954780e-01, 3.85023690e-01, 3.65959338e-01, 2.93399102e-01,
            8.43530034e-02, 1.70222068e-02, 4.72525176e-01],
           [3.01835740e-01, 6.70228646e-01, 8.25430238e-01, 5.38428960e-01,
            6.17886976e-01, 4.93071181e-01, 7.84391362e-01],
           [4.06907918e-01, 2.12256551e-01, 6.52595844e-01, 3.87320984e-01,
            3.79698326e-01, 7.32682774e-01, 5.60177213e-01],
           [1.37208522e-01, 4.06954617e-01, 3.05110751e-01, 7.86487842e-01,
            9.93020756e-01, 9.06182780e-01, 2.54252507e-01],
           [4.53134168e-01, 1.29104681e-01, 4.31007026e-01, 4.23277821e-02,
            1.94286640e-01, 7.92322932e-01, 5.22400538e-01],
           [5.85291455e-01, 3.07926110e-01, 2.47336651e-01, 5.28055191e-01,
            3.65802831e-01, 4.17321113e-01, 8.78744936e-01]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.7733 0.04409 0.04702 ... 0.4173 0.8787
        second   (times, roi) float64 0.1635 0.4972 0.3853 ... 0.1972 0.03228 0.7818
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.144 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
