.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[0.5947096 , 0.30737232, 0.18513606, 0.37792084, 0.26058378,
            0.64583326, 0.87776745],
           [0.33928207, 0.17070868, 0.24501436, 0.17264109, 0.08177222,
            0.58720757, 0.29649322],
           [0.71612155, 0.98241259, 0.38458203, 0.6470403 , 0.14964626,
            0.35196691, 0.87229297],
           [0.22205263, 0.23876613, 0.66288847, 0.90885044, 0.21514951,
            0.20912483, 0.65675566],
           [0.07261618, 0.77340159, 0.80943245, 0.80886352, 0.39278402,
            0.73597586, 0.67745094],
           [0.43278872, 0.94265897, 0.58519971, 0.82601605, 0.68937949,
            0.8674968 , 0.6733285 ],
           [0.27230654, 0.13572147, 0.39496112, 0.65703839, 0.52535173,
            0.09260217, 0.41505006],
           [0.5899405 , 0.81889525, 0.20561842, 0.97521922, 0.34961928,
            0.96312774, 0.20219617],
           [0.7868698 , 0.86794113, 0.49088044, 0.65134084, 0.84532602,
            0.39503786, 0.88933038],
           [0.46734865, 0.38025723, 0.75181997, 0.4839112 , 0.7710586 ,
            0.83496676, 0.78538312],
    ...
           [0.61204987, 0.50373469, 0.41151842, 0.98578704, 0.57293093,
            0.16521167, 0.36090207],
           [0.91391525, 0.71044144, 0.12259406, 0.85871948, 0.60439664,
            0.46763865, 0.06513101],
           [0.40380841, 0.46148234, 0.48502058, 0.00820721, 0.10366469,
            0.46472075, 0.01121289],
           [0.9958985 , 0.69556318, 0.87419638, 0.4605412 , 0.20742539,
            0.31296053, 0.02116335],
           [0.13212341, 0.2388493 , 0.40210971, 0.20215619, 0.70785655,
            0.18626326, 0.78851202],
           [0.21163881, 0.10483518, 0.10377918, 0.81439045, 0.83454403,
            0.36837599, 0.46759574],
           [0.81112662, 0.05164599, 0.76109256, 0.69258332, 0.83450394,
            0.42351045, 0.73241713],
           [0.42051644, 0.20468876, 0.99373384, 0.94734649, 0.6326609 ,
            0.48741744, 0.48834988],
           [0.9988967 , 0.27703132, 0.01907551, 0.01949987, 0.01295146,
            0.37160685, 0.99808562],
           [0.2539147 , 0.63180678, 0.27187357, 0.03206467, 0.43974814,
            0.78294429, 0.5687564 ]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.5947 0.3074 0.1851 ... 0.4397 0.7829 0.5688
        second   (times, roi) float64 0.43 0.5199 0.6564 ... 0.2575 0.3407 0.7586
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.120 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
