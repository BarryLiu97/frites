.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[0.82146892, 0.46402565, 0.7937934 , 0.71576471, 0.63794782,
            0.83673139, 0.68730293],
           [0.92833937, 0.69847857, 0.19029224, 0.0472376 , 0.27798343,
            0.89236626, 0.86482881],
           [0.59950022, 0.49006664, 0.47881886, 0.93504839, 0.0049134 ,
            0.82297823, 0.35706231],
           [0.8404167 , 0.86235456, 0.93988212, 0.29041273, 0.4011384 ,
            0.15800562, 0.95800018],
           [0.11314897, 0.75618626, 0.95727637, 0.65243906, 0.04675244,
            0.90044139, 0.8771276 ],
           [0.14880237, 0.16264342, 0.28291243, 0.47685702, 0.54428734,
            0.78665963, 0.74541811],
           [0.3989553 , 0.32029381, 0.53977167, 0.93972499, 0.09901102,
            0.83723419, 0.93050749],
           [0.00718879, 0.25830167, 0.6608766 , 0.94212571, 0.23086516,
            0.16813021, 0.58253211],
           [0.58551451, 0.02236081, 0.79398865, 0.79736294, 0.28409372,
            0.41016842, 0.55908626],
           [0.96387999, 0.66831676, 0.72902627, 0.15532045, 0.94228508,
            0.38948689, 0.22446514],
    ...
           [0.42973464, 0.53505168, 0.76237325, 0.72817354, 0.73914397,
            0.57810089, 0.77592622],
           [0.63030469, 0.68807499, 0.85589849, 0.31285479, 0.89531058,
            0.38748256, 0.20911399],
           [0.13668235, 0.31783782, 0.72758099, 0.56056133, 0.74297318,
            0.62069995, 0.53541312],
           [0.01735817, 0.82970099, 0.65604933, 0.47936245, 0.1206662 ,
            0.10805177, 0.42234522],
           [0.38095509, 0.00332667, 0.57403111, 0.87988291, 0.99670636,
            0.71604226, 0.71174033],
           [0.33816515, 0.37028286, 0.64452595, 0.6247059 , 0.50404983,
            0.07717597, 0.23035027],
           [0.79797259, 0.94053673, 0.30850089, 0.86856704, 0.78681113,
            0.59574608, 0.878475  ],
           [0.66476796, 0.43003096, 0.07529159, 0.03702907, 0.75868006,
            0.4735931 , 0.31866861],
           [0.66435589, 0.07962151, 0.85883755, 0.62921245, 0.96233814,
            0.34147969, 0.1829778 ],
           [0.52375772, 0.10178467, 0.47375883, 0.71905733, 0.98806301,
            0.85048013, 0.10836423]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.8215 0.464 0.7938 ... 0.9881 0.8505 0.1084
        second   (times, roi) float64 0.4904 0.1905 0.5772 ... 0.2912 0.327 0.8237
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.118 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
