.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[9.44721262e-02, 6.37810999e-01, 3.13039444e-01, 3.87677468e-01,
            4.85165521e-01, 7.65349902e-01, 9.27834196e-01],
           [2.47603446e-01, 9.83949370e-01, 6.25018211e-01, 2.71569845e-01,
            7.16923879e-01, 9.69559508e-01, 9.48386696e-01],
           [9.30506951e-01, 4.81723640e-01, 8.95228791e-02, 7.97799998e-01,
            4.66243008e-01, 3.11056464e-01, 5.80205205e-01],
           [8.25623317e-01, 7.30821232e-01, 7.74751304e-02, 9.43400632e-01,
            9.98985842e-01, 9.06023450e-02, 6.99726618e-01],
           [5.69695083e-01, 5.21541277e-01, 7.20762762e-01, 9.32483188e-01,
            5.04222175e-01, 7.05826590e-01, 6.54876955e-01],
           [3.68693133e-01, 2.13836949e-01, 6.16950480e-01, 2.23197048e-01,
            3.97597843e-01, 4.56832478e-01, 1.57089742e-01],
           [8.66894882e-01, 7.91493356e-01, 3.81957714e-01, 5.09653424e-01,
            9.21269854e-01, 7.76589911e-01, 6.95535543e-01],
           [7.36688366e-01, 1.82686995e-01, 3.71296456e-01, 5.93440498e-02,
            4.72491531e-01, 5.86777203e-01, 1.69594488e-01],
           [6.22842861e-01, 3.45694475e-01, 8.75486562e-02, 1.22998470e-01,
            6.88769283e-01, 8.49900059e-01, 3.24535211e-01],
           [4.93727554e-02, 4.86953669e-01, 5.70392486e-01, 3.15907576e-01,
            2.69199363e-01, 9.12545178e-01, 6.64852209e-02],
    ...
           [2.79561343e-01, 7.76526808e-01, 9.53685740e-01, 9.35141486e-01,
            8.77237712e-02, 3.34190657e-01, 3.07976132e-01],
           [7.60959294e-02, 6.82980098e-01, 1.81468352e-01, 1.66658461e-01,
            1.45230773e-01, 8.96390753e-01, 8.48309755e-01],
           [8.79504452e-01, 5.45262945e-01, 8.64498342e-01, 6.13926943e-01,
            1.44406337e-01, 8.19198755e-01, 8.04715121e-01],
           [8.84990443e-01, 1.29861626e-01, 5.65181863e-01, 2.50970643e-01,
            7.63294211e-01, 8.15179493e-01, 5.41539921e-02],
           [8.36739287e-01, 9.22593156e-02, 3.26446762e-01, 2.81427737e-02,
            4.08802112e-01, 1.51942745e-01, 5.62718081e-01],
           [5.38396082e-01, 8.70963047e-01, 5.17181770e-01, 8.09938023e-01,
            2.88987661e-01, 8.96518237e-01, 9.33990684e-01],
           [4.92216055e-01, 9.19489813e-01, 1.49465065e-01, 1.54070975e-02,
            2.37260498e-01, 7.67055553e-01, 9.28270119e-01],
           [6.74786934e-01, 4.51719344e-01, 9.17749627e-01, 5.34571620e-01,
            3.35047648e-01, 7.91768384e-01, 7.24408660e-01],
           [1.20153716e-01, 7.36253064e-01, 8.22248223e-01, 8.04831844e-01,
            7.27826068e-01, 9.47531217e-01, 5.26469434e-01],
           [1.03432746e-01, 6.02189080e-01, 9.03752339e-01, 7.39680780e-01,
            2.70263781e-01, 6.03303315e-01, 5.80994557e-01]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.09447 0.6378 0.313 ... 0.2703 0.6033 0.581
        second   (times, roi) float64 0.8954 0.14 0.4537 ... 0.9613 0.0716 0.9624
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.116 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
