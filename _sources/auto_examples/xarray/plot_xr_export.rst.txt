.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[0.19355296, 0.4979892 , 0.81183151, 0.44792164, 0.8260332 ,
            0.8021857 , 0.7423906 ],
           [0.65932337, 0.6705651 , 0.85983522, 0.2487724 , 0.75064121,
            0.13506197, 0.17758783],
           [0.50482439, 0.29613951, 0.23518555, 0.52699076, 0.9543499 ,
            0.26216529, 0.06816323],
           [0.45029108, 0.15226411, 0.59124773, 0.42032551, 0.62603825,
            0.81693142, 0.41917716],
           [0.42032909, 0.79149156, 0.66492879, 0.58936964, 0.08344408,
            0.07325271, 0.11826491],
           [0.48392446, 0.6696751 , 0.38137587, 0.43573531, 0.65513918,
            0.55763581, 0.12025779],
           [0.82664744, 0.96731702, 0.35471175, 0.64581667, 0.88560383,
            0.09222218, 0.91778277],
           [0.89872882, 0.53418765, 0.69913012, 0.83504971, 0.76401238,
            0.6591188 , 0.57221425],
           [0.68412319, 0.40990461, 0.37592162, 0.9983983 , 0.35698223,
            0.42943336, 0.26858279],
           [0.71645882, 0.78794542, 0.25514603, 0.64253167, 0.34431145,
            0.3809109 , 0.13090222],
    ...
           [0.13440515, 0.40769902, 0.92490297, 0.25057592, 0.57850491,
            0.0939685 , 0.87021805],
           [0.09192322, 0.70943156, 0.31550398, 0.51962039, 0.50679528,
            0.90027192, 0.79717176],
           [0.60753345, 0.31633765, 0.61292182, 0.60048512, 0.70847187,
            0.9260936 , 0.40355191],
           [0.66659108, 0.05835767, 0.81257967, 0.23545449, 0.37713227,
            0.00339232, 0.21111577],
           [0.82424277, 0.70592567, 0.03868019, 0.57105231, 0.88698572,
            0.74289558, 0.1572213 ],
           [0.65807197, 0.86208193, 0.92268629, 0.91776791, 0.36684715,
            0.64985455, 0.6696789 ],
           [0.67792169, 0.27818602, 0.62547427, 0.56057836, 0.97757731,
            0.28600993, 0.24139434],
           [0.47812428, 0.19792825, 0.63780086, 0.96061646, 0.79234207,
            0.22277285, 0.89640717],
           [0.90805005, 0.92107337, 0.36702685, 0.11559898, 0.03512546,
            0.30538135, 0.12117583],
           [0.89311422, 0.33378263, 0.49274745, 0.61547282, 0.53207069,
            0.67682063, 0.22155697]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.1936 0.498 0.8118 ... 0.5321 0.6768 0.2216
        second   (times, roi) float64 0.6005 0.1256 0.5167 ... 0.2346 0.778 0.6716
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.180 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
