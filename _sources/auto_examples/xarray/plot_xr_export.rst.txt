.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[4.86595870e-01, 8.50898520e-01, 9.71520591e-01, 5.98642418e-01,
            2.60682857e-05, 2.22103237e-02, 3.31391218e-02],
           [7.48761367e-01, 2.69224788e-01, 4.05367971e-01, 7.89854177e-01,
            6.27778046e-01, 3.71260437e-01, 3.78541730e-01],
           [2.46223055e-01, 6.10887065e-01, 2.62939296e-01, 1.31271238e-02,
            6.24738764e-01, 7.39444062e-01, 7.89778632e-01],
           [6.76867045e-01, 4.27790982e-01, 1.32585778e-01, 2.24799829e-01,
            1.80497998e-01, 1.23628411e-01, 8.57491992e-01],
           [6.90707103e-02, 3.58322594e-01, 1.90162818e-01, 6.48262120e-01,
            7.68025283e-01, 7.60780144e-01, 2.75093885e-01],
           [4.73224973e-01, 5.76281374e-01, 2.07327929e-01, 9.11636922e-01,
            8.06062883e-01, 6.95647665e-01, 1.95586409e-01],
           [2.10691058e-01, 5.69781353e-01, 5.71681249e-01, 4.01899046e-01,
            9.33277222e-01, 6.34816576e-01, 6.86624857e-01],
           [4.20793521e-01, 8.65473082e-01, 6.21466577e-01, 6.70635750e-01,
            1.46718588e-01, 6.08107115e-01, 7.61250676e-01],
           [4.37710917e-01, 3.81176493e-01, 2.66579357e-01, 7.59135023e-02,
            3.18267227e-01, 1.82108875e-01, 3.64929635e-01],
           [3.02593261e-01, 4.43498742e-01, 1.96624182e-01, 4.35550888e-01,
            2.91403687e-02, 1.79593126e-01, 4.99602804e-01],
    ...
           [7.92235094e-01, 9.69477899e-01, 6.84385213e-01, 2.19215250e-01,
            6.98878065e-01, 6.80280104e-01, 1.26067955e-01],
           [2.74582284e-01, 5.35550492e-01, 4.53407529e-01, 9.40472652e-01,
            8.02827222e-01, 2.89602521e-02, 8.83346498e-01],
           [5.06958466e-01, 8.01544813e-01, 8.46078271e-01, 7.20186039e-01,
            5.90781003e-01, 2.75679980e-01, 9.89545762e-01],
           [3.49325313e-01, 5.62259649e-01, 8.31794679e-01, 6.13529537e-01,
            1.25031388e-01, 7.30624331e-01, 2.39518541e-01],
           [3.77227939e-01, 7.36353889e-01, 4.30136553e-01, 7.86094231e-01,
            6.37133092e-01, 5.52060164e-01, 3.04599193e-01],
           [3.03245387e-01, 1.20294158e-01, 9.07716291e-02, 7.86393713e-01,
            7.37347355e-02, 1.40296986e-01, 2.82181617e-01],
           [9.94878005e-01, 9.95514261e-01, 3.13163983e-01, 5.71347082e-01,
            7.43387763e-01, 6.13608625e-01, 9.68403890e-01],
           [8.67237287e-01, 7.09956858e-01, 9.01517912e-02, 7.65172802e-01,
            6.90493703e-01, 7.34489182e-01, 6.31629706e-01],
           [6.73768980e-01, 1.27802896e-01, 7.14887943e-01, 5.10800679e-03,
            5.94834440e-01, 7.17147687e-01, 6.84136450e-01],
           [2.63392142e-01, 7.97232904e-01, 8.87237441e-01, 5.79785018e-01,
            5.75976653e-01, 6.78535171e-01, 9.59200871e-01]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.4866 0.8509 0.9715 ... 0.576 0.6785 0.9592
        second   (times, roi) float64 0.06863 0.0678 0.7669 ... 0.03001 0.1565
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.122 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
