.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[0.29165485, 0.57293097, 0.75081518, 0.03740487, 0.41009658,
            0.96358504, 0.57611134],
           [0.93559858, 0.92870401, 0.49817055, 0.20210005, 0.79497667,
            0.39690746, 0.97222492],
           [0.02610657, 0.3283804 , 0.78762142, 0.42579376, 0.26447682,
            0.33401543, 0.31979196],
           [0.83694291, 0.03081564, 0.32097059, 0.19345591, 0.55835344,
            0.62128396, 0.56667831],
           [0.71287849, 0.10289594, 0.04058778, 0.25082495, 0.26046306,
            0.84612377, 0.43549832],
           [0.90226825, 0.35002951, 0.98533433, 0.53453182, 0.88001045,
            0.86500654, 0.05946173],
           [0.83306138, 0.89325047, 0.46217498, 0.14423412, 0.66429116,
            0.43777116, 0.67736053],
           [0.94285968, 0.3673037 , 0.95117877, 0.17399658, 0.07336753,
            0.95388167, 0.75246744],
           [0.77230791, 0.85202334, 0.15821772, 0.14103884, 0.749076  ,
            0.74460488, 0.11136082],
           [0.43545978, 0.5713384 , 0.70215538, 0.04840255, 0.88217556,
            0.14654163, 0.64814706],
    ...
           [0.02377053, 0.6761796 , 0.23144244, 0.27302511, 0.29604457,
            0.73638972, 0.65120485],
           [0.14897237, 0.96203369, 0.25934286, 0.83698903, 0.09301173,
            0.89369616, 0.10784655],
           [0.09346898, 0.58214014, 0.57690681, 0.18342547, 0.81186848,
            0.20403281, 0.38117572],
           [0.52354017, 0.94306434, 0.49110916, 0.6565708 , 0.76513898,
            0.53080358, 0.65333544],
           [0.49384313, 0.45250136, 0.55979704, 0.6192779 , 0.95254299,
            0.0942743 , 0.94276016],
           [0.20980721, 0.31845224, 0.78270921, 0.39161093, 0.93046975,
            0.66201674, 0.13512161],
           [0.42483849, 0.37574289, 0.71018888, 0.39811295, 0.49905371,
            0.92396246, 0.60837769],
           [0.53698229, 0.99344567, 0.51975781, 0.54913991, 0.46710246,
            0.76559747, 0.13538462],
           [0.08668128, 0.92509115, 0.13681404, 0.64696046, 0.87372291,
            0.61629219, 0.99932578],
           [0.64595045, 0.85309337, 0.88676587, 0.93032329, 0.3513847 ,
            0.31128409, 0.32582488]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.2917 0.5729 0.7508 ... 0.3514 0.3113 0.3258
        second   (times, roi) float64 0.001655 0.4731 0.7404 ... 0.4106 0.605 0.4291
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.132 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
