.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[2.15522045e-02, 5.31421493e-01, 6.04047705e-02, 6.83803366e-01,
            6.17540218e-01, 4.61063344e-01, 3.67637125e-01],
           [4.69184036e-03, 5.64610284e-02, 9.86987583e-01, 9.25333929e-02,
            9.90562501e-01, 8.24736987e-01, 8.65411682e-01],
           [1.77811983e-01, 4.95103153e-01, 7.81523214e-01, 8.38834467e-01,
            8.51279949e-01, 3.53567627e-01, 9.82553297e-02],
           [4.35005752e-01, 4.45444581e-01, 9.39500925e-01, 6.22137755e-01,
            3.81944656e-01, 1.22657294e-01, 2.55401717e-01],
           [1.00503660e-01, 3.67066678e-01, 4.42124646e-01, 1.57445834e-01,
            3.15119000e-01, 7.18442485e-01, 2.84887095e-01],
           [6.21139230e-01, 6.54926453e-02, 8.65777187e-01, 5.12855361e-01,
            3.15123792e-01, 1.66734652e-01, 4.19878872e-01],
           [7.06022969e-01, 8.53992165e-01, 1.26650987e-01, 1.56812653e-02,
            8.25453492e-01, 2.98697482e-01, 8.90415502e-02],
           [4.65237667e-01, 8.73491543e-02, 9.86640341e-01, 2.08152336e-01,
            5.68107409e-01, 6.19849558e-01, 8.57162669e-02],
           [2.22384804e-01, 4.10477812e-01, 6.50481418e-01, 5.45934002e-01,
            6.27340577e-01, 9.05787650e-01, 2.88771473e-01],
           [4.24045617e-01, 9.25123078e-01, 8.70097529e-01, 3.80702157e-02,
            3.77737498e-01, 9.69278900e-01, 7.72914942e-01],
    ...
           [7.56750939e-01, 9.33833620e-01, 9.45480793e-02, 8.89253463e-02,
            1.44953926e-01, 8.83125485e-01, 4.47760509e-01],
           [4.73018563e-01, 9.68060652e-01, 6.04065109e-01, 5.79313748e-01,
            9.51067261e-01, 5.51570267e-01, 8.72362421e-01],
           [9.97034645e-01, 7.05141516e-01, 3.99682354e-01, 4.47587907e-02,
            8.30915566e-01, 2.90163805e-02, 7.26750163e-01],
           [9.38422787e-01, 7.03885054e-01, 3.81793162e-01, 1.63727753e-02,
            3.28664865e-02, 7.50352541e-01, 9.40970318e-01],
           [8.05349761e-01, 4.66387177e-01, 9.14874874e-01, 3.52779211e-01,
            9.74375418e-01, 3.67349293e-01, 6.60146614e-01],
           [4.18562640e-01, 5.94251329e-01, 6.77480114e-01, 7.24307400e-01,
            5.35022795e-01, 1.57736872e-01, 7.91904072e-01],
           [4.08084824e-01, 2.50513616e-01, 5.80843615e-01, 9.18964825e-01,
            6.56507338e-01, 4.50120440e-02, 4.52702560e-01],
           [9.00747709e-01, 2.26627872e-01, 8.47015169e-01, 7.13179891e-01,
            2.59062442e-03, 6.12330880e-01, 4.51400167e-01],
           [6.17959533e-02, 6.50341896e-04, 7.39897381e-01, 5.80398672e-01,
            1.64125678e-01, 9.29192843e-01, 5.37801942e-01],
           [2.05554003e-02, 1.18075559e-01, 2.86505428e-01, 9.94971487e-01,
            9.90650838e-01, 4.11342483e-01, 3.06942243e-01]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.02155 0.5314 0.0604 ... 0.9907 0.4113 0.3069
        second   (times, roi) float64 0.33 0.1008 0.9201 ... 0.06774 0.6922 0.1288
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.120 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
