.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[0.59763131, 0.56272411, 0.72529539, 0.96263405, 0.33259416,
            0.55037688, 0.78247113],
           [0.03603291, 0.52120217, 0.91233603, 0.42150048, 0.8627294 ,
            0.17181918, 0.19365009],
           [0.05129344, 0.41058769, 0.68218464, 0.78849809, 0.82819303,
            0.87344202, 0.65858532],
           [0.88496583, 0.61218347, 0.22392423, 0.41342446, 0.50572872,
            0.01680713, 0.04133512],
           [0.67470653, 0.59722706, 0.2648523 , 0.39804668, 0.98557551,
            0.57329397, 0.21781975],
           [0.25203034, 0.81109435, 0.95732038, 0.42201022, 0.58588228,
            0.57947649, 0.65597882],
           [0.22587604, 0.20886824, 0.49319408, 0.83427   , 0.41017877,
            0.56777457, 0.67412987],
           [0.36131337, 0.08730602, 0.28652417, 0.09232054, 0.15418957,
            0.81889558, 0.62801737],
           [0.31581314, 0.47575433, 0.85702356, 0.44512735, 0.56605111,
            0.96904137, 0.44186755],
           [0.83343516, 0.35137198, 0.77992672, 0.48050759, 0.91395613,
            0.20836719, 0.07166202],
    ...
           [0.2317765 , 0.11823819, 0.53766715, 0.17633156, 0.78528735,
            0.1175412 , 0.94224296],
           [0.74403872, 0.17775767, 0.33641308, 0.7478991 , 0.65517884,
            0.48279436, 0.02215116],
           [0.01491029, 0.44767138, 0.53478132, 0.43165248, 0.62975497,
            0.30540294, 0.89422045],
           [0.42003833, 0.91377436, 0.01221401, 0.96842687, 0.11289599,
            0.04394304, 0.32799263],
           [0.85870036, 0.69456209, 0.4668132 , 0.55206129, 0.02996495,
            0.62738002, 0.28652866],
           [0.61680888, 0.15882351, 0.7489005 , 0.14865261, 0.01314655,
            0.0610216 , 0.79215023],
           [0.17143296, 0.75867166, 0.00105375, 0.80813633, 0.06708344,
            0.67265507, 0.76090664],
           [0.58040386, 0.48329924, 0.63699394, 0.24109879, 0.01540443,
            0.41827291, 0.66807306],
           [0.35994358, 0.59058313, 0.37149328, 0.88690774, 0.17224501,
            0.20481842, 0.63524359],
           [0.26633351, 0.08705246, 0.59915094, 0.67650546, 0.85326237,
            0.63017858, 0.08719617]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.5976 0.5627 0.7253 ... 0.8533 0.6302 0.0872
        second   (times, roi) float64 0.116 0.5239 0.2349 ... 0.9974 0.9726 0.2231
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.111 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
