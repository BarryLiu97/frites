.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[0.94281867, 0.89231597, 0.09498296, 0.03356977, 0.66060659,
            0.94947393, 0.91050254],
           [0.71193473, 0.56790718, 0.94496391, 0.7088838 , 0.21648876,
            0.19417768, 0.25902159],
           [0.86716376, 0.65619257, 0.50084911, 0.39349717, 0.01372499,
            0.44783325, 0.27658126],
           [0.6896555 , 0.69817777, 0.4693437 , 0.81848381, 0.86343131,
            0.36444826, 0.04863046],
           [0.79637057, 0.41545517, 0.71467176, 0.3833853 , 0.96928662,
            0.30789723, 0.35796644],
           [0.60344494, 0.40453609, 0.19571397, 0.87717281, 0.92598696,
            0.95670593, 0.03932759],
           [0.82419803, 0.59051917, 0.58812147, 0.66124671, 0.40049261,
            0.01796246, 0.93537459],
           [0.23075134, 0.84162014, 0.47359552, 0.19387541, 0.53254214,
            0.97844737, 0.93403424],
           [0.01654441, 0.56655417, 0.85177343, 0.69804444, 0.58356405,
            0.60334587, 0.87665699],
           [0.12258778, 0.90161747, 0.93879025, 0.07258742, 0.49687116,
            0.59075276, 0.01845132],
    ...
           [0.88089553, 0.45466807, 0.70371771, 0.01013665, 0.90136249,
            0.53261361, 0.70434702],
           [0.03340868, 0.45555683, 0.41563129, 0.83727923, 0.74760915,
            0.98140518, 0.21143176],
           [0.90881377, 0.48229271, 0.97919622, 0.90276828, 0.69765072,
            0.53171979, 0.20979995],
           [0.70732173, 0.37768909, 0.73008346, 0.03490054, 0.86961796,
            0.62818426, 0.61329355],
           [0.29396954, 0.37078818, 0.25479399, 0.45674588, 0.60267115,
            0.761759  , 0.62169526],
           [0.77255095, 0.89653788, 0.98984084, 0.47981078, 0.07296299,
            0.16379618, 0.88297007],
           [0.47153113, 0.66299376, 0.11928821, 0.29492565, 0.2530864 ,
            0.21854804, 0.14398292],
           [0.32153356, 0.25761301, 0.7939901 , 0.99206888, 0.35977249,
            0.40814861, 0.30339516],
           [0.52195483, 0.11581495, 0.19301591, 0.44934542, 0.17170102,
            0.54257096, 0.40556684],
           [0.05978468, 0.83041492, 0.18049979, 0.10085457, 0.17550924,
            0.3889928 , 0.12078127]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.9428 0.8923 0.09498 ... 0.1755 0.389 0.1208
        second   (times, roi) float64 0.8068 0.2914 0.3503 ... 0.2776 0.1726 0.4227
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.129 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
