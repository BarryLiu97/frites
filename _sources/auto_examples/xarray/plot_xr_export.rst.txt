.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[0.64598789, 0.64992032, 0.54185859, 0.56235238, 0.3292392 ,
            0.30026416, 0.91302701],
           [0.94842788, 0.87793803, 0.96142923, 0.51667332, 0.99339338,
            0.36842151, 0.54181028],
           [0.5678743 , 0.90225499, 0.00618437, 0.65323522, 0.6495688 ,
            0.74613205, 0.6631912 ],
           [0.98139674, 0.4376513 , 0.83967756, 0.13229895, 0.73634857,
            0.98202618, 0.60112116],
           [0.05962194, 0.19222049, 0.3027565 , 0.27221743, 0.36752629,
            0.13163478, 0.97691839],
           [0.18163798, 0.77495339, 0.02139343, 0.41291461, 0.05449824,
            0.85448451, 0.77215373],
           [0.89494536, 0.49668575, 0.22026374, 0.72212533, 0.96237106,
            0.93370679, 0.3591178 ],
           [0.68179254, 0.75493779, 0.01186807, 0.29919711, 0.46275464,
            0.30886376, 0.48652412],
           [0.11378753, 0.19490762, 0.62008094, 0.95144394, 0.43778448,
            0.80318423, 0.19092718],
           [0.88253972, 0.7998389 , 0.36870387, 0.54989418, 0.08631533,
            0.75936824, 0.1980304 ],
    ...
           [0.57083098, 0.84175047, 0.0022137 , 0.24597697, 0.70564614,
            0.04521289, 0.89638385],
           [0.90958027, 0.99150436, 0.65499933, 0.31245467, 0.96696366,
            0.43926941, 0.73099189],
           [0.30322166, 0.99537955, 0.7119904 , 0.44871181, 0.19884628,
            0.64701626, 0.77580736],
           [0.25557447, 0.61726547, 0.69297859, 0.50577442, 0.01644048,
            0.4668274 , 0.27713943],
           [0.55874979, 0.1391066 , 0.39332451, 0.48233881, 0.1257437 ,
            0.6017007 , 0.99448858],
           [0.53903045, 0.47584869, 0.42930752, 0.63281964, 0.67820121,
            0.03892578, 0.44313924],
           [0.87216634, 0.11370274, 0.46679861, 0.1756866 , 0.81729489,
            0.04500307, 0.69672417],
           [0.87569941, 0.57743794, 0.64737535, 0.88811871, 0.58124817,
            0.21783753, 0.84425082],
           [0.62777739, 0.45033233, 0.04324354, 0.81938338, 0.09062426,
            0.38702871, 0.81901452],
           [0.68935966, 0.29970102, 0.39401082, 0.08994659, 0.41692044,
            0.58314657, 0.1693524 ]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.646 0.6499 0.5419 ... 0.4169 0.5831 0.1694
        second   (times, roi) float64 0.4393 0.1942 0.784 ... 0.7559 0.6922 0.06785
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.118 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
