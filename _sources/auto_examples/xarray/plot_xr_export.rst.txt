.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[5.34639291e-01, 6.03273603e-01, 9.91859156e-01, 5.18315656e-02,
            8.37015077e-01, 3.39996001e-01, 3.46378109e-02],
           [3.32404632e-02, 8.64743165e-01, 6.27833146e-01, 6.51937002e-01,
            3.63437070e-01, 1.65868503e-01, 1.65512443e-01],
           [5.08909798e-01, 6.39473243e-01, 8.10531742e-01, 2.54591900e-01,
            9.28205986e-01, 2.64551034e-01, 3.54228956e-01],
           [7.26438964e-01, 3.26131379e-01, 8.42144732e-01, 7.87172514e-01,
            1.21597869e-01, 6.26780880e-01, 3.79410173e-01],
           [3.03974760e-01, 2.20203945e-01, 7.21447352e-01, 6.02142634e-01,
            1.87920770e-01, 6.83330422e-01, 2.63319753e-02],
           [8.05599357e-01, 2.48243793e-01, 4.51442398e-01, 9.77216617e-01,
            2.57563804e-01, 3.91559165e-01, 5.99899022e-01],
           [3.18890990e-01, 9.74575833e-01, 6.55293137e-01, 5.45337244e-01,
            4.73307011e-01, 7.76250193e-01, 9.18726128e-01],
           [9.82876425e-02, 9.86899521e-01, 8.92485479e-01, 5.04244955e-01,
            8.24180740e-01, 6.29536791e-04, 7.50632688e-01],
           [9.17433000e-01, 2.91904793e-01, 7.04331911e-02, 4.55525619e-01,
            7.79456721e-01, 3.04999721e-01, 2.68163925e-02],
           [2.18532295e-01, 6.55949169e-01, 4.21800884e-02, 7.41921024e-01,
            3.86640286e-01, 8.09608346e-01, 9.72523398e-02],
    ...
           [7.92070825e-01, 9.16397762e-01, 7.41334990e-01, 2.19122732e-01,
            3.35726957e-01, 5.90404373e-01, 6.24998020e-01],
           [5.33395874e-01, 7.18401383e-01, 1.91167991e-02, 5.45285398e-01,
            2.34878355e-01, 8.12691762e-01, 3.85749386e-01],
           [7.27376891e-01, 2.71007583e-01, 9.77703992e-01, 6.59069535e-01,
            5.88990411e-01, 7.62978595e-02, 9.47687002e-01],
           [3.32132882e-01, 9.31078877e-01, 5.64023120e-01, 1.77827753e-01,
            6.81021190e-02, 5.42826406e-01, 6.41820197e-01],
           [4.59922355e-01, 7.43951871e-01, 8.14659562e-01, 2.43459644e-01,
            2.61850391e-01, 3.40294546e-02, 7.46546148e-01],
           [2.98391285e-01, 9.22746257e-01, 5.42843703e-01, 9.99381864e-01,
            7.90247551e-01, 4.98200865e-01, 4.54672948e-02],
           [7.69854653e-01, 6.48889549e-01, 2.40272757e-01, 8.93341549e-01,
            6.85793899e-01, 3.28427844e-01, 6.72415388e-01],
           [5.98313484e-01, 8.25314405e-01, 1.95512395e-01, 3.86115387e-01,
            1.26530396e-01, 3.33850974e-02, 6.85668807e-01],
           [3.50353086e-02, 1.16024871e-01, 7.07102487e-01, 2.03379280e-01,
            6.87163307e-02, 8.39661985e-01, 4.15843391e-01],
           [4.74933756e-01, 7.30482203e-01, 9.54367827e-01, 7.95476021e-01,
            6.06201006e-01, 2.09492512e-01, 9.31602146e-01]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.5346 0.6033 0.9919 ... 0.6062 0.2095 0.9316
        second   (times, roi) float64 0.5344 0.8127 0.5275 ... 0.7018 0.9688 0.05133
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.118 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
