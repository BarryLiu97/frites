.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[6.85235748e-02, 6.28164203e-01, 8.27246560e-01, 4.28670935e-01,
            1.84695209e-01, 5.85457446e-01, 6.19396205e-01],
           [9.04648184e-01, 1.00788804e-01, 7.87011655e-01, 5.72681511e-01,
            2.97793465e-01, 3.59299326e-01, 4.97551516e-01],
           [8.14458021e-01, 2.36039305e-01, 1.01151316e-03, 8.73111489e-01,
            1.12614301e-02, 4.00966504e-01, 9.95015317e-01],
           [9.36290197e-01, 3.43697408e-02, 6.06966527e-01, 8.05774296e-01,
            1.08774742e-01, 2.46528369e-01, 6.58375892e-01],
           [5.53589008e-03, 9.26333902e-01, 1.91634972e-01, 2.34826546e-01,
            2.64837902e-01, 1.42662432e-03, 6.81711778e-02],
           [5.75301215e-01, 3.29655337e-01, 3.66706021e-01, 8.89452127e-01,
            3.99696307e-01, 4.56296610e-01, 7.48092587e-01],
           [6.49746047e-01, 8.36710732e-01, 8.73242745e-01, 5.87992257e-01,
            6.87378215e-01, 8.25154033e-01, 9.07123661e-01],
           [1.81996007e-01, 1.12871479e-01, 4.26669018e-02, 4.67712021e-01,
            9.41657482e-01, 3.14041763e-01, 5.53365738e-01],
           [4.42693522e-01, 9.17845660e-01, 6.52832575e-01, 9.97982301e-01,
            9.50894205e-01, 5.56551426e-01, 7.17963761e-01],
           [3.66014477e-01, 3.76121404e-01, 2.84207964e-01, 5.12841188e-01,
            5.20821227e-01, 6.53284411e-01, 2.85305946e-01],
    ...
           [7.41309011e-02, 5.61389479e-01, 4.61515230e-01, 4.52520164e-01,
            1.94088806e-01, 1.82578724e-01, 6.63398556e-01],
           [4.24922376e-01, 1.98278967e-01, 8.66372536e-01, 2.20246007e-01,
            1.09438998e-01, 4.78972122e-01, 1.41203882e-01],
           [1.69411816e-01, 4.02103840e-01, 8.50263122e-01, 2.91005068e-03,
            7.84529504e-01, 1.57190671e-01, 6.53491355e-02],
           [1.94948156e-02, 7.80610512e-01, 7.23927909e-01, 6.33754519e-01,
            1.63220679e-02, 7.13996010e-02, 1.73098599e-01],
           [5.31364165e-01, 6.09340891e-01, 2.71636722e-01, 8.21985122e-01,
            1.90902989e-01, 6.61373410e-01, 4.68429616e-01],
           [1.26913514e-01, 2.85371485e-01, 6.29115963e-02, 1.37145583e-01,
            6.99211329e-01, 4.70177550e-01, 7.60581863e-01],
           [7.61527149e-01, 9.00160682e-01, 6.63308424e-02, 8.70179533e-02,
            2.77743178e-01, 1.14944025e-01, 1.02307381e-01],
           [1.41153809e-01, 4.88191194e-01, 1.96390018e-01, 2.34749354e-01,
            9.59187999e-01, 8.87914243e-01, 2.31907289e-01],
           [7.63074465e-02, 9.51505814e-01, 3.72146806e-01, 6.08407553e-01,
            2.30568131e-01, 4.71755417e-01, 8.33062690e-01],
           [2.10842716e-01, 9.64729624e-01, 5.59496554e-04, 2.94777149e-01,
            7.04270035e-01, 7.14038308e-01, 8.09633532e-01]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.06852 0.6282 0.8272 ... 0.7043 0.714 0.8096
        second   (times, roi) float64 0.5237 0.1119 0.9869 ... 0.1127 0.2633 0.2874
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.132 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
