.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[0.82855072, 0.29771269, 0.85831045, 0.35764111, 0.05528838,
            0.82047362, 0.32841386],
           [0.99836345, 0.6964277 , 0.46208257, 0.70019775, 0.59127478,
            0.19596053, 0.65684624],
           [0.25859591, 0.20939839, 0.04642482, 0.24543522, 0.29924981,
            0.5391591 , 0.00369929],
           [0.59875864, 0.91082746, 0.89928647, 0.10154443, 0.52113933,
            0.28462673, 0.78947979],
           [0.57791205, 0.54357716, 0.79661997, 0.7627472 , 0.76269647,
            0.56868687, 0.32134225],
           [0.89430132, 0.84338299, 0.78455807, 0.57753333, 0.61218852,
            0.76890214, 0.9450769 ],
           [0.22967191, 0.92760705, 0.43593731, 0.39963972, 0.68261224,
            0.63885943, 0.51265804],
           [0.00395132, 0.70649791, 0.96552886, 0.96540317, 0.59775232,
            0.62400976, 0.88955499],
           [0.01137479, 0.58080877, 0.22782618, 0.38374121, 0.18589005,
            0.82283945, 0.41274027],
           [0.45983655, 0.59467307, 0.07518883, 0.25913889, 0.35898255,
            0.20349145, 0.50358432],
    ...
           [0.48476945, 0.16531302, 0.7950559 , 0.60409515, 0.24581087,
            0.8789088 , 0.77532636],
           [0.54262556, 0.9704229 , 0.56878009, 0.79033912, 0.49774164,
            0.87035974, 0.75280018],
           [0.63634734, 0.30306593, 0.8140422 , 0.33027646, 0.71912339,
            0.20255632, 0.46088294],
           [0.67297951, 0.13284099, 0.44077856, 0.25682832, 0.46080185,
            0.66164864, 0.2296423 ],
           [0.92588528, 0.09519797, 0.2434003 , 0.86935579, 0.6931599 ,
            0.60537608, 0.93864481],
           [0.05508636, 0.90696817, 0.28591126, 0.09319288, 0.08975798,
            0.42805415, 0.75136937],
           [0.40647053, 0.04287147, 0.61812088, 0.64547189, 0.1384803 ,
            0.42763457, 0.09808521],
           [0.04579651, 0.88136085, 0.07728141, 0.54808185, 0.28394845,
            0.85743498, 0.47709896],
           [0.15871354, 0.26469622, 0.00361434, 0.48835099, 0.70191478,
            0.54143684, 0.29964842],
           [0.47491287, 0.4179521 , 0.62010783, 0.19420047, 0.54217938,
            0.99285678, 0.64173557]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.8286 0.2977 0.8583 ... 0.5422 0.9929 0.6417
        second   (times, roi) float64 0.1201 0.7406 0.5675 ... 0.1691 0.6359 0.35
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.126 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
