.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[0.23169865, 0.20446521, 0.27712001, 0.35129092, 0.60721117,
            0.31219722, 0.91064505],
           [0.6122092 , 0.58688484, 0.13036664, 0.37386559, 0.00423448,
            0.42125831, 0.60051737],
           [0.56403079, 0.92255408, 0.50444976, 0.47667711, 0.9675661 ,
            0.91243454, 0.798167  ],
           [0.80450724, 0.00918862, 0.88462477, 0.84100002, 0.32246886,
            0.92924641, 0.39811419],
           [0.55557042, 0.71015544, 0.52515503, 0.85349766, 0.70211222,
            0.51354642, 0.4445523 ],
           [0.07127818, 0.40902298, 0.43209279, 0.23451056, 0.61972732,
            0.55639007, 0.23510675],
           [0.60742033, 0.20554201, 0.97187894, 0.54978856, 0.97998295,
            0.75542307, 0.91986302],
           [0.09309711, 0.36807821, 0.32282751, 0.78074133, 0.16200324,
            0.44771807, 0.36070733],
           [0.52442869, 0.23321396, 0.29557486, 0.92347559, 0.76482743,
            0.11650786, 0.55135335],
           [0.50094012, 0.72071735, 0.31610923, 0.44932313, 0.06631972,
            0.37091818, 0.15595249],
    ...
           [0.33687467, 0.16144816, 0.26323581, 0.47958751, 0.50273609,
            0.72502045, 0.27666037],
           [0.83519205, 0.15004436, 0.85787515, 0.10411214, 0.31525304,
            0.55332177, 0.41203033],
           [0.5913381 , 0.76372819, 0.07614493, 0.48906734, 0.40691443,
            0.67554712, 0.37597348],
           [0.05643031, 0.94542669, 0.31558922, 0.07665242, 0.94162723,
            0.07699552, 0.26621867],
           [0.82744796, 0.10447628, 0.56986835, 0.92045823, 0.11541566,
            0.78806751, 0.89406288],
           [0.47692775, 0.3079388 , 0.96155624, 0.85442034, 0.74131084,
            0.53354482, 0.10691502],
           [0.33717082, 0.59437322, 0.34677651, 0.04987192, 0.99911806,
            0.70296981, 0.79637937],
           [0.54548067, 0.4057319 , 0.57466168, 0.11565828, 0.19787512,
            0.46054684, 0.28020734],
           [0.96164009, 0.38744637, 0.57884121, 0.47924371, 0.1180917 ,
            0.70187671, 0.33568035],
           [0.82131005, 0.72353182, 0.49218093, 0.78241047, 0.35737361,
            0.31610136, 0.82120812]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.2317 0.2045 0.2771 ... 0.3574 0.3161 0.8212
        second   (times, roi) float64 0.38 0.4846 0.8762 ... 0.3407 0.6344 0.7879
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.118 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
