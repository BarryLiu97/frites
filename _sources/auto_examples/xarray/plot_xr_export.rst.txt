.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[4.25602598e-03, 6.61549678e-01, 1.14026628e-01, 2.24747877e-01,
            3.00190352e-01, 4.67361476e-01, 5.55808482e-01],
           [1.12661254e-01, 4.93645300e-01, 9.24936660e-01, 5.78106332e-01,
            9.29153478e-01, 8.84125475e-01, 7.59556857e-01],
           [9.12758844e-02, 9.75079307e-01, 8.39452660e-01, 5.85130822e-01,
            3.97507750e-02, 9.49070327e-01, 1.90736991e-03],
           [2.48369260e-02, 9.69318350e-01, 5.59000353e-01, 2.68182191e-01,
            7.26429330e-02, 9.12107623e-01, 3.71530918e-01],
           [9.19736211e-01, 2.42257973e-01, 8.69463366e-01, 4.80368464e-02,
            3.75451187e-01, 8.62556286e-01, 8.46908778e-01],
           [6.61467023e-03, 8.75689089e-01, 7.04034253e-01, 3.38665126e-01,
            1.02060340e-01, 5.40801507e-01, 8.73582798e-01],
           [2.16626805e-01, 1.77843258e-01, 8.92997584e-01, 4.09419987e-01,
            5.94183149e-01, 7.55544088e-01, 7.21643468e-01],
           [8.39247913e-01, 9.10593936e-01, 9.10148676e-01, 7.75452912e-01,
            4.34205215e-02, 4.26757836e-02, 4.70977748e-01],
           [8.47978842e-01, 7.11432367e-01, 4.18992879e-01, 3.53396300e-01,
            8.21449524e-02, 4.49454426e-01, 7.07265905e-02],
           [6.96380892e-01, 8.80094908e-01, 8.69149406e-01, 7.78002869e-01,
            4.83819774e-01, 7.68061129e-01, 9.35555562e-01],
    ...
           [6.16840773e-01, 9.35394923e-01, 1.90109127e-02, 7.04005320e-01,
            8.87516033e-01, 2.62476675e-01, 8.02058898e-01],
           [7.84052698e-01, 8.68225888e-01, 9.47249494e-01, 7.83954765e-01,
            2.12517628e-01, 2.87667881e-01, 4.25175405e-01],
           [7.98983750e-01, 6.80155482e-01, 1.31179725e-01, 1.79576617e-01,
            6.92318356e-01, 2.24537906e-01, 3.12183873e-01],
           [4.43570450e-01, 1.11826693e-01, 8.51152564e-01, 5.94595790e-01,
            8.16045526e-01, 7.53975282e-01, 6.89853577e-02],
           [7.30294531e-01, 1.54899263e-01, 2.45062764e-01, 4.47617763e-01,
            3.58881942e-01, 6.15449589e-02, 9.95441855e-01],
           [9.08051331e-01, 8.06059955e-01, 2.18507376e-01, 6.19999040e-01,
            6.70612556e-01, 2.63037523e-01, 5.70992764e-01],
           [9.52604160e-01, 1.70760421e-01, 8.48906464e-01, 6.66108192e-01,
            9.02460744e-01, 9.88221873e-01, 7.36048331e-01],
           [3.38501738e-01, 8.05284044e-01, 9.87161260e-01, 6.23117110e-01,
            7.19825079e-01, 8.25225787e-01, 8.20966497e-01],
           [4.06630812e-01, 6.67798626e-02, 5.54134988e-01, 1.80439107e-06,
            3.42390308e-01, 3.26723196e-01, 4.12270717e-01],
           [5.94584924e-01, 6.28027645e-01, 6.06097017e-01, 3.82332532e-01,
            2.86180918e-01, 3.72387475e-01, 3.73927348e-01]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.004256 0.6615 0.114 ... 0.2862 0.3724 0.3739
        second   (times, roi) float64 0.4464 0.08046 0.9588 ... 0.4937 0.5878 0.9598
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.118 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
