.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[1.17272416e-01, 7.48717544e-01, 8.39076793e-01, 2.18868777e-01,
            2.83350235e-01, 8.96035218e-01, 6.91752185e-01],
           [4.40510067e-01, 3.09199077e-01, 6.75239181e-01, 2.35037647e-01,
            6.37358018e-01, 1.38501427e-01, 8.91325170e-01],
           [4.18115328e-01, 8.29195206e-01, 6.58901343e-01, 4.51181934e-02,
            5.17415054e-01, 8.41834119e-01, 8.49302482e-02],
           [1.62646291e-01, 5.03973797e-01, 4.20926395e-01, 4.20858642e-01,
            6.18681887e-01, 9.46508145e-01, 3.72750324e-01],
           [4.65599959e-01, 9.66089800e-01, 3.59267768e-01, 7.94774877e-01,
            7.59219873e-02, 4.78795828e-01, 5.09434015e-02],
           [5.72648510e-01, 8.93504684e-01, 3.10025414e-01, 7.37452285e-01,
            3.60299554e-01, 7.25932226e-01, 9.78117264e-01],
           [1.84557232e-01, 3.18918287e-01, 1.13776623e-01, 7.03274227e-01,
            5.93902692e-02, 7.82589942e-01, 8.73722938e-01],
           [8.41764532e-01, 9.65417627e-01, 3.92899841e-01, 2.78371642e-02,
            6.62199219e-01, 4.45520276e-01, 7.97886453e-01],
           [6.74938756e-01, 1.14186793e-01, 5.25598284e-01, 3.31362886e-01,
            3.60080587e-01, 4.12073115e-02, 9.96370261e-01],
           [7.90267594e-01, 1.22784183e-01, 3.17817014e-01, 4.37647802e-01,
            1.14957097e-01, 3.78209942e-01, 6.56761472e-01],
    ...
           [6.35383117e-01, 4.13477158e-03, 6.10641505e-01, 9.42469504e-01,
            1.06342930e-02, 1.04364149e-01, 8.18433908e-03],
           [3.35735921e-01, 8.81016635e-02, 7.15828030e-01, 1.53233923e-01,
            4.25195327e-01, 7.88930059e-01, 6.06736301e-01],
           [5.67842346e-01, 6.04535111e-02, 9.06522006e-01, 8.75272297e-01,
            4.08834857e-01, 1.03963106e-01, 8.49660983e-01],
           [4.70419068e-01, 3.19039605e-01, 2.62986095e-01, 2.20284585e-01,
            1.93828419e-01, 1.88508317e-01, 2.64698795e-01],
           [7.81400311e-01, 2.86811070e-01, 1.88187348e-01, 7.87248736e-01,
            2.33021182e-01, 8.82350753e-01, 9.33638932e-01],
           [6.00992550e-01, 6.99489710e-01, 4.18755942e-01, 3.82773344e-01,
            8.21807088e-01, 1.06289161e-01, 2.01132332e-01],
           [2.79116176e-01, 4.87287141e-01, 9.00220400e-01, 8.06961390e-04,
            7.31196744e-01, 4.83645070e-01, 9.91605515e-01],
           [4.06236932e-01, 7.85493152e-01, 9.62133087e-01, 4.50920481e-01,
            5.95205091e-01, 3.66861960e-01, 2.85689622e-03],
           [7.51055774e-01, 1.34186263e-01, 6.39389324e-02, 6.67730623e-01,
            2.18347461e-02, 6.51125266e-01, 9.85798638e-02],
           [9.05333197e-01, 4.39049765e-01, 1.70868763e-01, 6.20906020e-02,
            3.18903417e-02, 8.08242022e-01, 4.65336793e-01]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.1173 0.7487 0.8391 ... 0.03189 0.8082 0.4653
        second   (times, roi) float64 0.9618 0.07057 0.2464 ... 0.7067 0.5966 0.654
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.121 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
