.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[0.38469682, 0.83938721, 0.24492235, 0.31850234, 0.12839793,
            0.18089549, 0.69780866],
           [0.98824096, 0.30143567, 0.32716408, 0.63281866, 0.34661921,
            0.75688305, 0.63780116],
           [0.01992921, 0.36702597, 0.86715364, 0.3220746 , 0.58892865,
            0.59703046, 0.571109  ],
           [0.02720333, 0.44828664, 0.43327185, 0.18823447, 0.10505589,
            0.08936141, 0.85611134],
           [0.01032695, 0.69670734, 0.91480744, 0.96835043, 0.20433628,
            0.50266612, 0.25797359],
           [0.86980086, 0.45812586, 0.63287104, 0.62045288, 0.28390474,
            0.17220587, 0.98393738],
           [0.68188761, 0.91484177, 0.16899118, 0.24475531, 0.30196452,
            0.85369972, 0.74614515],
           [0.52558741, 0.93886393, 0.07286644, 0.434803  , 0.97170641,
            0.57511238, 0.13197913],
           [0.29744524, 0.95308304, 0.32217273, 0.22527064, 0.24321893,
            0.60766185, 0.64704897],
           [0.13200757, 0.07848811, 0.70615355, 0.86070835, 0.72507201,
            0.90197074, 0.34790312],
    ...
           [0.0355287 , 0.9597682 , 0.81641391, 0.75494219, 0.75249337,
            0.38631421, 0.25544777],
           [0.43091849, 0.9383472 , 0.37908759, 0.81102716, 0.92721609,
            0.00741322, 0.14562164],
           [0.99896873, 0.58713788, 0.55958987, 0.79438621, 0.24337529,
            0.30097258, 0.50804708],
           [0.42784606, 0.22464289, 0.65288495, 0.66112642, 0.76184605,
            0.54577774, 0.73140602],
           [0.66807367, 0.80329339, 0.28958842, 0.12981968, 0.41401564,
            0.12852401, 0.97535341],
           [0.45841792, 0.70610342, 0.18830343, 0.35166405, 0.02434888,
            0.40655256, 0.31533632],
           [0.225572  , 0.88862981, 0.30476145, 0.49378507, 0.19843244,
            0.58676153, 0.62565657],
           [0.98231894, 0.86292348, 0.16568565, 0.64628409, 0.05790888,
            0.80635957, 0.27358729],
           [0.36179903, 0.19447722, 0.27804022, 0.35948173, 0.78648531,
            0.84191712, 0.50701784],
           [0.96023736, 0.74726489, 0.81242485, 0.52751708, 0.87418888,
            0.29545224, 0.52491505]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.3847 0.8394 0.2449 ... 0.8742 0.2955 0.5249
        second   (times, roi) float64 0.8739 0.1535 0.716 ... 0.7555 0.3364 0.8225
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.132 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
