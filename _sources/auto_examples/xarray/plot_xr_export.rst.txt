.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[0.83391221, 0.80002275, 0.35831595, 0.56013679, 0.35506749,
            0.40122363, 0.9287424 ],
           [0.99605462, 0.98562769, 0.75601832, 0.94792104, 0.52708026,
            0.66913501, 0.96522817],
           [0.47910314, 0.33507523, 0.0396074 , 0.13956961, 0.87495102,
            0.43020499, 0.33248566],
           [0.40421456, 0.76608965, 0.36189521, 0.34944912, 0.91823485,
            0.57178597, 0.81175664],
           [0.47473445, 0.86877887, 0.88800446, 0.28014595, 0.79947317,
            0.98079331, 0.28275396],
           [0.25811777, 0.40387051, 0.44633233, 0.50377553, 0.39742855,
            0.10506131, 0.81091602],
           [0.3488444 , 0.01762402, 0.00127501, 0.92456832, 0.838267  ,
            0.58297195, 0.02548089],
           [0.5656958 , 0.00221481, 0.59367305, 0.47643564, 0.20269764,
            0.72998427, 0.81473343],
           [0.19405086, 0.51157297, 0.77178918, 0.45935673, 0.98332213,
            0.21185139, 0.07552656],
           [0.48284632, 0.9112746 , 0.8636337 , 0.49371633, 0.8279721 ,
            0.93631351, 0.45259782],
    ...
           [0.48843907, 0.24264695, 0.45079477, 0.80808851, 0.51284337,
            0.78340177, 0.26631772],
           [0.57204677, 0.20383833, 0.24380959, 0.61564727, 0.59603467,
            0.34983884, 0.95650976],
           [0.88602488, 0.81351031, 0.08372161, 0.22443734, 0.91956869,
            0.30421453, 0.97666916],
           [0.30939509, 0.01098483, 0.10712209, 0.09611652, 0.78753003,
            0.33579785, 0.93514792],
           [0.6281209 , 0.69008011, 0.30607883, 0.60000316, 0.84874406,
            0.88676293, 0.81457458],
           [0.63400107, 0.92576263, 0.8807862 , 0.36722444, 0.96690962,
            0.12185905, 0.27137727],
           [0.00422267, 0.79814663, 0.00129295, 0.96259234, 0.20395231,
            0.26581756, 0.97618548],
           [0.87630706, 0.94448282, 0.04571983, 0.07331373, 0.71317535,
            0.25681788, 0.49336765],
           [0.29846465, 0.78500942, 0.26971669, 0.96866885, 0.99445701,
            0.49098603, 0.82489585],
           [0.22066514, 0.79612679, 0.33399434, 0.53393566, 0.42764267,
            0.58964386, 0.13864865]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.8339 0.8 0.3583 ... 0.4276 0.5896 0.1386
        second   (times, roi) float64 0.5345 0.5037 0.5445 ... 0.2324 0.5296 0.5888
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.116 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
