.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[3.85927306e-01, 3.07970122e-01, 7.77713462e-01, 5.15547388e-01,
            2.00717573e-01, 4.40669121e-01, 9.91362673e-01],
           [6.87965099e-01, 9.32857928e-01, 8.78248421e-01, 9.90132769e-01,
            3.03811000e-01, 5.68038461e-02, 1.64053879e-01],
           [4.98219820e-01, 7.40022487e-01, 2.76968675e-01, 2.51023094e-01,
            8.62642101e-01, 9.07158395e-02, 7.30820540e-01],
           [9.13151550e-01, 9.03754929e-01, 1.14279290e-01, 4.86779761e-01,
            1.10375183e-01, 3.90624379e-01, 8.47903075e-01],
           [6.08834466e-01, 6.96843169e-01, 1.01286942e-01, 2.35574508e-01,
            9.16556772e-01, 7.66669423e-01, 2.14025233e-01],
           [3.40244704e-01, 7.35685261e-01, 4.25943924e-01, 6.98226330e-01,
            6.59169339e-01, 9.92117746e-01, 7.41757660e-01],
           [2.81875482e-01, 7.11326031e-01, 8.05195722e-01, 6.99688835e-01,
            5.11873720e-01, 1.27129921e-01, 9.56344422e-01],
           [6.38947460e-02, 3.33636533e-02, 5.12379981e-01, 7.89007955e-01,
            3.08425583e-01, 9.21673853e-01, 4.76324443e-01],
           [9.49381557e-01, 3.11475202e-01, 1.87589966e-01, 5.60007297e-01,
            4.76933340e-01, 7.28010586e-02, 8.11974873e-01],
           [3.79835940e-01, 9.60936305e-01, 6.71423538e-01, 2.73314188e-01,
            8.87888073e-01, 8.40501251e-01, 4.75634629e-02],
    ...
           [9.36060344e-01, 8.41403435e-02, 8.05937744e-01, 8.89283545e-01,
            1.80313817e-01, 8.22918026e-01, 5.24640254e-01],
           [6.48167470e-01, 2.35850989e-01, 8.62014692e-01, 2.20029145e-01,
            3.48410707e-01, 4.86624657e-01, 1.41658598e-01],
           [6.23959534e-01, 8.02008240e-01, 8.59120470e-02, 2.56483850e-01,
            4.30348782e-01, 6.40533514e-01, 7.87864424e-01],
           [2.86450775e-02, 7.99789248e-01, 9.54970401e-01, 1.10129576e-01,
            4.19620279e-01, 2.14827115e-01, 2.70799172e-01],
           [5.60385895e-01, 6.57660584e-01, 2.70360524e-01, 1.04062559e-01,
            6.64096676e-01, 2.69732393e-01, 4.15618521e-01],
           [3.89992178e-01, 9.79811597e-01, 9.39721604e-01, 7.25424647e-01,
            6.84226535e-01, 6.88272427e-01, 6.40259514e-01],
           [3.19192263e-01, 2.24215371e-01, 1.00955829e-01, 4.49874370e-02,
            5.75149566e-01, 8.55737565e-01, 8.37414051e-01],
           [5.78078747e-01, 5.00436171e-01, 4.06654316e-01, 4.72362791e-01,
            2.75440301e-01, 7.97313237e-01, 8.64475397e-01],
           [5.28444171e-01, 3.68609929e-01, 7.96740975e-01, 7.96749826e-01,
            8.15721730e-01, 2.48895272e-01, 9.09664855e-01],
           [2.78262448e-02, 3.89359069e-01, 8.32740444e-03, 2.78887481e-01,
            3.07712172e-01, 4.80304306e-01, 7.42060007e-01]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.3859 0.308 0.7777 ... 0.3077 0.4803 0.7421
        second   (times, roi) float64 0.4266 0.6746 0.4599 ... 0.2834 0.9863 0.5063
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.229 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
