.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[0.51136406, 0.85812381, 0.83899437, 0.24992346, 0.66079934,
            0.5340458 , 0.28284123],
           [0.63548213, 0.07696167, 0.92600053, 0.31023273, 0.56600695,
            0.82915373, 0.32435531],
           [0.08379101, 0.16494581, 0.81425554, 0.86756942, 0.31920011,
            0.96359668, 0.91574007],
           [0.12268461, 0.63195091, 0.57541378, 0.92713799, 0.31962218,
            0.69220339, 0.52663561],
           [0.78107264, 0.39407536, 0.37179727, 0.77476756, 0.63873072,
            0.13091911, 0.53955179],
           [0.20089786, 0.67224599, 0.96237185, 0.05583294, 0.86707047,
            0.66571229, 0.40746328],
           [0.56116314, 0.64282605, 0.31059475, 0.1889905 , 0.88323341,
            0.95420957, 0.67361201],
           [0.75714779, 0.7480315 , 0.381343  , 0.98118589, 0.54965587,
            0.51391166, 0.10743775],
           [0.90901853, 0.07809508, 0.60976638, 0.07100137, 0.01238981,
            0.51617975, 0.46726641],
           [0.10900171, 0.9881003 , 0.19210871, 0.75069266, 0.26423385,
            0.25342683, 0.59195636],
    ...
           [0.37703888, 0.75930549, 0.6280411 , 0.22287192, 0.30683886,
            0.9470822 , 0.00768602],
           [0.94349718, 0.36018391, 0.47903877, 0.25168898, 0.29430742,
            0.03737366, 0.45989751],
           [0.45307227, 0.80143385, 0.06755888, 0.30186963, 0.61203164,
            0.11098854, 0.88949128],
           [0.0157769 , 0.98650684, 0.8985533 , 0.00950253, 0.17352001,
            0.4928058 , 0.82513722],
           [0.02788712, 0.06039262, 0.34249864, 0.33319016, 0.00854292,
            0.94441968, 0.08135387],
           [0.10492594, 0.26382294, 0.89031647, 0.97960639, 0.43635102,
            0.49878003, 0.27421536],
           [0.96260954, 0.00701482, 0.92141363, 0.74201683, 0.37133805,
            0.07286652, 0.63109476],
           [0.66586344, 0.27898197, 0.14801623, 0.42120274, 0.7475532 ,
            0.11562725, 0.68203105],
           [0.06364801, 0.54188003, 0.96875479, 0.54617634, 0.71882425,
            0.69959096, 0.37468763],
           [0.61114834, 0.29046477, 0.48603226, 0.83569784, 0.13137489,
            0.40024721, 0.34258328]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.5114 0.8581 0.839 ... 0.1314 0.4002 0.3426
        second   (times, roi) float64 0.8305 0.5549 0.1835 ... 0.7146 0.6061 0.523
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.131 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
