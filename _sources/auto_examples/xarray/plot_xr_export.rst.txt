.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[1.23457375e-01, 8.22230052e-01, 8.81801002e-03, 9.64886768e-01,
            4.28958156e-01, 6.00490862e-01, 7.45758320e-01],
           [1.41492146e-01, 4.80782842e-02, 3.27527476e-01, 3.66275727e-01,
            8.93778882e-01, 8.53155147e-01, 6.63742629e-01],
           [6.05668641e-01, 7.93428076e-02, 1.58360355e-01, 7.93975671e-01,
            7.45589084e-01, 9.41443953e-02, 7.01706161e-01],
           [4.72955190e-01, 3.44125971e-01, 8.94758459e-01, 6.55074523e-01,
            8.28296972e-01, 4.01422219e-01, 2.42610723e-01],
           [9.25494433e-01, 4.84693259e-01, 4.32701656e-01, 4.33286632e-01,
            5.87970687e-01, 3.82053207e-01, 2.81862315e-01],
           [1.35609517e-01, 8.55900697e-01, 3.53821392e-01, 3.14639094e-01,
            4.86883710e-01, 6.84585138e-01, 1.77766593e-01],
           [7.98245649e-01, 1.76766830e-01, 4.45220693e-01, 1.46270793e-01,
            9.12227636e-01, 2.06664733e-01, 3.20953112e-01],
           [9.98832334e-01, 6.62453912e-01, 3.70651949e-01, 7.87177477e-01,
            6.37644068e-01, 8.36351113e-01, 5.09438278e-01],
           [6.30284063e-01, 8.17029450e-02, 8.10753425e-01, 3.61523399e-01,
            2.82001671e-01, 5.39624785e-01, 8.86016603e-02],
           [6.87078148e-01, 9.22442808e-01, 8.40559553e-02, 6.97487813e-01,
            9.53785145e-01, 4.52004479e-01, 6.07382611e-01],
           [5.81443297e-01, 4.08202511e-01, 6.15177979e-01, 8.67323729e-01,
            1.83974780e-01, 4.97079997e-01, 2.80595917e-01],
           [4.59736896e-01, 7.55536440e-01, 2.06587200e-01, 5.19011668e-01,
            6.97916197e-01, 7.54675061e-01, 4.11147039e-01],
           [4.41677588e-01, 8.03494941e-01, 8.31720765e-01, 2.39431469e-01,
            7.70347446e-01, 2.16015691e-01, 3.92656190e-01],
           [7.63517712e-01, 9.50881605e-02, 3.14721291e-01, 7.12406601e-01,
            6.50504131e-01, 3.92069278e-01, 3.31822296e-01],
           [6.40522296e-01, 9.48129521e-01, 5.09848043e-01, 6.65885032e-01,
            6.62290800e-01, 8.82969375e-01, 4.14369575e-01],
           [2.34799724e-01, 1.43646427e-01, 3.91147751e-01, 7.27572135e-01,
            3.74970737e-01, 3.79858193e-01, 3.88662484e-01],
           [4.24403764e-01, 8.06933580e-01, 4.07286282e-01, 9.33434380e-01,
            9.52537696e-01, 6.99749654e-01, 4.74432326e-01],
           [3.70203875e-01, 5.42324840e-01, 7.29102564e-01, 1.97068231e-01,
            3.12637453e-01, 9.18371077e-01, 7.99129548e-01],
           [5.91985932e-01, 1.36962508e-01, 5.72867879e-01, 9.52003079e-01,
            9.54074195e-01, 5.65151042e-01, 6.63858044e-01],
           [9.59640697e-01, 9.86952730e-01, 3.96313541e-01, 6.62970176e-01,
            2.92141776e-02, 4.95911067e-04, 8.72655136e-01],
           [5.29938018e-01, 2.63316002e-01, 2.41764634e-01, 3.21508000e-01,
            2.67806356e-01, 4.90112519e-01, 1.31364273e-01],
           [3.40394219e-01, 6.81969961e-01, 3.42558480e-01, 1.43856101e-01,
            7.45189977e-01, 3.48428763e-01, 4.96514320e-03],
           [9.60239368e-02, 6.53059638e-01, 2.24658483e-01, 6.43368970e-01,
            8.66570256e-01, 3.48348867e-01, 7.47476830e-01],
           [2.79085014e-01, 7.65269098e-01, 4.29682477e-01, 6.00040499e-01,
            5.78703428e-01, 3.93272283e-01, 7.92338248e-01],
           [2.74849457e-01, 7.82534224e-01, 8.71433742e-01, 2.00363714e-01,
            4.41800981e-01, 7.54934323e-01, 8.45387775e-01],
           [5.19164014e-01, 3.13190176e-01, 3.13993377e-01, 1.76731891e-01,
            2.88505802e-01, 2.53040127e-01, 2.36546925e-01],
           [1.22111688e-01, 9.37471332e-01, 5.98554392e-01, 1.53787206e-01,
            9.00696562e-01, 7.93184476e-01, 8.00730224e-01],
           [5.83368939e-01, 2.65766077e-01, 5.87582398e-01, 7.32242477e-01,
            6.43612087e-01, 3.92283239e-01, 2.66257087e-01],
           [1.45878089e-01, 8.83252431e-01, 7.46015760e-01, 1.77902135e-01,
            3.50089492e-01, 7.77330002e-01, 1.22111252e-01],
           [1.43071104e-02, 3.45174594e-01, 6.29467106e-01, 2.97985077e-01,
            2.35161012e-01, 6.19191339e-01, 5.20311391e-01]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.1235 0.8222 0.008818 ... 0.6192 0.5203
        second   (times, roi) float64 0.1591 0.6345 0.8569 ... 0.6123 0.2935 0.01961
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.187 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
