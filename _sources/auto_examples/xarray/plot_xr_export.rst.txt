.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[0.43455631, 0.65704845, 0.49827458, 0.25242305, 0.41244467,
            0.17650216, 0.56358277],
           [0.15289761, 0.49971347, 0.82176334, 0.53916898, 0.57988478,
            0.19944964, 0.71261792],
           [0.25145207, 0.2110444 , 0.50253196, 0.18015026, 0.12763428,
            0.0097192 , 0.8371843 ],
           [0.25052985, 0.82183089, 0.25078235, 0.46868987, 0.14018754,
            0.65996586, 0.95234318],
           [0.76556934, 0.41611605, 0.74128366, 0.51677941, 0.98734632,
            0.49371766, 0.04296258],
           [0.44730145, 0.75913264, 0.87028249, 0.56501918, 0.09991043,
            0.83852606, 0.89513493],
           [0.31326298, 0.292656  , 0.61973911, 0.35825464, 0.03289211,
            0.90654712, 0.61471903],
           [0.98149602, 0.36640916, 0.46290352, 0.75647086, 0.60497059,
            0.44170629, 0.02484083],
           [0.26334458, 0.10880851, 0.14873344, 0.31892678, 0.79816223,
            0.62013587, 0.05824922],
           [0.00559966, 0.48948634, 0.7644117 , 0.00209172, 0.89924753,
            0.29329462, 0.39237997],
    ...
           [0.21846514, 0.31344161, 0.46197724, 0.28002439, 0.71741862,
            0.8176933 , 0.26089391],
           [0.49272496, 0.16330218, 0.2166101 , 0.55031208, 0.39244601,
            0.87117219, 0.93513618],
           [0.77118389, 0.76593561, 0.54450795, 0.3228747 , 0.08352111,
            0.91358372, 0.85335862],
           [0.24081296, 0.7064851 , 0.15587185, 0.48525829, 0.48070885,
            0.67005154, 0.23241533],
           [0.80750346, 0.91506742, 0.47149375, 0.94681572, 0.95616849,
            0.57227419, 0.58508505],
           [0.8744249 , 0.57027936, 0.93190137, 0.30513069, 0.73470548,
            0.82689029, 0.54772989],
           [0.84492206, 0.20803939, 0.77836588, 0.45010751, 0.92529335,
            0.6911688 , 0.40345187],
           [0.43076487, 0.97915699, 0.06446362, 0.11773962, 0.81262278,
            0.05985831, 0.75919115],
           [0.28243245, 0.08060627, 0.32301475, 0.12313626, 0.57774375,
            0.69422409, 0.89243068],
           [0.26272242, 0.18054821, 0.93680882, 0.92809395, 0.04456681,
            0.99917202, 0.56714443]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.4346 0.657 0.4983 ... 0.04457 0.9992 0.5671
        second   (times, roi) float64 0.1574 0.1585 0.2425 ... 0.8487 0.9104 0.1375
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.131 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
