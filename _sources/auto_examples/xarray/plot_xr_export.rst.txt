.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[7.73260163e-01, 2.47951704e-01, 8.55928905e-01, 4.70170015e-01,
            2.20700722e-01, 7.92493489e-01, 8.43590857e-01],
           [3.46227962e-02, 8.08961328e-01, 7.56099838e-02, 1.87859407e-01,
            1.08394337e-01, 7.44946581e-01, 2.01165992e-01],
           [6.94017596e-01, 8.93536984e-01, 7.88534612e-01, 4.53383083e-01,
            7.49090203e-01, 5.82599312e-01, 7.05729231e-01],
           [6.09806959e-01, 3.41508061e-01, 1.94445722e-01, 7.00536339e-01,
            7.84881594e-01, 7.43799139e-01, 3.96338477e-01],
           [5.19743537e-01, 4.83400492e-01, 6.23205116e-01, 7.20991310e-01,
            6.45617572e-01, 4.27532323e-01, 3.24476396e-01],
           [7.08337394e-01, 9.42430390e-01, 2.59118857e-02, 7.62156059e-01,
            7.53929936e-01, 9.10144155e-01, 5.66435757e-01],
           [3.25141575e-01, 8.27755681e-01, 5.09385832e-01, 4.54075430e-01,
            6.67650618e-01, 3.89164565e-01, 8.86525927e-01],
           [9.25503971e-01, 1.18953480e-02, 5.23260152e-01, 4.30699075e-01,
            6.51509929e-01, 5.75484326e-02, 2.07838147e-01],
           [1.33055301e-01, 2.57171685e-01, 3.54184530e-01, 9.97911093e-01,
            8.49110785e-01, 6.49427939e-03, 8.59901174e-01],
           [4.87798175e-01, 2.61084519e-01, 3.00652115e-01, 1.89101528e-01,
            5.09983901e-02, 4.82871937e-02, 6.25323122e-01],
    ...
           [3.51225255e-01, 6.79969108e-01, 3.15601991e-01, 9.85076287e-01,
            6.44640490e-01, 9.97085453e-02, 5.57880858e-01],
           [4.01108648e-01, 9.58692266e-01, 5.09795357e-01, 4.76542408e-01,
            1.23867508e-01, 4.22603466e-02, 8.50006437e-01],
           [2.58706516e-01, 5.92263240e-01, 5.69245357e-01, 4.82363017e-01,
            7.62635010e-01, 2.44446197e-01, 6.16780794e-01],
           [9.17485493e-01, 8.18572747e-01, 9.62849070e-01, 5.91870914e-01,
            2.82379922e-02, 3.03590984e-01, 9.19805790e-01],
           [5.99352720e-02, 6.00384502e-01, 9.24052292e-01, 6.53178201e-01,
            8.23756957e-01, 5.00742709e-01, 8.10635599e-02],
           [5.39864570e-01, 5.78057403e-01, 9.35579306e-01, 3.24016313e-01,
            9.93153921e-01, 5.71311529e-01, 2.72759184e-01],
           [1.81517785e-01, 2.25021291e-01, 4.17977513e-01, 9.30925723e-01,
            1.42033191e-01, 8.50837284e-01, 9.60064442e-01],
           [9.51218173e-01, 4.05335103e-01, 6.22679011e-01, 4.54907982e-01,
            8.39356170e-01, 7.28016673e-01, 3.66560029e-01],
           [7.17944187e-01, 7.81077971e-01, 5.64320142e-01, 8.53084796e-01,
            9.83721162e-01, 5.35324319e-01, 7.27330686e-01],
           [7.83884910e-01, 9.45062799e-01, 2.34850330e-04, 1.00231374e-01,
            4.63071062e-01, 8.27137596e-01, 4.84578614e-01]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.7733 0.248 0.8559 ... 0.4631 0.8271 0.4846
        second   (times, roi) float64 0.3665 0.1323 0.5325 ... 0.9866 0.1065 0.465
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.129 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
