.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_export.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_export.py:


Xarray : Saving the results
===========================

This example illustrates how to export and load your results. In details, we
are going to show how to save and reload a single DataArray such as a Dataset.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating two random spatio-temporal arrays


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])

    # xarray.DataArray conversion
    arr_1 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))
    arr_2 = xr.DataArray(np.random.rand(n_times, n_roi), dims=('times', 'roi'),
                         coords=(times_vec, roi_vec))

    # just add a few attributes to each array
    arr_1.attrs['desc'] = "This is my first array"
    arr_1.attrs['sf'] = 1024.
    arr_2.attrs['desc'] = "This is my second array"
    arr_2.attrs['sf'] = 512.

    # note that you can also concatenate DataArray
    arr_cat = xr.concat([arr_1, arr_2], 'roi')







Export and load a single DataArray
----------------------------------

now we're going to save a single array and then reload it


.. code-block:: default


    # export a single array
    arr_1.to_netcdf("first_array.nc")

    # delete it
    del arr_1

    # reload it
    arr_1 = xr.load_dataarray("first_array.nc")
    print(arr_1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[5.67611007e-01, 7.10831899e-01, 4.69835488e-01, 2.78753069e-01,
            9.12163909e-01, 8.61197643e-01, 4.15995990e-01],
           [6.61552874e-01, 4.90043390e-01, 7.50708819e-01, 2.95831771e-02,
            4.74977062e-01, 2.18422607e-01, 4.49516964e-01],
           [3.19717515e-01, 9.87923509e-01, 3.83939477e-01, 3.56659674e-01,
            9.84701242e-01, 8.95271407e-01, 4.52645003e-01],
           [3.35775286e-02, 9.01675797e-01, 1.28153475e-01, 3.83275365e-01,
            4.66662329e-01, 5.11570239e-01, 1.51209100e-01],
           [6.30422522e-02, 4.83292598e-01, 1.31241377e-01, 1.30635739e-01,
            3.79538318e-01, 3.45552511e-01, 4.59868183e-01],
           [6.94080433e-01, 3.43559709e-01, 6.94764718e-01, 9.47431496e-01,
            9.58567554e-01, 5.96911356e-01, 7.71416426e-01],
           [7.26956126e-01, 7.93287600e-01, 1.56054206e-02, 3.82287327e-01,
            4.01978077e-01, 6.32168352e-01, 8.85032019e-01],
           [5.64601826e-01, 8.54229216e-01, 7.98744292e-01, 7.47794158e-01,
            2.02248016e-01, 8.06711815e-01, 6.31449456e-01],
           [2.26010273e-01, 6.16146587e-01, 8.99754299e-01, 4.82632127e-01,
            5.37580766e-01, 1.89560011e-01, 9.94813939e-01],
           [5.30102726e-01, 9.48010357e-01, 1.32490669e-01, 9.62291120e-01,
            2.45488920e-01, 2.27244777e-01, 8.92292652e-01],
    ...
           [3.41031941e-01, 5.08158620e-01, 2.35198633e-01, 1.93272538e-01,
            6.63480513e-01, 1.45849378e-01, 8.94945017e-01],
           [6.85591453e-01, 2.99786878e-01, 5.95851154e-01, 9.26808200e-01,
            6.98611927e-01, 7.60038529e-02, 7.68834569e-01],
           [9.97920600e-01, 8.72329366e-01, 8.49919934e-02, 3.31431727e-02,
            6.18084407e-01, 8.95885137e-01, 4.84768174e-01],
           [9.65881735e-01, 6.67039181e-01, 4.81191068e-01, 7.72286479e-01,
            4.86297993e-01, 7.78824548e-01, 8.22534538e-02],
           [7.20612354e-01, 6.76984960e-01, 2.14980809e-01, 3.63735681e-01,
            7.28186052e-01, 4.35959621e-01, 7.41656111e-02],
           [7.24708364e-01, 3.86299372e-01, 6.18256105e-01, 7.38650181e-01,
            4.86879500e-01, 8.77007446e-01, 4.49513337e-01],
           [4.36562049e-02, 6.16428508e-01, 9.88086337e-01, 7.21008242e-01,
            9.74249659e-01, 7.22246688e-01, 4.33843492e-01],
           [4.08946622e-01, 5.94989556e-01, 8.91723143e-01, 5.11477292e-01,
            1.51002230e-01, 4.28865342e-01, 3.47241744e-01],
           [8.91496723e-01, 5.46624625e-01, 1.07753518e-02, 1.78070254e-02,
            6.07053866e-02, 5.70859739e-01, 7.08434864e-01],
           [7.93979686e-01, 1.72386740e-01, 9.31081514e-02, 1.29597434e-01,
            9.69707309e-01, 9.14011393e-01, 7.49288916e-01]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Attributes:
        desc:     This is my first array
        sf:       1024.0



Export and load multiple DataArrays
-----------------------------------

it's also possible to export and reload multiple DataArrays at once. To do
it, you can use a Dataset which is a container of DataArrays


.. code-block:: default


    # create a dataset
    dat = xr.Dataset({'first': arr_1, 'second': arr_2})

    # you can also slice the dataset and also add attributes to it
    dat.attrs['desc'] = 'This is my dataset'
    dat.attrs['sf'] = 256.

    # export your dataset
    dat.to_netcdf('full_dataset.nc')

    # delete it
    del dat

    # reload it
    dat = xr.load_dataset("full_dataset.nc")
    print(dat)

    # finally, accessing array of a dataset is similar of using dictionary
    arr_1 = dat['first']
    arr_2 = dat['second']




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:  (roi: 7, times: 30)
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2' ... 'roi_4' 'roi_5' 'roi_6'
    Data variables:
        first    (times, roi) float64 0.5676 0.7108 0.4698 ... 0.9697 0.914 0.7493
        second   (times, roi) float64 0.1465 0.2503 0.5641 ... 0.8181 0.1901 0.8282
    Attributes:
        desc:     This is my dataset
        sf:       256.0




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.173 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_export.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_export.py <plot_xr_export.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_export.ipynb <plot_xr_export.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
