.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_xarray_plot_xr_quick_tour.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_xarray_plot_xr_quick_tour.py:


Xarray : Quick tour
===================

Basically, this example gives a very small introduction to Xarray (very small).
We illustrate how to define a DataArray container, access its components,
perform some of the basic operations and slicing / indexing.


.. code-block:: default

    import numpy as np
    import xarray as xr
    import pandas as pd







Simulate data
-------------

lets start by creating a random spatio-temporal array


.. code-block:: default


    n_times = 30
    n_roi = 7
    times_vec = np.linspace(-1, 1, n_times)
    roi_vec = np.array([f"roi_{k}" for k in range(n_roi)])
    np_data = np.random.rand(n_times, n_roi)
    print(np_data.shape)
    print('*' * 79)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (30, 7)
    *******************************************************************************



Xarray conversion and access to the internal components
-------------------------------------------------------

A DataArray is a container (like a well known numpy array) except that you
can add a label to each coordinate. To this end, the input `dims` is a tuple
that describes the dimension names and `coords` describes the value along
this coordinate


.. code-block:: default


    # let's convert it to a DataArray
    da_data = xr.DataArray(np_data, dims=('times', 'roi'),
                           coords=(times_vec, roi_vec))
    print(da_data.shape)
    print(da_data)
    print('*' * 79)

    # if you want to get the dimension names and values
    print(f'Dimension names : {da_data.dims}')
    print(f'Dimension values : {da_data.coords}')
    print(f"Data of a specific dimension : {da_data.roi.data}")
    print('*' * 79)

    # if you want to get the original NumPy array enter the following :
    da_data.data

    # if you want to change the values of a coordinate
    da_data['roi'] = np.array([f"roi_{k % 3}" for k in range(n_roi)])
    print(f"New ROI names : {da_data.roi.data}")
    print('*' * 79)

    # if you need to compute or get the min / max / mean across a specific
    # dimension
    da_data.min('times')  # minimum across time points
    da_data.max('times')  # maximum across time points
    da_data.mean('roi')   # mean across all ROI

    # similarly to Pandas, it's also possible to group along a dimension and then
    # take the mean. For example, here's how to group and mean by roi names
    da_m = da_data.groupby('roi').mean('roi')
    print(da_m)
    print('*' * 79)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (30, 7)
    <xarray.DataArray (times: 30, roi: 7)>
    array([[5.26098208e-01, 5.71305742e-01, 6.68165873e-01, 7.85958059e-01,
            8.96969170e-02, 8.34214773e-01, 7.41871847e-01],
           [4.83702907e-01, 4.86335536e-01, 3.66694192e-01, 1.06146149e-01,
            1.86144776e-02, 7.82430607e-02, 2.02690114e-01],
           [8.86887487e-02, 4.68802213e-01, 7.10827365e-01, 5.28554830e-01,
            6.51282353e-01, 3.29262527e-01, 1.60172988e-01],
           [3.15612790e-02, 6.40966738e-01, 7.92623424e-02, 8.05827899e-01,
            4.92441093e-01, 5.86894319e-01, 3.19898868e-02],
           [3.33279537e-01, 5.14926165e-01, 5.49781947e-01, 9.43747390e-01,
            5.24592053e-01, 8.94090953e-01, 6.32373544e-01],
           [1.55993052e-01, 7.91604739e-01, 4.69760173e-01, 3.97043904e-01,
            9.30315483e-01, 4.66373746e-01, 8.62561062e-01],
           [7.40696118e-01, 5.85892386e-01, 1.38646546e-01, 6.59055125e-01,
            5.07905452e-01, 6.92612493e-01, 5.97033900e-02],
           [2.86737384e-01, 9.78764818e-01, 1.59829489e-01, 6.15865928e-01,
            4.26399270e-01, 4.52536706e-01, 4.29552528e-01],
           [9.81044223e-01, 1.47592614e-01, 9.23702343e-01, 1.95190388e-01,
            6.10983791e-01, 4.79289116e-01, 9.21453029e-01],
           [5.75257851e-01, 9.50991453e-01, 3.06129113e-01, 9.54932271e-01,
            7.49236500e-01, 8.29641382e-01, 5.11740997e-04],
    ...
           [7.39542907e-01, 8.27547080e-01, 1.16397318e-01, 6.02466554e-01,
            9.94362875e-01, 3.88097312e-01, 3.92971780e-02],
           [6.73407511e-01, 1.21173044e-01, 2.97603669e-02, 1.17424937e-01,
            9.13026266e-01, 4.51481810e-01, 1.91918514e-01],
           [8.01348243e-02, 4.76864961e-01, 3.39822910e-01, 5.97519822e-01,
            8.90725546e-01, 9.00331673e-01, 2.09912951e-01],
           [7.27603338e-01, 7.56186217e-01, 8.83449120e-01, 5.76818460e-01,
            4.13738958e-02, 5.30891834e-01, 5.69876610e-01],
           [6.50517637e-01, 1.36011231e-01, 7.58554360e-02, 7.68267281e-01,
            2.96610585e-01, 2.07364771e-01, 3.48313775e-02],
           [2.83010556e-01, 1.83542136e-01, 6.96927223e-01, 5.40567980e-01,
            8.56979238e-01, 1.35666009e-01, 3.52129421e-02],
           [4.96215167e-01, 8.20862453e-01, 6.17057814e-01, 2.75216109e-03,
            9.97249234e-01, 2.42174131e-01, 1.39011279e-01],
           [8.91011982e-02, 2.05458181e-01, 4.00017471e-01, 4.80784237e-01,
            1.63613185e-02, 1.11754624e-01, 2.70228169e-01],
           [7.76777864e-01, 2.44283898e-02, 4.33313764e-01, 4.69071351e-01,
            7.64890601e-01, 9.14618229e-01, 6.77811780e-01],
           [6.11050304e-01, 3.36483915e-01, 8.73514190e-02, 6.92187769e-01,
            8.31011660e-01, 6.71013048e-01, 1.15765360e-01]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) <U5 'roi_0' 'roi_1' 'roi_2' 'roi_3' 'roi_4' 'roi_5' 'roi_6'
    *******************************************************************************
    Dimension names : ('times', 'roi')
    Dimension values : Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) <U5 'roi_0' 'roi_1' 'roi_2' 'roi_3' 'roi_4' 'roi_5' 'roi_6'
    Data of a specific dimension : ['roi_0' 'roi_1' 'roi_2' 'roi_3' 'roi_4' 'roi_5' 'roi_6']
    *******************************************************************************
    New ROI names : ['roi_0' 'roi_1' 'roi_2' 'roi_0' 'roi_1' 'roi_2' 'roi_0']
    *******************************************************************************
    <xarray.DataArray (times: 30, roi: 3)>
    array([[0.6846427 , 0.33050133, 0.75119032],
           [0.26417972, 0.25247501, 0.22246863],
           [0.25913886, 0.56004228, 0.52004495],
           [0.28979302, 0.56670392, 0.33307833],
           [0.63646682, 0.51975911, 0.72193645],
           [0.47186601, 0.86096011, 0.46806696],
           [0.48648488, 0.54689892, 0.41562952],
           [0.44405195, 0.70258204, 0.3061831 ],
           [0.69922921, 0.3792882 , 0.70149573],
           [0.51023395, 0.85011398, 0.56788525],
           [0.82465817, 0.0694105 , 0.39109865],
           [0.57630975, 0.85655681, 0.58822955],
           [0.41664308, 0.95461403, 0.39629066],
           [0.63051441, 0.94306557, 0.22748113],
           [0.71595487, 0.48610943, 0.59438277],
           [0.66878473, 0.53720383, 0.81654458],
           [0.35868379, 0.33365526, 0.60710484],
           [0.61488672, 0.5696648 , 0.49801074],
           [0.61150454, 0.68093311, 0.55672365],
           [0.37750151, 0.5885745 , 0.62076674],
           [0.46043555, 0.91095498, 0.25224731],
           [0.32758365, 0.51709965, 0.24062109],
           [0.29585587, 0.68379525, 0.62007729],
           [0.62476614, 0.39878006, 0.70717048],
           [0.48453877, 0.21631091, 0.1416101 ],
           [0.28626383, 0.52026069, 0.41629662],
           [0.21265954, 0.90905584, 0.42961597],
           [0.28003787, 0.11090975, 0.25588605],
           [0.64122033, 0.3946595 , 0.673966  ],
           [0.47300114, 0.58374779, 0.37918223]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) object 'roi_0' 'roi_1' 'roi_2'
    *******************************************************************************



Xarray slicing and indexing
---------------------------

Now we show how to slice the container


.. code-block:: default


    # select a single specific ROI based on it's name
    da_data.sel(roi='roi_0')

    # select a time range
    da_time_slice = da_data.sel(times=slice(-.5, .5))
    print(f"Temporal selection : {da_time_slice.coords}")
    print('*' * 79)

    # off course, spatio-temporal selection is also supported
    da_st = da_data.sel(times=slice(-.5, .5), roi='roi_1')
    print(f"Spatio-temporal selection : {da_st.coords}")
    print('*' * 79)

    # you can also slice according to indices
    da_isel = da_data.isel(times=slice(10, 20))
    print(f"Integer selection : {da_isel.coords}")
    print('*' * 79)

    # however, if you want for example select multiple items based on their names,
    # you have to use booleans. Here's a small example that's using Pandas
    roi = da_data.roi.data
    use_roi = ['roi_0', 'roi_2']
    is_roi = pd.Series(roi).str.contains('|'.join(use_roi))
    da_mi = da_data.isel(roi=is_roi)
    print(f"Multi-items selection : {da_mi.coords}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Temporal selection : Coordinates:
      * times    (times) float64 -0.4483 -0.3793 -0.3103 ... 0.3103 0.3793 0.4483
      * roi      (roi) <U5 'roi_0' 'roi_1' 'roi_2' 'roi_0' 'roi_1' 'roi_2' 'roi_0'
    *******************************************************************************
    Spatio-temporal selection : Coordinates:
      * times    (times) float64 -0.4483 -0.3793 -0.3103 ... 0.3103 0.3793 0.4483
      * roi      (roi) <U5 'roi_1' 'roi_1'
    *******************************************************************************
    Integer selection : Coordinates:
      * times    (times) float64 -0.3103 -0.2414 -0.1724 ... 0.1724 0.2414 0.3103
      * roi      (roi) <U5 'roi_0' 'roi_1' 'roi_2' 'roi_0' 'roi_1' 'roi_2' 'roi_0'
    *******************************************************************************
    Multi-items selection : Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) <U5 'roi_0' 'roi_2' 'roi_0' 'roi_2' 'roi_0'



Xarray attributes
-----------------

One of the nice features of DataArray is that it supporting setting
attributes. Therefore you can add, for example, the parameters that describe
your analysis


.. code-block:: default


    # adding a few string attributes
    da_data.attrs['inference'] = 'ffx'
    da_data.attrs['stats'] = 'cluster-based'
    da_data.attrs['description'] = """Here's a small description of the analysis
    I'm currently running. Trying to find a difference between condition 1. vs 2.
    """

    # you can also add vectors (but not arrays) to the attributes
    da_data.attrs['vector'] = np.arange(30)

    # however, "None" seems to pose a problem when saving the results. Therefore,
    # one quick way to solve this is simply to convert it into a string
    da_data.attrs['none_problem'] = str(None)

    print(da_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <xarray.DataArray (times: 30, roi: 7)>
    array([[5.26098208e-01, 5.71305742e-01, 6.68165873e-01, 7.85958059e-01,
            8.96969170e-02, 8.34214773e-01, 7.41871847e-01],
           [4.83702907e-01, 4.86335536e-01, 3.66694192e-01, 1.06146149e-01,
            1.86144776e-02, 7.82430607e-02, 2.02690114e-01],
           [8.86887487e-02, 4.68802213e-01, 7.10827365e-01, 5.28554830e-01,
            6.51282353e-01, 3.29262527e-01, 1.60172988e-01],
           [3.15612790e-02, 6.40966738e-01, 7.92623424e-02, 8.05827899e-01,
            4.92441093e-01, 5.86894319e-01, 3.19898868e-02],
           [3.33279537e-01, 5.14926165e-01, 5.49781947e-01, 9.43747390e-01,
            5.24592053e-01, 8.94090953e-01, 6.32373544e-01],
           [1.55993052e-01, 7.91604739e-01, 4.69760173e-01, 3.97043904e-01,
            9.30315483e-01, 4.66373746e-01, 8.62561062e-01],
           [7.40696118e-01, 5.85892386e-01, 1.38646546e-01, 6.59055125e-01,
            5.07905452e-01, 6.92612493e-01, 5.97033900e-02],
           [2.86737384e-01, 9.78764818e-01, 1.59829489e-01, 6.15865928e-01,
            4.26399270e-01, 4.52536706e-01, 4.29552528e-01],
           [9.81044223e-01, 1.47592614e-01, 9.23702343e-01, 1.95190388e-01,
            6.10983791e-01, 4.79289116e-01, 9.21453029e-01],
           [5.75257851e-01, 9.50991453e-01, 3.06129113e-01, 9.54932271e-01,
            7.49236500e-01, 8.29641382e-01, 5.11740997e-04],
    ...
           [7.39542907e-01, 8.27547080e-01, 1.16397318e-01, 6.02466554e-01,
            9.94362875e-01, 3.88097312e-01, 3.92971780e-02],
           [6.73407511e-01, 1.21173044e-01, 2.97603669e-02, 1.17424937e-01,
            9.13026266e-01, 4.51481810e-01, 1.91918514e-01],
           [8.01348243e-02, 4.76864961e-01, 3.39822910e-01, 5.97519822e-01,
            8.90725546e-01, 9.00331673e-01, 2.09912951e-01],
           [7.27603338e-01, 7.56186217e-01, 8.83449120e-01, 5.76818460e-01,
            4.13738958e-02, 5.30891834e-01, 5.69876610e-01],
           [6.50517637e-01, 1.36011231e-01, 7.58554360e-02, 7.68267281e-01,
            2.96610585e-01, 2.07364771e-01, 3.48313775e-02],
           [2.83010556e-01, 1.83542136e-01, 6.96927223e-01, 5.40567980e-01,
            8.56979238e-01, 1.35666009e-01, 3.52129421e-02],
           [4.96215167e-01, 8.20862453e-01, 6.17057814e-01, 2.75216109e-03,
            9.97249234e-01, 2.42174131e-01, 1.39011279e-01],
           [8.91011982e-02, 2.05458181e-01, 4.00017471e-01, 4.80784237e-01,
            1.63613185e-02, 1.11754624e-01, 2.70228169e-01],
           [7.76777864e-01, 2.44283898e-02, 4.33313764e-01, 4.69071351e-01,
            7.64890601e-01, 9.14618229e-01, 6.77811780e-01],
           [6.11050304e-01, 3.36483915e-01, 8.73514190e-02, 6.92187769e-01,
            8.31011660e-01, 6.71013048e-01, 1.15765360e-01]])
    Coordinates:
      * times    (times) float64 -1.0 -0.931 -0.8621 -0.7931 ... 0.8621 0.931 1.0
      * roi      (roi) <U5 'roi_0' 'roi_1' 'roi_2' 'roi_0' 'roi_1' 'roi_2' 'roi_0'
    Attributes:
        inference:     ffx
        stats:         cluster-based
        description:   Here's a small description of the analysis\nI'm currently ...
        vector:        [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 ...
        none_problem:  None



Xarray to an other format
-------------------------

Finally, we quickly illustrate how to convert a DataArray into, for example,
a pandas.DataFrame


.. code-block:: default


    print(da_data.to_pandas())



.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    roi           roi_0  ...     roi_0
    times                ...          
    -1.000000  0.526098  ...  0.741872
    -0.931034  0.483703  ...  0.202690
    -0.862069  0.088689  ...  0.160173
    -0.793103  0.031561  ...  0.031990
    -0.724138  0.333280  ...  0.632374
    -0.655172  0.155993  ...  0.862561
    -0.586207  0.740696  ...  0.059703
    -0.517241  0.286737  ...  0.429553
    -0.448276  0.981044  ...  0.921453
    -0.379310  0.575258  ...  0.000512
    -0.310345  0.856554  ...  0.858938
    -0.241379  0.759043  ...  0.339825
    -0.172414  0.365310  ...  0.593829
    -0.103448  0.951275  ...  0.916337
    -0.034483  0.977478  ...  0.513947
     0.034483  0.594609  ...  0.527460
     0.103448  0.682260  ...  0.122977
     0.172414  0.739262  ...  0.273109
     0.241379  0.195620  ...  0.994028
     0.310345  0.412091  ...  0.119821
     0.379310  0.739543  ...  0.039297
     0.448276  0.673408  ...  0.191919
     0.517241  0.080135  ...  0.209913
     0.586207  0.727603  ...  0.569877
     0.655172  0.650518  ...  0.034831
     0.724138  0.283011  ...  0.035213
     0.793103  0.496215  ...  0.139011
     0.862069  0.089101  ...  0.270228
     0.931034  0.776778  ...  0.677812
     1.000000  0.611050  ...  0.115765

    [30 rows x 7 columns]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.118 seconds)


.. _sphx_glr_download_auto_examples_xarray_plot_xr_quick_tour.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_xr_quick_tour.py <plot_xr_quick_tour.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_xr_quick_tour.ipynb <plot_xr_quick_tour.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
