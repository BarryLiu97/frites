.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_tutorials_plot_stim_spec_network.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_tutorials_plot_stim_spec_network.py:


Statistical analysis of a stimulus-specific network
===================================================

In this tutorial we illustrate how to analyze a stimulus-specific network i.e
first if the nodes of the network present an activity that is modulated
according to a stimulus (for example two conditions) and second, if the
connectivity strength (i.e the links between the nodes) is also modulated by
the stimulus.


.. code-block:: default

    import numpy as np
    import xarray as xr

    from frites.simulations import StimSpecAR
    from frites.dataset import DatasetEphy
    from frites.workflow import WfMi
    from frites.conn import conn_dfc, define_windows, conn_covgc

    import matplotlib.pyplot as plt








Simulate a stimulus-specific network
------------------------------------

First, lets simulate a three nodes network using an autoregressive model.
In this three nodes network, the simulated high-gamma activity of nodes X and
Y are going to be modulated by the stimulus, such as the information sent
from X->Y


.. code-block:: default



    """
    Properties of the network :

        * ar_type = type of the model. Here, we use 'hga' which simulate a two
          nodes network (X->Y) of high-gamma activity
        * n_subjects = number of subjects to simulate
        * n_stim = number of categories (e.g each category could correspond to an
          experimental condition)
        * n_epochs = number of trials / epochs in each condition
        * n_std = control the number of standard deviation the true signal is
          exceeding the noise (SNR)
    """
    ar_type = 'hga'
    n_subjects = 5
    n_stim = 2
    n_epochs = 100
    n_std = 1

    ss_obj = StimSpecAR()
    # generate the data
    x = []
    for n_s in range(n_subjects):
        # generate nodes x and y
        _x = ss_obj.fit(ar_type=ar_type, n_epochs=n_epochs, n_stim=n_stim,
                        n_std=n_std, random_state=n_s)
        trials, times = _x['trials'].data, _x['times'].data
        # generate pure noise node z
        rnd = np.random.RandomState(n_s)
        _z = rnd.uniform(-.5, .5, (len(trials), 1, len(times)))
        _z = xr.DataArray(_z, dims=('trials', 'roi', 'times'),
                          coords=(trials, np.array(['z']), times))
        # concatenate the three nodes
        _x = xr.concat((_x, _z), 'roi')

        x += [_x]

    # get times and roi
    times = _x['times'].data
    roi = _x['roi'].data







Plot the mean activity per node and per condition. The activity is
concatenated across subjects.


.. code-block:: default


    x_suj = xr.concat(x, 'trials').groupby('trials').mean('trials')
    x_suj.plot.line(x='times', hue='trials', col='roi')
    plt.show()




.. image:: /auto_examples/tutorials/images/sphx_glr_plot_stim_spec_network_001.png
    :class: sphx-glr-single-img




Stimulus-specificity of the nodes of the network
------------------------------------------------

In order to determine if the activity of each node is modulated according
to the stimulus, we then compute the mutual information between the
high-gamma and the stimulus variable.


.. code-block:: default


    # define an electrophysiological dataset
    ds = DatasetEphy(x.copy(), y='trials', times='times', roi='roi')
    # define a workflow of mutual information
    wf = WfMi(mi_type='cd', inference='rfx')
    # run the workflow
    mi, pv = wf.fit(ds, n_perm=200, n_jobs=1, random_state=0)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | Estimating MI : 0/3 [00:00<?,       ?it/s]     33%|###3      | Estimating MI : 1/3 [00:01<00:02,    1.48s/it]     67%|######6   | Estimating MI : 2/3 [00:02<00:01,    1.48s/it]    100%|##########| Estimating MI : 3/3 [00:04<00:00,    1.47s/it]    100%|##########| Estimating MI : 3/3 [00:04<00:00,    1.41s/it]



define the MI plotting function


.. code-block:: default


    def plot_mi(mi, pv):
        # figure definition
        n_subs = len(mi['roi'].data)
        space_single_sub = 4
        fig, gs  = plt.subplots(1, 3, sharex='all', sharey='all',
                                figsize=(n_subs * space_single_sub, 4))

        for n_r, r in enumerate(mi['roi'].data):
            # select mi and p-values for a single roi
            mi_r, pv_r = mi.sel(roi=r), pv.sel(roi=r)
            # set to nan when it's not significant
            mi_r_s = mi_r.copy()
            mi_r_s[pv_r >= .05] = np.nan

            # significant = red; non-significant = black
            plt.sca(gs[n_r])
            plt.plot(mi['times'].data, mi_r, lw=1, color='k')
            plt.plot(mi['times'].data, mi_r_s, lw=3, color='red')
            plt.xlabel('Times'), plt.ylabel('MI (bits)')
            plt.title(f"ROI={r}")
            plt.axvline(0, lw=2, color='k')

        return plt.gcf()







plot the mi


.. code-block:: default

    plot_mi(mi, pv)
    plt.show()





.. image:: /auto_examples/tutorials/images/sphx_glr_plot_stim_spec_network_002.png
    :class: sphx-glr-single-img




Stimulus-specificity of the undirected connectivity
---------------------------------------------------

From the figure above, nodes X and Y present an activity that is modulated
according to the stimulus, but not Z. The next question we can ask is
whether the connectivity strength is also modulated by the stimulus. To this
end, we are going to compute the undirected Dynamic Functional Connectivity
(DFC) which is simply defined as the information shared between two nodes
inside sliding windows. Hence, here, the DFC is computed for each trial
inside consecutive windows


.. code-block:: default


    # define the sliding windows
    slwin_len = .3    # 100ms window length
    slwin_step = .02  # 80ms between consecutive windows
    win_sample = define_windows(times, slwin_len=slwin_len,
                                slwin_step=slwin_step)[0]

    # compute the DFC for each subject
    dfc = []
    for n_s in range(n_subjects):
        _dfc = conn_dfc(x[n_s].data, win_sample, times=times, roi=roi,
                        verbose=False)
        # reset trials dimension
        _dfc['trials'] = x[n_s]['trials'].data
        dfc += [_dfc]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | Estimating DFC : 0/60 [00:00<?,       ?it/s]      3%|3         | Estimating DFC : 2/60 [00:00<00:01,   52.39it/s]      5%|5         | Estimating DFC : 3/60 [00:00<00:01,   52.55it/s]      7%|6         | Estimating DFC : 4/60 [00:00<00:01,   52.69it/s]     10%|#         | Estimating DFC : 6/60 [00:00<00:01,   53.76it/s]     13%|#3        | Estimating DFC : 8/60 [00:00<00:00,   53.71it/s]     15%|#5        | Estimating DFC : 9/60 [00:00<00:00,   54.08it/s]     18%|#8        | Estimating DFC : 11/60 [00:00<00:00,   55.11it/s]     22%|##1       | Estimating DFC : 13/60 [00:00<00:00,   56.17it/s]     25%|##5       | Estimating DFC : 15/60 [00:00<00:00,   56.60it/s]     27%|##6       | Estimating DFC : 16/60 [00:00<00:00,   56.44it/s]     30%|###       | Estimating DFC : 18/60 [00:00<00:00,   57.00it/s]     33%|###3      | Estimating DFC : 20/60 [00:00<00:00,   58.03it/s]     37%|###6      | Estimating DFC : 22/60 [00:00<00:00,   57.03it/s]     40%|####      | Estimating DFC : 24/60 [00:00<00:00,   57.96it/s]     43%|####3     | Estimating DFC : 26/60 [00:00<00:00,   58.96it/s]     47%|####6     | Estimating DFC : 28/60 [00:00<00:00,   59.68it/s]     48%|####8     | Estimating DFC : 29/60 [00:00<00:00,   59.12it/s]     50%|#####     | Estimating DFC : 30/60 [00:00<00:00,   59.18it/s]     52%|#####1    | Estimating DFC : 31/60 [00:00<00:00,   59.17it/s]     55%|#####5    | Estimating DFC : 33/60 [00:00<00:00,   60.02it/s]     58%|#####8    | Estimating DFC : 35/60 [00:00<00:00,   59.80it/s]     60%|######    | Estimating DFC : 36/60 [00:00<00:00,   59.36it/s]     63%|######3   | Estimating DFC : 38/60 [00:00<00:00,   60.28it/s]     67%|######6   | Estimating DFC : 40/60 [00:00<00:00,   61.24it/s]     70%|#######   | Estimating DFC : 42/60 [00:00<00:00,   61.09it/s]     72%|#######1  | Estimating DFC : 43/60 [00:00<00:00,   60.73it/s]     75%|#######5  | Estimating DFC : 45/60 [00:00<00:00,   61.10it/s]     78%|#######8  | Estimating DFC : 47/60 [00:00<00:00,   62.03it/s]     80%|########  | Estimating DFC : 48/60 [00:00<00:00,   61.05it/s]     82%|########1 | Estimating DFC : 49/60 [00:00<00:00,   60.54it/s]     85%|########5 | Estimating DFC : 51/60 [00:00<00:00,   60.82it/s]     88%|########8 | Estimating DFC : 53/60 [00:00<00:00,   61.79it/s]     92%|#########1| Estimating DFC : 55/60 [00:00<00:00,   61.44it/s]     93%|#########3| Estimating DFC : 56/60 [00:00<00:00,   60.96it/s]     97%|#########6| Estimating DFC : 58/60 [00:00<00:00,   61.63it/s]    100%|##########| Estimating DFC : 60/60 [00:00<00:00,   62.35it/s]    100%|##########| Estimating DFC : 60/60 [00:00<00:00,   66.83it/s]
      0%|          | Estimating DFC : 0/60 [00:00<?,       ?it/s]      2%|1         | Estimating DFC : 1/60 [00:00<00:01,   39.72it/s]      3%|3         | Estimating DFC : 2/60 [00:00<00:01,   40.32it/s]      7%|6         | Estimating DFC : 4/60 [00:00<00:01,   41.30it/s]      8%|8         | Estimating DFC : 5/60 [00:00<00:01,   41.99it/s]     12%|#1        | Estimating DFC : 7/60 [00:00<00:01,   42.40it/s]     13%|#3        | Estimating DFC : 8/60 [00:00<00:01,   42.95it/s]     17%|#6        | Estimating DFC : 10/60 [00:00<00:01,   43.77it/s]     20%|##        | Estimating DFC : 12/60 [00:00<00:01,   44.88it/s]     22%|##1       | Estimating DFC : 13/60 [00:00<00:01,   44.50it/s]     23%|##3       | Estimating DFC : 14/60 [00:00<00:01,   44.46it/s]     25%|##5       | Estimating DFC : 15/60 [00:00<00:00,   45.00it/s]     28%|##8       | Estimating DFC : 17/60 [00:00<00:00,   46.01it/s]     32%|###1      | Estimating DFC : 19/60 [00:00<00:00,   46.40it/s]     33%|###3      | Estimating DFC : 20/60 [00:00<00:00,   46.74it/s]     37%|###6      | Estimating DFC : 22/60 [00:00<00:00,   47.71it/s]     40%|####      | Estimating DFC : 24/60 [00:00<00:00,   48.37it/s]     42%|####1     | Estimating DFC : 25/60 [00:00<00:00,   46.50it/s]     43%|####3     | Estimating DFC : 26/60 [00:00<00:00,   46.88it/s]     47%|####6     | Estimating DFC : 28/60 [00:00<00:00,   47.96it/s]     50%|#####     | Estimating DFC : 30/60 [00:00<00:00,   49.00it/s]     52%|#####1    | Estimating DFC : 31/60 [00:00<00:00,   48.68it/s]     53%|#####3    | Estimating DFC : 32/60 [00:00<00:00,   48.40it/s]     57%|#####6    | Estimating DFC : 34/60 [00:00<00:00,   49.37it/s]     60%|######    | Estimating DFC : 36/60 [00:00<00:00,   50.48it/s]     63%|######3   | Estimating DFC : 38/60 [00:00<00:00,   50.51it/s]     65%|######5   | Estimating DFC : 39/60 [00:00<00:00,   50.93it/s]     68%|######8   | Estimating DFC : 41/60 [00:00<00:00,   51.77it/s]     72%|#######1  | Estimating DFC : 43/60 [00:00<00:00,   52.86it/s]     73%|#######3  | Estimating DFC : 44/60 [00:00<00:00,   50.68it/s]     75%|#######5  | Estimating DFC : 45/60 [00:00<00:00,   51.02it/s]     78%|#######8  | Estimating DFC : 47/60 [00:00<00:00,   52.06it/s]     82%|########1 | Estimating DFC : 49/60 [00:00<00:00,   53.15it/s]     85%|########5 | Estimating DFC : 51/60 [00:00<00:00,   53.56it/s]     87%|########6 | Estimating DFC : 52/60 [00:00<00:00,   53.56it/s]     90%|######### | Estimating DFC : 54/60 [00:00<00:00,   54.41it/s]     92%|#########1| Estimating DFC : 55/60 [00:00<00:00,   54.73it/s]     95%|#########5| Estimating DFC : 57/60 [00:00<00:00,   54.63it/s]     97%|#########6| Estimating DFC : 58/60 [00:00<00:00,   54.27it/s]    100%|##########| Estimating DFC : 60/60 [00:00<00:00,   55.03it/s]    100%|##########| Estimating DFC : 60/60 [00:00<00:00,   61.68it/s]
      0%|          | Estimating DFC : 0/60 [00:00<?,       ?it/s]      3%|3         | Estimating DFC : 2/60 [00:00<00:00,   84.76it/s]      5%|5         | Estimating DFC : 3/60 [00:00<00:00,   78.68it/s]      7%|6         | Estimating DFC : 4/60 [00:00<00:00,   77.20it/s]     10%|#         | Estimating DFC : 6/60 [00:00<00:00,   77.65it/s]     13%|#3        | Estimating DFC : 8/60 [00:00<00:00,   78.08it/s]     15%|#5        | Estimating DFC : 9/60 [00:00<00:00,   72.09it/s]     17%|#6        | Estimating DFC : 10/60 [00:00<00:00,   71.35it/s]     20%|##        | Estimating DFC : 12/60 [00:00<00:00,   71.93it/s]     23%|##3       | Estimating DFC : 14/60 [00:00<00:00,   72.51it/s]     27%|##6       | Estimating DFC : 16/60 [00:00<00:00,   72.21it/s]     28%|##8       | Estimating DFC : 17/60 [00:00<00:00,   71.02it/s]     32%|###1      | Estimating DFC : 19/60 [00:00<00:00,   70.91it/s]     35%|###5      | Estimating DFC : 21/60 [00:00<00:00,   71.59it/s]     38%|###8      | Estimating DFC : 23/60 [00:00<00:00,   70.23it/s]     42%|####1     | Estimating DFC : 25/60 [00:00<00:00,   70.32it/s]     45%|####5     | Estimating DFC : 27/60 [00:00<00:00,   71.00it/s]     48%|####8     | Estimating DFC : 29/60 [00:00<00:00,   69.72it/s]     50%|#####     | Estimating DFC : 30/60 [00:00<00:00,   68.67it/s]     53%|#####3    | Estimating DFC : 32/60 [00:00<00:00,   69.23it/s]     57%|#####6    | Estimating DFC : 34/60 [00:00<00:00,   69.94it/s]     60%|######    | Estimating DFC : 36/60 [00:00<00:00,   68.59it/s]     63%|######3   | Estimating DFC : 38/60 [00:00<00:00,   68.43it/s]     67%|######6   | Estimating DFC : 40/60 [00:00<00:00,   69.19it/s]     70%|#######   | Estimating DFC : 42/60 [00:00<00:00,   69.92it/s]     72%|#######1  | Estimating DFC : 43/60 [00:00<00:00,   66.16it/s]     75%|#######5  | Estimating DFC : 45/60 [00:00<00:00,   66.69it/s]     78%|#######8  | Estimating DFC : 47/60 [00:00<00:00,   67.51it/s]     82%|########1 | Estimating DFC : 49/60 [00:00<00:00,   68.14it/s]     83%|########3 | Estimating DFC : 50/60 [00:00<00:00,   65.41it/s]     87%|########6 | Estimating DFC : 52/60 [00:00<00:00,   65.74it/s]     90%|######### | Estimating DFC : 54/60 [00:00<00:00,   65.76it/s]     93%|#########3| Estimating DFC : 56/60 [00:00<00:00,   64.14it/s]     97%|#########6| Estimating DFC : 58/60 [00:00<00:00,   64.55it/s]    100%|##########| Estimating DFC : 60/60 [00:00<00:00,   65.42it/s]    100%|##########| Estimating DFC : 60/60 [00:00<00:00,   66.02it/s]
      0%|          | Estimating DFC : 0/60 [00:00<?,       ?it/s]      3%|3         | Estimating DFC : 2/60 [00:00<00:01,   49.71it/s]      7%|6         | Estimating DFC : 4/60 [00:00<00:01,   50.53it/s]     10%|#         | Estimating DFC : 6/60 [00:00<00:01,   51.61it/s]     13%|#3        | Estimating DFC : 8/60 [00:00<00:01,   51.64it/s]     15%|#5        | Estimating DFC : 9/60 [00:00<00:00,   51.96it/s]     18%|#8        | Estimating DFC : 11/60 [00:00<00:00,   52.79it/s]     22%|##1       | Estimating DFC : 13/60 [00:00<00:00,   53.87it/s]     25%|##5       | Estimating DFC : 15/60 [00:00<00:00,   54.48it/s]     27%|##6       | Estimating DFC : 16/60 [00:00<00:00,   54.42it/s]     30%|###       | Estimating DFC : 18/60 [00:00<00:00,   55.36it/s]     33%|###3      | Estimating DFC : 20/60 [00:00<00:00,   56.15it/s]     37%|###6      | Estimating DFC : 22/60 [00:00<00:00,   56.85it/s]     38%|###8      | Estimating DFC : 23/60 [00:00<00:00,   55.25it/s]     42%|####1     | Estimating DFC : 25/60 [00:00<00:00,   56.18it/s]     45%|####5     | Estimating DFC : 27/60 [00:00<00:00,   57.20it/s]     48%|####8     | Estimating DFC : 29/60 [00:00<00:00,   57.80it/s]     50%|#####     | Estimating DFC : 30/60 [00:00<00:00,   57.55it/s]     52%|#####1    | Estimating DFC : 31/60 [00:00<00:00,   57.66it/s]     55%|#####5    | Estimating DFC : 33/60 [00:00<00:00,   58.38it/s]     58%|#####8    | Estimating DFC : 35/60 [00:00<00:00,   59.37it/s]     60%|######    | Estimating DFC : 36/60 [00:00<00:00,   58.09it/s]     62%|######1   | Estimating DFC : 37/60 [00:00<00:00,   57.91it/s]     65%|######5   | Estimating DFC : 39/60 [00:00<00:00,   58.70it/s]     68%|######8   | Estimating DFC : 41/60 [00:00<00:00,   59.60it/s]     72%|#######1  | Estimating DFC : 43/60 [00:00<00:00,   59.76it/s]     73%|#######3  | Estimating DFC : 44/60 [00:00<00:00,   59.27it/s]     77%|#######6  | Estimating DFC : 46/60 [00:00<00:00,   59.68it/s]     80%|########  | Estimating DFC : 48/60 [00:00<00:00,   60.60it/s]     82%|########1 | Estimating DFC : 49/60 [00:00<00:00,   58.71it/s]     83%|########3 | Estimating DFC : 50/60 [00:00<00:00,   58.63it/s]     87%|########6 | Estimating DFC : 52/60 [00:00<00:00,   59.50it/s]     90%|######### | Estimating DFC : 54/60 [00:00<00:00,   60.19it/s]     92%|#########1| Estimating DFC : 55/60 [00:00<00:00,   59.94it/s]     93%|#########3| Estimating DFC : 56/60 [00:00<00:00,   59.46it/s]     95%|#########5| Estimating DFC : 57/60 [00:00<00:00,   59.02it/s]     98%|#########8| Estimating DFC : 59/60 [00:00<00:00,   59.93it/s]    100%|##########| Estimating DFC : 60/60 [00:00<00:00,   67.52it/s]
      0%|          | Estimating DFC : 0/60 [00:00<?,       ?it/s]      3%|3         | Estimating DFC : 2/60 [00:00<00:01,   45.92it/s]      7%|6         | Estimating DFC : 4/60 [00:00<00:01,   46.82it/s]     10%|#         | Estimating DFC : 6/60 [00:00<00:01,   47.94it/s]     13%|#3        | Estimating DFC : 8/60 [00:00<00:01,   48.74it/s]     15%|#5        | Estimating DFC : 9/60 [00:00<00:01,   48.87it/s]     18%|#8        | Estimating DFC : 11/60 [00:00<00:00,   49.50it/s]     22%|##1       | Estimating DFC : 13/60 [00:00<00:00,   50.54it/s]     25%|##5       | Estimating DFC : 15/60 [00:00<00:00,   50.14it/s]     28%|##8       | Estimating DFC : 17/60 [00:00<00:00,   50.81it/s]     32%|###1      | Estimating DFC : 19/60 [00:00<00:00,   51.53it/s]     35%|###5      | Estimating DFC : 21/60 [00:00<00:00,   51.94it/s]     37%|###6      | Estimating DFC : 22/60 [00:00<00:00,   51.96it/s]     40%|####      | Estimating DFC : 24/60 [00:00<00:00,   52.77it/s]     43%|####3     | Estimating DFC : 26/60 [00:00<00:00,   53.87it/s]     47%|####6     | Estimating DFC : 28/60 [00:00<00:00,   53.76it/s]     48%|####8     | Estimating DFC : 29/60 [00:00<00:00,   53.55it/s]     50%|#####     | Estimating DFC : 30/60 [00:00<00:00,   53.50it/s]     52%|#####1    | Estimating DFC : 31/60 [00:00<00:00,   53.48it/s]     53%|#####3    | Estimating DFC : 32/60 [00:00<00:00,   53.45it/s]     55%|#####5    | Estimating DFC : 33/60 [00:00<00:00,   52.68it/s]     57%|#####6    | Estimating DFC : 34/60 [00:00<00:00,   52.73it/s]     60%|######    | Estimating DFC : 36/60 [00:00<00:00,   53.62it/s]     63%|######3   | Estimating DFC : 38/60 [00:00<00:00,   54.67it/s]     65%|######5   | Estimating DFC : 39/60 [00:00<00:00,   53.65it/s]     67%|######6   | Estimating DFC : 40/60 [00:00<00:00,   53.50it/s]     70%|#######   | Estimating DFC : 42/60 [00:00<00:00,   54.24it/s]     73%|#######3  | Estimating DFC : 44/60 [00:00<00:00,   54.96it/s]     77%|#######6  | Estimating DFC : 46/60 [00:00<00:00,   55.24it/s]     80%|########  | Estimating DFC : 48/60 [00:00<00:00,   55.92it/s]     82%|########1 | Estimating DFC : 49/60 [00:00<00:00,   56.02it/s]     83%|########3 | Estimating DFC : 50/60 [00:00<00:00,   56.07it/s]     87%|########6 | Estimating DFC : 52/60 [00:00<00:00,   55.69it/s]     90%|######### | Estimating DFC : 54/60 [00:00<00:00,   56.42it/s]     93%|#########3| Estimating DFC : 56/60 [00:00<00:00,   57.14it/s]     97%|#########6| Estimating DFC : 58/60 [00:00<00:00,   56.12it/s]     98%|#########8| Estimating DFC : 59/60 [00:00<00:00,   56.40it/s]    100%|##########| Estimating DFC : 60/60 [00:00<00:00,   61.82it/s]



now we can plot the dfc by concatenating all of the subjects


.. code-block:: default


    dfc_suj = xr.concat(dfc, 'trials').groupby('trials').mean('trials')
    dfc_suj.plot.line(x='times', col='roi', hue='trials')
    plt.show()




.. image:: /auto_examples/tutorials/images/sphx_glr_plot_stim_spec_network_003.png
    :class: sphx-glr-single-img




as shown in the figure above, the undirected connectivity between node X and
Y is modulated according to the stimulus. But we can test still using the
workflow of mutual information


.. code-block:: default


    ds_dfc = DatasetEphy(dfc, y='trials', times='times', roi='roi')
    wf_dfc = WfMi(mi_type='cd', inference='rfx')
    mi_dfc, pv_dfc = wf_dfc.fit(ds_dfc, n_perm=200, n_jobs=1, random_state=0)

    # finally, plot the DFC
    plot_mi(mi_dfc, pv_dfc)
    plt.show()





.. image:: /auto_examples/tutorials/images/sphx_glr_plot_stim_spec_network_004.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | Estimating MI : 0/3 [00:00<?,       ?it/s]     33%|###3      | Estimating MI : 1/3 [00:00<00:01,    1.63it/s]     67%|######6   | Estimating MI : 2/3 [00:01<00:00,    1.62it/s]    100%|##########| Estimating MI : 3/3 [00:01<00:00,    1.62it/s]    100%|##########| Estimating MI : 3/3 [00:01<00:00,    1.59it/s]



Stimulus-specificity of the directed connectivity
-------------------------------------------------

The final point of this tutorial is to try to compute the directed
connectivity and perform the stats on it to see whether the information is
sent from one region to another (which should be X->Y)


.. code-block:: default


    # covgc settings
    dt = 50
    lag = 5
    step = 3
    t0 = np.arange(lag, len(times) - dt, step)

    # compute the covgc for each subject
    gc = []
    for n_s in range(n_subjects):
        _gc = conn_covgc(x[n_s], roi='roi', times='times', dt=dt, lag=lag, t0=t0,
                         n_jobs=1)
        gc += [_gc]
    gc_times, gc_roi = _gc['times'].data, _gc['roi'].data

    # plot the mean covgc across subjects
    gc_suj = xr.concat(gc, 'trials').groupby('trials').mean('trials')

    fig, gs  = plt.subplots(3, 3, sharex='all', sharey='all',
                            figsize=(12, 12))
    for n_d, direction in enumerate(['x->y', 'y->x', 'x.y']):
        for n_r, r in enumerate(gc_roi):
            gc_dir_r = gc_suj.sel(direction=direction, roi=r)

            plt.sca(gs[n_d, n_r])
            plt.plot(gc_times, gc_dir_r.sel(trials=1), color='red')
            plt.plot(gc_times, gc_dir_r.sel(trials=2), color='green')
            plt.xlabel('Times'), plt.ylabel('MI (bits)')
            if direction is 'x->y':
                tit = f"{r[0].upper()}->{r[-1].upper()}"
            elif direction is 'y->x':
                tit = f"{r[-1].upper()}->{r[0].upper()}"
            elif direction is 'x.y':
                tit = f"{r[0].upper()}.{r[-1].upper()}"
            plt.title(tit)
            plt.axvline(0, lw=2, color='k')
    plt.show()




.. image:: /auto_examples/tutorials/images/sphx_glr_plot_stim_spec_network_005.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          |  : 0/3 [00:00<?,       ?it/s]     33%|###3      |  : 1/3 [00:07<00:15,    7.63s/it]     67%|######6   |  : 2/3 [00:15<00:07,    7.64s/it]    100%|##########|  : 3/3 [00:23<00:00,    7.65s/it]    100%|##########|  : 3/3 [00:23<00:00,    7.76s/it]
      0%|          |  : 0/3 [00:00<?,       ?it/s]     33%|###3      |  : 1/3 [00:07<00:15,    7.82s/it]     67%|######6   |  : 2/3 [00:15<00:07,    7.82s/it]    100%|##########|  : 3/3 [00:22<00:00,    7.79s/it]    100%|##########|  : 3/3 [00:22<00:00,    7.60s/it]
      0%|          |  : 0/3 [00:00<?,       ?it/s]     33%|###3      |  : 1/3 [00:07<00:15,    7.91s/it]     67%|######6   |  : 2/3 [00:15<00:07,    7.90s/it]    100%|##########|  : 3/3 [00:23<00:00,    7.89s/it]    100%|##########|  : 3/3 [00:23<00:00,    7.82s/it]
      0%|          |  : 0/3 [00:00<?,       ?it/s]     33%|###3      |  : 1/3 [00:07<00:14,    7.48s/it]     67%|######6   |  : 2/3 [00:15<00:07,    7.48s/it]    100%|##########|  : 3/3 [00:22<00:00,    7.48s/it]    100%|##########|  : 3/3 [00:22<00:00,    7.49s/it]
      0%|          |  : 0/3 [00:00<?,       ?it/s]     33%|###3      |  : 1/3 [00:08<00:16,    8.04s/it]     67%|######6   |  : 2/3 [00:15<00:08,    8.02s/it]    100%|##########|  : 3/3 [00:23<00:00,    8.02s/it]    100%|##########|  : 3/3 [00:23<00:00,    7.90s/it]



finally, we can can compute the MI between the covgc (i.e for each direction)
and the stimulus


.. code-block:: default


    mi_gc, pv_gc = {}, {}
    for direction in ['x->y', 'y->x', 'x.y']:
        # build the dataset for a single direction
        gc_dir = [k.sel(direction=direction).squeeze() for k in gc]
        # define an electrophysiological dataset
        ds_gc = DatasetEphy(gc_dir, y='trials', roi='roi', times='times')
        # compute and store the MI and p-values
        wf_gc = WfMi(mi_type='cd', inference='rfx')
        _mi_gc, _pv_gc = wf_gc.fit(ds_gc, n_perm=200, n_jobs=1, random_state=0)
        mi_gc[direction] = _mi_gc
        pv_gc[direction] = _pv_gc

    # convert the mi and p-values to a DataArray
    mi_gc = xr.Dataset(mi_gc).to_array('direction')
    pv_gc = xr.Dataset(pv_gc).to_array('direction')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | Estimating MI : 0/3 [00:00<?,       ?it/s]     33%|###3      | Estimating MI : 1/3 [00:00<00:01,    1.44it/s]     67%|######6   | Estimating MI : 2/3 [00:01<00:00,    1.44it/s]    100%|##########| Estimating MI : 3/3 [00:02<00:00,    1.45it/s]    100%|##########| Estimating MI : 3/3 [00:02<00:00,    1.48it/s]
      0%|          | Estimating MI : 0/3 [00:00<?,       ?it/s]     33%|###3      | Estimating MI : 1/3 [00:00<00:01,    1.48it/s]     67%|######6   | Estimating MI : 2/3 [00:01<00:00,    1.48it/s]    100%|##########| Estimating MI : 3/3 [00:01<00:00,    1.48it/s]    100%|##########| Estimating MI : 3/3 [00:01<00:00,    1.51it/s]
      0%|          | Estimating MI : 0/3 [00:00<?,       ?it/s]     33%|###3      | Estimating MI : 1/3 [00:00<00:01,    1.47it/s]     67%|######6   | Estimating MI : 2/3 [00:01<00:00,    1.48it/s]    100%|##########| Estimating MI : 3/3 [00:01<00:00,    1.48it/s]    100%|##########| Estimating MI : 3/3 [00:01<00:00,    1.52it/s]



plot the result


.. code-block:: default


    # sphinx_gallery_thumbnail_number = 6
    fig, gs  = plt.subplots(3, 3, sharex='all', sharey='all', figsize=(12, 12))
    for n_d, direction in enumerate(['x->y', 'y->x', 'x.y']):
        for n_r, r in enumerate(gc_roi):
            # select mi and p-values computed on covgc
            mi_gc_dir_r = mi_gc.sel(direction=direction, roi=r)
            pv_gc_dir_r = pv_gc.sel(direction=direction, roi=r)

            # set to nan non-significant values
            mi_gc_s = mi_gc_dir_r.copy()
            mi_gc_s[pv_gc_dir_r >= .05] = np.nan

            plt.sca(gs[n_d, n_r])
            plt.plot(gc_times, mi_gc_dir_r, color='black', lw=1)
            plt.plot(gc_times, mi_gc_s, color='red', lw=3)
            plt.xlabel('Times'), plt.ylabel('MI (bits)')
            if direction is 'x->y':
                tit = f"{r[0].upper()}->{r[-1].upper()}"
            elif direction is 'y->x':
                tit = f"{r[-1].upper()}->{r[0].upper()}"
            elif direction is 'x.y':
                tit = f"{r[0].upper()}.{r[-1].upper()}"
            plt.title(tit)
            plt.axvline(0, lw=2, color='k')

    plt.show()



.. image:: /auto_examples/tutorials/images/sphx_glr_plot_stim_spec_network_006.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  17.047 seconds)


.. _sphx_glr_download_auto_examples_tutorials_plot_stim_spec_network.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_stim_spec_network.py <plot_stim_spec_network.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_stim_spec_network.ipynb <plot_stim_spec_network.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
